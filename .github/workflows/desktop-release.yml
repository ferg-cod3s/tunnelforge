name: Desktop App Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  # Build Go server binaries for all platforms
  build-server:
    name: Build Go Server
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - { os: linux, arch: amd64, ext: '' }
          - { os: linux, arch: arm64, ext: '' }
          - { os: windows, arch: amd64, ext: '.exe' }
          - { os: windows, arch: arm64, ext: '.exe' }
          - { os: darwin, arch: amd64, ext: '' }
          - { os: darwin, arch: arm64, ext: '' }
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build Go Server
        working-directory: development/go-server
        env:
          GOOS: ${{ matrix.target.os }}
          GOARCH: ${{ matrix.target.arch }}
          CGO_ENABLED: 0
        run: |
          go build -ldflags="-s -w" -o tunnelforge-server-${{ matrix.target.os }}-${{ matrix.target.arch }}${{ matrix.target.ext }} cmd/server/main.go

      - name: Upload Server Binary
        uses: actions/upload-artifact@v3
        with:
          name: tunnelforge-server-${{ matrix.target.os }}-${{ matrix.target.arch }}
          path: development/go-server/tunnelforge-server-${{ matrix.target.os }}-${{ matrix.target.arch }}${{ matrix.target.ext }}

  # Build Linux desktop app
  build-linux:
    name: Build Linux Desktop App
    runs-on: ubuntu-latest
    needs: build-server
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.0-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download Go Server Binary
        uses: actions/download-artifact@v3
        with:
          name: tunnelforge-server-linux-amd64
          path: desktop/src-tauri/bin/

      - name: Make Server Binary Executable
        run: chmod +x desktop/src-tauri/bin/tunnelforge-server-linux-amd64

      - name: Install Dependencies
        working-directory: desktop
        run: |
          npm install
          cargo install tauri-cli

      - name: Build Desktop App
        working-directory: desktop
        run: |
          npm run build

      - name: Upload Linux Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tunnelforge-linux
          path: |
            desktop/src-tauri/target/release/bundle/deb/*.deb
            desktop/src-tauri/target/release/bundle/rpm/*.rpm
            desktop/src-tauri/target/release/bundle/appimage/*.AppImage

  # Build Windows desktop app
  build-windows:
    name: Build Windows Desktop App
    runs-on: windows-latest
    needs: build-server
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download Go Server Binary
        uses: actions/download-artifact@v3
        with:
          name: tunnelforge-server-windows-amd64
          path: desktop/src-tauri/bin/

      - name: Install Dependencies
        working-directory: desktop
        run: |
          npm install
          cargo install tauri-cli

      - name: Build Desktop App
        working-directory: desktop
        run: |
          npm run build

      - name: Upload Windows Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tunnelforge-windows
          path: |
            desktop/src-tauri/target/release/bundle/msi/*.msi
            desktop/src-tauri/target/release/bundle/nsis/*.exe

  # Build macOS desktop app (optional - mainly using native Mac app)
  build-macos:
    name: Build macOS Desktop App
    runs-on: macos-latest
    needs: build-server
    if: false  # Disabled since we have native Mac app
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download Go Server Binary
        uses: actions/download-artifact@v3
        with:
          name: tunnelforge-server-darwin-amd64
          path: desktop/src-tauri/bin/

      - name: Make Server Binary Executable
        run: chmod +x desktop/src-tauri/bin/tunnelforge-server-darwin-amd64

      - name: Install Dependencies
        working-directory: desktop
        run: |
          npm install
          cargo install tauri-cli

      - name: Build Desktop App
        working-directory: desktop
        run: |
          npm run build

      - name: Upload macOS Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tunnelforge-macos
          path: |
            desktop/src-tauri/target/release/bundle/dmg/*.dmg
            desktop/src-tauri/target/release/bundle/macos/*.app

  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          body: |
            ## TunnelForge Desktop v${{ github.ref_name }}
            
            Cross-platform desktop applications for TunnelForge terminal sharing.
            
            ### Downloads
            
            **Linux:**
            - `.AppImage` - Universal Linux (recommended)
            - `.deb` - Ubuntu/Debian packages
            - `.rpm` - Red Hat/Fedora packages
            
            **Windows:**
            - `.msi` - Windows Installer (recommended)
            - `.exe` - NSIS Setup Executable
            
            ### Installation
            
            **Linux:**
            ```bash
            # AppImage (universal)
            chmod +x TunnelForge-*.AppImage
            ./TunnelForge-*.AppImage
            
            # Ubuntu/Debian
            sudo dpkg -i tunnelforge_*_amd64.deb
            
            # Red Hat/Fedora
            sudo rpm -i tunnelforge-*.x86_64.rpm
            ```
            
            **Windows:**
            ```powershell
            # Run the MSI installer
            TunnelForge-*.msi
            ```
            
            ### Features
            - ‚ö° Ultra-lightweight (~10MB vs 100MB+ Electron apps)
            - üöÄ High performance Rust backend
            - üñ•Ô∏è Native desktop integration
            - üîî System notifications
            - üéõÔ∏è Built-in server management
            - üåê Same web interface as Mac app
            
            ### System Requirements
            - **Linux**: GTK 3.0+, WebKit2GTK 4.0+
            - **Windows**: Windows 10+ with WebView2
            
            ### Support
            - üìñ [Documentation](https://tunnelforge.dev/docs)
            - üêõ [Issues](https://github.com/ferg-cod3s/tunnelforge/issues)
            - üí¨ [Discussions](https://github.com/ferg-cod3s/tunnelforge/discussions)
          files: |
            tunnelforge-linux/**/*
            tunnelforge-windows/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}