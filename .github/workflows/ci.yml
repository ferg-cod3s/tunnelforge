name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Rust Backend Tests
  rust-tests:
    name: Rust Backend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            desktop/src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        working-directory: desktop/src-tauri
        run: |
          cargo test --verbose

      - name: Run Rust integration tests
        working-directory: desktop/src-tauri
        run: |
          cargo test --test integration_tests --verbose

      - name: Check formatting
        working-directory: desktop/src-tauri
        run: |
          cargo fmt --check

      - name: Run clippy
        working-directory: desktop/src-tauri
        run: |
          cargo clippy -- -D warnings

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: web
        run: bun install

      - name: Run type checking
        working-directory: web
        run: bun run typecheck

      - name: Run linting
        working-directory: web
        run: bun run lint

      - name: Run unit tests
        working-directory: web
        run: bun test

      - name: Build for production
        working-directory: web
        run: bun run build

  # E2E Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Playwright
        working-directory: web
        run: bun add -d @playwright/test

      - name: Install Playwright browsers
        working-directory: web
        run: bunx playwright install

      - name: Run E2E tests
        working-directory: web
        run: bunx playwright test

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: web/playwright-report/
          retention-days: 30

  # Cross-platform Build Tests
  build-tests:
    name: Build Tests
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Rust (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: dtolnay/rust-toolchain@stable

      - name: Install Rust (Windows)
        if: matrix.os == 'windows-latest'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Cache Cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            desktop/src-tauri/target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Build Tauri app (Linux)
        if: matrix.os == 'ubuntu-latest'
        working-directory: desktop/src-tauri
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          cargo build --release

      - name: Build Tauri app (macOS)
        if: matrix.os == 'macos-latest'
        working-directory: desktop/src-tauri
        run: |
          cargo build --release

      - name: Build Tauri app (Windows)
        if: matrix.os == 'windows-latest'
        working-directory: desktop/src-tauri
        run: |
          cargo build --release

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Run security audit
        working-directory: desktop/src-tauri
        run: |
          cargo audit

      - name: Check for vulnerabilities in dependencies
        working-directory: web
        run: |
          bun audit

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install dependencies
        working-directory: web
        run: bun install

      - name: Run performance tests
        working-directory: web
        run: |
          bun run test:coverage

      - name: Build performance test
        working-directory: web
        run: |
          time bun run build

  # Documentation Tests
  docs-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for broken links
        run: |
          # Install link checker
          curl -fsSL https://raw.githubusercontent.com/lycheeverse/lychee/master/README.md | grep -A 10 "Installation" || echo "Link checker not available"

      - name: Validate README files
        run: |
          # Check if README files exist and are not empty
          find . -name "README.md" -exec sh -c 'if [ ! -s "$1" ]; then echo "Empty README: $1"; exit 1; fi' _ {} \;

      - name: Check for license files
        run: |
          if [ ! -f LICENSE ]; then
            echo "LICENSE file not found"
            exit 1
          fi
