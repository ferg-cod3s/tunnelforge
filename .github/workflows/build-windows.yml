name: 'Build Windows Apps'

on:
  workflow_call:
    inputs:
      build_type:
        required: true
        type: string
        default: 'test'
      sign_artifacts:
        required: false
        type: boolean
        default: false

jobs:
  build-windows:
    name: Build Windows Desktop App
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        working-directory: windows
        run: |
          bun install
          cargo install tauri-cli

      - name: Build web frontend
        working-directory: web
        run: bun run build:bun

      - name: Build Tauri app
        working-directory: windows
        run: |
          bun run build
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}

      - name: Sign executables
        if: inputs.sign_artifacts
        run: |
          # Sign MSI installer
          if (Test-Path "windows/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi") {
            signtool sign /fd SHA256 /t http://timestamp.digicert.com /f "${{ secrets.WIN_CSC_PATH }}" /p "${{ secrets.WIN_CSC_KEY_PASSWORD }}" "windows/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi"
          }
          
          # Sign NSIS installer
          if (Test-Path "windows/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe") {
            signtool sign /fd SHA256 /t http://timestamp.digicert.com /f "${{ secrets.WIN_CSC_PATH }}" /p "${{ secrets.WIN_CSC_KEY_PASSWORD }}" "windows/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe"
          }

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tunnelforge-windows-${{ matrix.target }}
          path: |
            windows/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            windows/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          retention-days: 7

  test-windows:
    name: Test Windows Installation
    runs-on: windows-latest
    needs: build-windows
    if: inputs.build_type == 'test'

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tunnelforge-windows-x86_64-pc-windows-msvc
          path: artifacts/

      - name: Test MSI installation
        run: |
          $msiFile = Get-ChildItem "artifacts/*.msi" | Select-Object -First 1
          if ($msiFile) {
            Start-Process msiexec -ArgumentList "/i", "`"$($msiFile.FullName)`"", "/quiet", "/norestart", "/l*v", "install.log" -Wait
            Write-Host "MSI installation completed"
          }

      - name: Test NSIS installation
        run: |
          $exeFile = Get-ChildItem "artifacts/*.exe" | Select-Object -First 1
          if ($exeFile) {
            Start-Process $exeFile.FullName -ArgumentList "/S" -Wait
            Write-Host "NSIS installation completed"
          }

      - name: Verify installation
        run: |
          # Check if TunnelForge is installed
          $installed = Get-WmiObject -Class Win32_Product | Where-Object {$_.Name -like "*TunnelForge*"}
          if ($installed) {
            Write-Host "✅ TunnelForge successfully installed"
          } else {
            Write-Error "❌ TunnelForge installation failed"
            exit 1
          }
