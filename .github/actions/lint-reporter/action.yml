name: 'Lint Reporter'
description: 'Reports linting results as a PR comment'
inputs:
  title:
    description: 'Title for the lint report section'
    required: true
  lint-result:
    description: 'Linting result (success or failure)'
    required: true
  lint-output:
    description: 'Linting output to include in the report'
    required: true
  github-token:
    description: 'GitHub token for posting comments'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Create or Update PR Comment
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const title = ${{ toJSON(inputs.title) }};
          const result = ${{ toJSON(inputs.lint-result) }};
          const output = ${{ toJSON(inputs.lint-output) }};
          
          const icon = result === 'success' ? '‚úÖ' : '‚ùå';
          const status = result === 'success' ? 'Passed' : 'Failed';
          
          // Create section content
          let sectionContent = `### ${title}\n${icon} **Status**: ${status}\n`;
          
          if (result !== 'success' && output && output !== 'No output') {
            sectionContent += `\n<details>\n<summary>Click to see details</summary>\n\n\`\`\`\n${output}\n\`\`\`\n\n</details>\n`;
          }
          
          const commentMarker = '<!-- lint-results -->';
          const issue_number = context.issue.number;
          
          // Find existing comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue_number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes(commentMarker)
          );
          
          let body;
          if (botComment) {
            // Update existing comment
            const existingBody = botComment.body;
            const sectionHeader = `### ${title}`;
            const nextSectionRegex = /^###\s/m;
            
            if (existingBody.includes(sectionHeader)) {
              // Replace existing section
              const lines = existingBody.split('\n');
              let inSection = false;
              let newLines = [];
              
              for (let i = 0; i < lines.length; i++) {
                if (lines[i] === sectionHeader) {
                  inSection = true;
                  // Add the new section content
                  newLines.push(...sectionContent.trim().split('\n'));
                  continue;
                }
                
                if (inSection && lines[i].match(nextSectionRegex)) {
                  inSection = false;
                }
                
                if (!inSection) {
                  newLines.push(lines[i]);
                }
              }
              
              body = newLines.join('\n');
            } else {
              // Add new section at the end
              body = existingBody + '\n\n' + sectionContent;
            }
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body,
            });
          } else {
            // Create new comment
            body = `## üîç Code Quality Report\n${commentMarker}\n\nThis comment is automatically updated with linting results from CI.\n\n${sectionContent}`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: body,
            });
          }