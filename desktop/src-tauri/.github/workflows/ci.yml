name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          components: rustfmt, clippy
          override: true
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Run clippy
        run: cargo clippy -- -D warnings
      
      - name: Run security audit
        uses: actions-rs/audit-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Test
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev
      
      - name: Run tests
        run: cargo test --all-features
      
      - name: Run integration tests
        run: cargo test --test '*_integration_test'

  build:
    name: Build
    needs: test
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            packages: deb appimage
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            packages: msi nsis
          - os: macos-latest
            target: x86_64-apple-darwin
            packages: dmg
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
      
      - name: Install Linux dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev
      
      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Create packages
        run: |
          cargo tauri build --target ${{ matrix.target }}
      
      - name: Sign Windows packages
        if: matrix.os == 'windows-latest'
        env:
          WINDOWS_SIGN_KEY: ${{ secrets.WINDOWS_SIGN_KEY }}
          WINDOWS_SIGN_PASSWORD: ${{ secrets.WINDOWS_SIGN_PASSWORD }}
        run: |
          # Sign MSI installer
          signtool sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /f "$env:WINDOWS_SIGN_KEY" /p "$env:WINDOWS_SIGN_PASSWORD" "target/${{ matrix.target }}/release/bundle/msi/*.msi"
          # Sign NSIS installer
          signtool sign /tr http://timestamp.digicert.com /td sha256 /fd sha256 /f "$env:WINDOWS_SIGN_KEY" /p "$env:WINDOWS_SIGN_PASSWORD" "target/${{ matrix.target }}/release/bundle/nsis/*.exe"
      
      - name: Sign and notarize macOS package
        if: matrix.os == 'macos-latest'
        env:
          APPLE_SIGN_KEY: ${{ secrets.APPLE_SIGN_KEY }}
          APPLE_SIGN_PASSWORD: ${{ secrets.APPLE_SIGN_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          # Sign app bundle
          codesign --force --timestamp --options runtime --sign "$APPLE_SIGN_KEY" "target/${{ matrix.target }}/release/bundle/dmg/TunnelForge.app"
          
          # Create ZIP for notarization
          ditto -c -k --keepParent "target/${{ matrix.target }}/release/bundle/dmg/TunnelForge.app" "TunnelForge.zip"
          
          # Submit for notarization
          xcrun notarytool submit "TunnelForge.zip" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --progress
          
          # Staple the notarization ticket
          xcrun stapler staple "target/${{ matrix.target }}/release/bundle/dmg/TunnelForge.app"
      
      - name: Sign Linux packages
        if: matrix.os == 'ubuntu-latest'
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          # Import GPG key
          echo "$GPG_PRIVATE_KEY" | gpg --import --batch --yes
          
          # Sign DEB package
          dpkg-sig --sign builder "target/${{ matrix.target }}/release/bundle/deb/*.deb"
          
          # Sign AppImage
          gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --detach-sign "target/${{ matrix.target }}/release/bundle/appimage/*.AppImage"
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: tunnelforge-${{ matrix.target }}
          path: |
            target/${{ matrix.target }}/release/bundle/msi/*.msi
            target/${{ matrix.target }}/release/bundle/nsis/*.exe
            target/${{ matrix.target }}/release/bundle/deb/*.deb
            target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            target/${{ matrix.target }}/release/bundle/dmg/*.dmg

  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      
      - name: Generate release notes
        id: release_notes
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Generate release notes from git log
          echo "## TunnelForge v$VERSION" > release_notes.md
          echo "" >> release_notes.md
          echo "### Changes" >> release_notes.md
          git log --pretty=format:"* %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> release_notes.md
          
          # Save release notes for next step
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          cat release_notes.md >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            tunnelforge-*/target/*/release/bundle/msi/*.msi
            tunnelforge-*/target/*/release/bundle/nsis/*.exe
            tunnelforge-*/target/*/release/bundle/deb/*.deb
            tunnelforge-*/target/*/release/bundle/appimage/*.AppImage
            tunnelforge-*/target/*/release/bundle/dmg/*.dmg
          body: ${{ env.RELEASE_NOTES }}
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

