"use strict";
/**
 * Unix socket protocol for VibeTunnel IPC
 *
 * Message format (binary):
 * [1 byte: message type]
 * [4 bytes: payload length (big-endian)]
 * [N bytes: payload]
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageBuilder = exports.MessageParser = exports.MessageType = void 0;
exports.frameMessage = frameMessage;
exports.parsePayload = parsePayload;
const buffer_1 = require("buffer");
/**
 * Message types for the socket protocol
 */
var MessageType;
(function (MessageType) {
    MessageType[MessageType["STDIN_DATA"] = 1] = "STDIN_DATA";
    MessageType[MessageType["CONTROL_CMD"] = 2] = "CONTROL_CMD";
    MessageType[MessageType["STATUS_UPDATE"] = 3] = "STATUS_UPDATE";
    MessageType[MessageType["HEARTBEAT"] = 4] = "HEARTBEAT";
    MessageType[MessageType["ERROR"] = 5] = "ERROR";
    // Reserved for future use
    MessageType[MessageType["STDOUT_SUBSCRIBE"] = 16] = "STDOUT_SUBSCRIBE";
    MessageType[MessageType["METRICS"] = 17] = "METRICS";
    // Status operations
    MessageType[MessageType["STATUS_REQUEST"] = 32] = "STATUS_REQUEST";
    MessageType[MessageType["STATUS_RESPONSE"] = 33] = "STATUS_RESPONSE";
    // Git operations
    MessageType[MessageType["GIT_FOLLOW_REQUEST"] = 48] = "GIT_FOLLOW_REQUEST";
    MessageType[MessageType["GIT_FOLLOW_RESPONSE"] = 49] = "GIT_FOLLOW_RESPONSE";
    MessageType[MessageType["GIT_EVENT_NOTIFY"] = 50] = "GIT_EVENT_NOTIFY";
    MessageType[MessageType["GIT_EVENT_ACK"] = 51] = "GIT_EVENT_ACK";
})(MessageType || (exports.MessageType = MessageType = {}));
/**
 * Frame a message for transmission
 */
function frameMessage(type, payload) {
    const payloadBuffer = buffer_1.Buffer.isBuffer(payload)
        ? payload
        : buffer_1.Buffer.from(typeof payload === 'string' ? payload : JSON.stringify(payload), 'utf8');
    const message = buffer_1.Buffer.allocUnsafe(5 + payloadBuffer.length);
    message[0] = type;
    message.writeUInt32BE(payloadBuffer.length, 1);
    payloadBuffer.copy(message, 5);
    return message;
}
/**
 * Parse messages from a buffer
 */
class MessageParser {
    constructor() {
        this.buffer = buffer_1.Buffer.alloc(0);
    }
    /**
     * Add data to the parser
     */
    addData(chunk) {
        this.buffer = buffer_1.Buffer.concat([this.buffer, chunk]);
    }
    /**
     * Parse complete messages from the buffer
     */
    *parseMessages() {
        while (this.buffer.length >= 5) {
            const messageType = this.buffer[0];
            const payloadLength = this.buffer.readUInt32BE(1);
            // Check if we have the complete message
            if (this.buffer.length < 5 + payloadLength) {
                break;
            }
            // Extract the message
            const payload = this.buffer.subarray(5, 5 + payloadLength);
            this.buffer = this.buffer.subarray(5 + payloadLength);
            yield { type: messageType, payload };
        }
    }
    /**
     * Get the number of bytes waiting to be parsed
     */
    get pendingBytes() {
        return this.buffer.length;
    }
    /**
     * Clear the buffer
     */
    clear() {
        this.buffer = buffer_1.Buffer.alloc(0);
    }
}
exports.MessageParser = MessageParser;
/**
 * High-level message creation helpers
 */
exports.MessageBuilder = {
    stdin(data) {
        return frameMessage(MessageType.STDIN_DATA, data);
    },
    resize(cols, rows) {
        return frameMessage(MessageType.CONTROL_CMD, { cmd: 'resize', cols, rows });
    },
    kill(signal) {
        return frameMessage(MessageType.CONTROL_CMD, { cmd: 'kill', signal });
    },
    resetSize() {
        return frameMessage(MessageType.CONTROL_CMD, { cmd: 'reset-size' });
    },
    updateTitle(title) {
        return frameMessage(MessageType.CONTROL_CMD, { cmd: 'update-title', title });
    },
    status(app, status, extra) {
        return frameMessage(MessageType.STATUS_UPDATE, { app, status, ...extra });
    },
    heartbeat() {
        return frameMessage(MessageType.HEARTBEAT, buffer_1.Buffer.alloc(0));
    },
    error(code, message, details) {
        return frameMessage(MessageType.ERROR, { code, message, details });
    },
    gitFollowRequest(request) {
        return frameMessage(MessageType.GIT_FOLLOW_REQUEST, request);
    },
    gitFollowResponse(response) {
        return frameMessage(MessageType.GIT_FOLLOW_RESPONSE, response);
    },
    gitEventNotify(event) {
        return frameMessage(MessageType.GIT_EVENT_NOTIFY, event);
    },
    gitEventAck(ack) {
        return frameMessage(MessageType.GIT_EVENT_ACK, ack);
    },
    statusRequest() {
        return frameMessage(MessageType.STATUS_REQUEST, {});
    },
    statusResponse(response) {
        return frameMessage(MessageType.STATUS_RESPONSE, response);
    },
};
/**
 * Parse payload based on message type
 */
function parsePayload(type, payload) {
    switch (type) {
        case MessageType.STDIN_DATA:
            return payload.toString('utf8');
        case MessageType.CONTROL_CMD:
        case MessageType.STATUS_UPDATE:
        case MessageType.ERROR:
        case MessageType.STATUS_REQUEST:
        case MessageType.STATUS_RESPONSE:
        case MessageType.GIT_FOLLOW_REQUEST:
        case MessageType.GIT_FOLLOW_RESPONSE:
        case MessageType.GIT_EVENT_NOTIFY:
        case MessageType.GIT_EVENT_ACK:
            try {
                return JSON.parse(payload.toString('utf8'));
            }
            catch (e) {
                throw new Error(`Failed to parse JSON payload for message type ${type}: ${e instanceof Error ? e.message : String(e)}`);
            }
        case MessageType.HEARTBEAT:
            return null;
        default:
            return payload;
    }
}
//# sourceMappingURL=data:application/json;base64,