"use strict";
/**
 * Shared type definitions used by both frontend and backend
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TitleMode = exports.ServerEventType = exports.HttpMethod = void 0;
/**
 * HTTP methods enum
 */
var HttpMethod;
(function (HttpMethod) {
    HttpMethod["GET"] = "GET";
    HttpMethod["POST"] = "POST";
    HttpMethod["PUT"] = "PUT";
    HttpMethod["DELETE"] = "DELETE";
    HttpMethod["PATCH"] = "PATCH";
    HttpMethod["HEAD"] = "HEAD";
    HttpMethod["OPTIONS"] = "OPTIONS";
})(HttpMethod || (exports.HttpMethod = HttpMethod = {}));
/**
 * Types of server events that can be received via Server-Sent Events (SSE).
 * Matches the Swift ServerEventType enum for type safety across platforms.
 */
var ServerEventType;
(function (ServerEventType) {
    ServerEventType["SessionStart"] = "session-start";
    ServerEventType["SessionExit"] = "session-exit";
    ServerEventType["CommandFinished"] = "command-finished";
    ServerEventType["CommandError"] = "command-error";
    ServerEventType["Bell"] = "bell";
    ServerEventType["ClaudeTurn"] = "claude-turn";
    ServerEventType["Connected"] = "connected";
    ServerEventType["TestNotification"] = "test-notification";
})(ServerEventType || (exports.ServerEventType = ServerEventType = {}));
/**
 * Terminal title management modes
 */
var TitleMode;
(function (TitleMode) {
    TitleMode["NONE"] = "none";
    TitleMode["FILTER"] = "filter";
    TitleMode["STATIC"] = "static";
    TitleMode["DYNAMIC"] = "dynamic";
})(TitleMode || (exports.TitleMode = TitleMode = {}));
//# sourceMappingURL=data:application/json;base64,