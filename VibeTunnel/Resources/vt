#!/bin/bash

# vt - VibeTunnel TTY Forward Wrapper
# This script wraps tty-fwd to enable VibeTunnel to see command output

# Function to find Claude executable in common locations
find_claude() {
    local claude_paths=(
        "$HOME/.claude/local/claude"
        "$HOME/.claude/local/node_modules/.bin/claude"
        "/opt/homebrew/bin/claude"
        "/usr/local/bin/claude"
        "/usr/bin/claude"
        "$(which claude 2>/dev/null)"
    )

    for path in "${claude_paths[@]}"; do
        if [[ -n "$path" && -x "$path" ]]; then
            echo "$path"
            return 0
        fi
    done

    echo "Error: Claude executable not found in any of the following locations:" >&2
    printf "  %s\n" "${claude_paths[@]}" >&2
    echo "Please ensure Claude is installed or specify the full path manually." >&2
    return 1
}

# Get the directory where this script is actually located (Resources folder)
SCRIPT_DIR="$(cd "$(dirname "$SCRIPT_REAL_PATH")" && pwd)"

# Path to tty-fwd executable in the same Resources directory
TTY_FWD="$SCRIPT_DIR/tty-fwd"

# Check if tty-fwd exists there, otherwise use the one from ../tty-fwd/target/debug/tty-fwd
if [[ ! -x "$TTY_FWD" ]]; then
    TTY_FWD="$SCRIPT_DIR/../tty-fwd/target/debug/tty-fwd"
    if [[ ! -x "$TTY_FWD" ]]; then
        echo "Error: tty-fwd executable not found at $TTY_FWD" >&2
        exit 1
    fi
fi

# Handle --claude option
if [[ "$1" == "--claude" ]]; then
    shift
    claude_path="$(find_claude)"
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    # Re-execute vt with claude and remaining arguments
    exec "$0" "$claude_path" "$@"
fi

# Handle --claude-yolo option
if [[ "$1" == "--claude-yolo" ]]; then
    shift
    claude_path="$(find_claude)"
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    # Re-execute vt with claude --dangerously-skip-permissions and remaining arguments
    exec "$0" "$claude_path" --dangerously-skip-permissions "$@"
fi

# Handle --show-session-info option
if [[ "$1" == "--show-session-info" ]]; then
    shift
    exec "$TTY_FWD" --show-session-info "$@"
fi

# Handle --show-session-id option
if [[ "$1" == "--show-session-id" ]]; then
    shift
    exec "$TTY_FWD" --show-session-id "$@"
fi

# Handle --shell or -i option (launch current shell)
if [[ "$1" == "--shell" || "$1" == "-i" ]]; then
    shift
    # Execute current shell through tty-fwd
    exec "$0" "${SHELL:-/bin/bash}" "$@"
fi

# Handle --no-shell-wrap or -S option
NO_SHELL_WRAP=false
if [[ "$1" == "--no-shell-wrap" || "$1" == "-S" ]]; then
    NO_SHELL_WRAP=true
    shift
fi

if [[ $# -eq 0 || "$1" == "--help" || "$1" == "-h" ]]; then
    cat << 'EOF'
vt - VibeTunnel TTY Forward Wrapper

USAGE:
    vt [command] [args...]
    vt --claude [args...]
    vt --claude-yolo [args...]
    vt --shell [args...]
    vt -i [args...]
    vt --no-shell-wrap [command] [args...]
    vt --show-session-info
    vt --show-session-id
    vt -S [command] [args...]
    vt --help

DESCRIPTION:
    This wrapper script allows VibeTunnel to see the output of commands by
    forwarding TTY data through the tty-fwd utility. When you run commands
    through 'vt', VibeTunnel can monitor and display the command's output
    in real-time.

    By default, commands are executed through your shell to resolve aliases,
    functions, and builtins. Use --no-shell-wrap to execute commands directly.

EXAMPLES:
    vt top                  # Watch top with VibeTunnel monitoring
    vt python script.py     # Run Python script with output forwarding
    vt npm test             # Run tests with VibeTunnel visibility
    vt --claude             # Auto-locate and run Claude
    vt --claude --help      # Run Claude with --help option
    vt --claude-yolo        # Run Claude with --dangerously-skip-permissions
    vt --shell              # Launch current shell (equivalent to vt $SHELL)
    vt -i                   # Launch current shell (short form)
    vt -S ls -la            # List files without shell alias resolution

OPTIONS:
    --claude               Auto-locate Claude executable and run it
    --claude-yolo          Auto-locate Claude and run with --dangerously-skip-permissions
    --shell, -i            Launch current shell (equivalent to vt $SHELL)
    --no-shell-wrap, -S    Execute command directly without shell wrapper
    --help, -h             Show this help message and exit
    --show-session-info    Show current session info
    --show-session-id      Show current session ID only

NOTE:
    This script automatically uses the tty-fwd executable bundled with
    VibeTunnel from the Resources folder.
EOF
    exit 0
fi

# Get the real path of this script, resolving any symlinks
SCRIPT_REAL_PATH="$(readlink -f "${BASH_SOURCE[0]}" 2>/dev/null || greadlink -f "${BASH_SOURCE[0]}" 2>/dev/null || realpath "${BASH_SOURCE[0]}" 2>/dev/null)"
if [[ -z "$SCRIPT_REAL_PATH" ]]; then
    # Fallback for systems without readlink -f, greadlink, or realpath
    SCRIPT_REAL_PATH="${BASH_SOURCE[0]}"
    while [[ -L "$SCRIPT_REAL_PATH" ]]; do
        SCRIPT_REAL_PATH="$(readlink "$SCRIPT_REAL_PATH")"
    done
fi

# Function to resolve command through user's shell
resolve_command() {
    local user_shell="${SHELL:-/bin/bash}"
    local cmd="$1"
    shift

    local shell_name=$(basename "$user_shell")

    # Always try through shell first to handle aliases, functions, and builtins
    # The shell will fall back to PATH lookup if no alias/function exists
    case "$shell_name" in
        zsh)
            # For zsh, we need interactive mode to get aliases
            exec "$TTY_FWD" -- "$user_shell" -i -c "$(printf '%q ' "$cmd" "$@")"
            ;;
        bash)
            # For bash, expand aliases in non-interactive mode
            exec "$TTY_FWD" -- "$user_shell" -c "shopt -s expand_aliases; source ~/.bashrc 2>/dev/null || source ~/.bash_profile 2>/dev/null || true; $(printf '%q ' "$cmd" "$@")"
            ;;
        *)
            # Generic shell handling
            exec "$TTY_FWD" -- "$user_shell" -c "$(printf '%q ' "$cmd" "$@")"
            ;;
    esac
}

# Resolve and execute the command
if [[ "$NO_SHELL_WRAP" == "true" ]]; then
    # Execute directly without shell wrapper
    exec "$TTY_FWD" -- "$@"
else
    # Use shell wrapper to resolve aliases/functions/builtins
    resolve_command "$@"
fi
