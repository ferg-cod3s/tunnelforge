var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i6 = decorators.length - 1, decorator; i6 >= 0; i6--)
    if (decorator = decorators[i6])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};

// node_modules/.pnpm/@xterm+headless@5.5.0/node_modules/@xterm/headless/lib-headless/xterm-headless.js
var require_xterm_headless = __commonJS({
  "node_modules/.pnpm/@xterm+headless@5.5.0/node_modules/@xterm/headless/lib-headless/xterm-headless.js"(exports) {
    (() => {
      "use strict";
      var e7 = { 349: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.CircularList = void 0;
        const s6 = i7(460), r8 = i7(844);
        class n8 extends r8.Disposable {
          constructor(e9) {
            super(), this._maxLength = e9, this.onDeleteEmitter = this.register(new s6.EventEmitter()), this.onDelete = this.onDeleteEmitter.event, this.onInsertEmitter = this.register(new s6.EventEmitter()), this.onInsert = this.onInsertEmitter.event, this.onTrimEmitter = this.register(new s6.EventEmitter()), this.onTrim = this.onTrimEmitter.event, this._array = new Array(this._maxLength), this._startIndex = 0, this._length = 0;
          }
          get maxLength() {
            return this._maxLength;
          }
          set maxLength(e9) {
            if (this._maxLength === e9) return;
            const t8 = new Array(e9);
            for (let i8 = 0; i8 < Math.min(e9, this.length); i8++) t8[i8] = this._array[this._getCyclicIndex(i8)];
            this._array = t8, this._maxLength = e9, this._startIndex = 0;
          }
          get length() {
            return this._length;
          }
          set length(e9) {
            if (e9 > this._length) for (let t8 = this._length; t8 < e9; t8++) this._array[t8] = void 0;
            this._length = e9;
          }
          get(e9) {
            return this._array[this._getCyclicIndex(e9)];
          }
          set(e9, t8) {
            this._array[this._getCyclicIndex(e9)] = t8;
          }
          push(e9) {
            this._array[this._getCyclicIndex(this._length)] = e9, this._length === this._maxLength ? (this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1)) : this._length++;
          }
          recycle() {
            if (this._length !== this._maxLength) throw new Error("Can only recycle when the buffer is full");
            return this._startIndex = ++this._startIndex % this._maxLength, this.onTrimEmitter.fire(1), this._array[this._getCyclicIndex(this._length - 1)];
          }
          get isFull() {
            return this._length === this._maxLength;
          }
          pop() {
            return this._array[this._getCyclicIndex(this._length-- - 1)];
          }
          splice(e9, t8, ...i8) {
            if (t8) {
              for (let i9 = e9; i9 < this._length - t8; i9++) this._array[this._getCyclicIndex(i9)] = this._array[this._getCyclicIndex(i9 + t8)];
              this._length -= t8, this.onDeleteEmitter.fire({ index: e9, amount: t8 });
            }
            for (let t9 = this._length - 1; t9 >= e9; t9--) this._array[this._getCyclicIndex(t9 + i8.length)] = this._array[this._getCyclicIndex(t9)];
            for (let t9 = 0; t9 < i8.length; t9++) this._array[this._getCyclicIndex(e9 + t9)] = i8[t9];
            if (i8.length && this.onInsertEmitter.fire({ index: e9, amount: i8.length }), this._length + i8.length > this._maxLength) {
              const e10 = this._length + i8.length - this._maxLength;
              this._startIndex += e10, this._length = this._maxLength, this.onTrimEmitter.fire(e10);
            } else this._length += i8.length;
          }
          trimStart(e9) {
            e9 > this._length && (e9 = this._length), this._startIndex += e9, this._length -= e9, this.onTrimEmitter.fire(e9);
          }
          shiftElements(e9, t8, i8) {
            if (!(t8 <= 0)) {
              if (e9 < 0 || e9 >= this._length) throw new Error("start argument out of range");
              if (e9 + i8 < 0) throw new Error("Cannot shift elements in list beyond index 0");
              if (i8 > 0) {
                for (let s8 = t8 - 1; s8 >= 0; s8--) this.set(e9 + s8 + i8, this.get(e9 + s8));
                const s7 = e9 + t8 + i8 - this._length;
                if (s7 > 0) for (this._length += s7; this._length > this._maxLength; ) this._length--, this._startIndex++, this.onTrimEmitter.fire(1);
              } else for (let s7 = 0; s7 < t8; s7++) this.set(e9 + s7 + i8, this.get(e9 + s7));
            }
          }
          _getCyclicIndex(e9) {
            return (this._startIndex + e9) % this._maxLength;
          }
        }
        t7.CircularList = n8;
      }, 439: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.clone = void 0, t7.clone = function e9(t8, i7 = 5) {
          if ("object" != typeof t8) return t8;
          const s6 = Array.isArray(t8) ? [] : {};
          for (const r8 in t8) s6[r8] = i7 <= 1 ? t8[r8] : t8[r8] && e9(t8[r8], i7 - 1);
          return s6;
        };
      }, 969: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.CoreTerminal = void 0;
        const s6 = i7(844), r8 = i7(585), n8 = i7(348), a3 = i7(866), o8 = i7(744), h5 = i7(302), c5 = i7(83), l3 = i7(460), _2 = i7(753), d3 = i7(480), f5 = i7(994), u3 = i7(282), p3 = i7(435), g2 = i7(981), v2 = i7(660);
        let b3 = false;
        class S3 extends s6.Disposable {
          get onScroll() {
            return this._onScrollApi || (this._onScrollApi = this.register(new l3.EventEmitter()), this._onScroll.event((e9) => {
              this._onScrollApi?.fire(e9.position);
            })), this._onScrollApi.event;
          }
          get cols() {
            return this._bufferService.cols;
          }
          get rows() {
            return this._bufferService.rows;
          }
          get buffers() {
            return this._bufferService.buffers;
          }
          get options() {
            return this.optionsService.options;
          }
          set options(e9) {
            for (const t8 in e9) this.optionsService.options[t8] = e9[t8];
          }
          constructor(e9) {
            super(), this._windowsWrappingHeuristics = this.register(new s6.MutableDisposable()), this._onBinary = this.register(new l3.EventEmitter()), this.onBinary = this._onBinary.event, this._onData = this.register(new l3.EventEmitter()), this.onData = this._onData.event, this._onLineFeed = this.register(new l3.EventEmitter()), this.onLineFeed = this._onLineFeed.event, this._onResize = this.register(new l3.EventEmitter()), this.onResize = this._onResize.event, this._onWriteParsed = this.register(new l3.EventEmitter()), this.onWriteParsed = this._onWriteParsed.event, this._onScroll = this.register(new l3.EventEmitter()), this._instantiationService = new n8.InstantiationService(), this.optionsService = this.register(new h5.OptionsService(e9)), this._instantiationService.setService(r8.IOptionsService, this.optionsService), this._bufferService = this.register(this._instantiationService.createInstance(o8.BufferService)), this._instantiationService.setService(r8.IBufferService, this._bufferService), this._logService = this.register(this._instantiationService.createInstance(a3.LogService)), this._instantiationService.setService(r8.ILogService, this._logService), this.coreService = this.register(this._instantiationService.createInstance(c5.CoreService)), this._instantiationService.setService(r8.ICoreService, this.coreService), this.coreMouseService = this.register(this._instantiationService.createInstance(_2.CoreMouseService)), this._instantiationService.setService(r8.ICoreMouseService, this.coreMouseService), this.unicodeService = this.register(this._instantiationService.createInstance(d3.UnicodeService)), this._instantiationService.setService(r8.IUnicodeService, this.unicodeService), this._charsetService = this._instantiationService.createInstance(f5.CharsetService), this._instantiationService.setService(r8.ICharsetService, this._charsetService), this._oscLinkService = this._instantiationService.createInstance(v2.OscLinkService), this._instantiationService.setService(r8.IOscLinkService, this._oscLinkService), this._inputHandler = this.register(new p3.InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService)), this.register((0, l3.forwardEvent)(this._inputHandler.onLineFeed, this._onLineFeed)), this.register(this._inputHandler), this.register((0, l3.forwardEvent)(this._bufferService.onResize, this._onResize)), this.register((0, l3.forwardEvent)(this.coreService.onData, this._onData)), this.register((0, l3.forwardEvent)(this.coreService.onBinary, this._onBinary)), this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom())), this.register(this.coreService.onUserInput(() => this._writeBuffer.handleUserInput())), this.register(this.optionsService.onMultipleOptionChange(["windowsMode", "windowsPty"], () => this._handleWindowsPtyOptionChange())), this.register(this._bufferService.onScroll((e10) => {
              this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: 0 }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);
            })), this.register(this._inputHandler.onScroll((e10) => {
              this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: 0 }), this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);
            })), this._writeBuffer = this.register(new g2.WriteBuffer((e10, t8) => this._inputHandler.parse(e10, t8))), this.register((0, l3.forwardEvent)(this._writeBuffer.onWriteParsed, this._onWriteParsed));
          }
          write(e9, t8) {
            this._writeBuffer.write(e9, t8);
          }
          writeSync(e9, t8) {
            this._logService.logLevel <= r8.LogLevelEnum.WARN && !b3 && (this._logService.warn("writeSync is unreliable and will be removed soon."), b3 = true), this._writeBuffer.writeSync(e9, t8);
          }
          input(e9, t8 = true) {
            this.coreService.triggerDataEvent(e9, t8);
          }
          resize(e9, t8) {
            isNaN(e9) || isNaN(t8) || (e9 = Math.max(e9, o8.MINIMUM_COLS), t8 = Math.max(t8, o8.MINIMUM_ROWS), this._bufferService.resize(e9, t8));
          }
          scroll(e9, t8 = false) {
            this._bufferService.scroll(e9, t8);
          }
          scrollLines(e9, t8, i8) {
            this._bufferService.scrollLines(e9, t8, i8);
          }
          scrollPages(e9) {
            this.scrollLines(e9 * (this.rows - 1));
          }
          scrollToTop() {
            this.scrollLines(-this._bufferService.buffer.ydisp);
          }
          scrollToBottom() {
            this.scrollLines(this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);
          }
          scrollToLine(e9) {
            const t8 = e9 - this._bufferService.buffer.ydisp;
            0 !== t8 && this.scrollLines(t8);
          }
          registerEscHandler(e9, t8) {
            return this._inputHandler.registerEscHandler(e9, t8);
          }
          registerDcsHandler(e9, t8) {
            return this._inputHandler.registerDcsHandler(e9, t8);
          }
          registerCsiHandler(e9, t8) {
            return this._inputHandler.registerCsiHandler(e9, t8);
          }
          registerOscHandler(e9, t8) {
            return this._inputHandler.registerOscHandler(e9, t8);
          }
          _setup() {
            this._handleWindowsPtyOptionChange();
          }
          reset() {
            this._inputHandler.reset(), this._bufferService.reset(), this._charsetService.reset(), this.coreService.reset(), this.coreMouseService.reset();
          }
          _handleWindowsPtyOptionChange() {
            let e9 = false;
            const t8 = this.optionsService.rawOptions.windowsPty;
            t8 && void 0 !== t8.buildNumber && void 0 !== t8.buildNumber ? e9 = !!("conpty" === t8.backend && t8.buildNumber < 21376) : this.optionsService.rawOptions.windowsMode && (e9 = true), e9 ? this._enableWindowsWrappingHeuristics() : this._windowsWrappingHeuristics.clear();
          }
          _enableWindowsWrappingHeuristics() {
            if (!this._windowsWrappingHeuristics.value) {
              const e9 = [];
              e9.push(this.onLineFeed(u3.updateWindowsModeWrappedState.bind(null, this._bufferService))), e9.push(this.registerCsiHandler({ final: "H" }, () => ((0, u3.updateWindowsModeWrappedState)(this._bufferService), false))), this._windowsWrappingHeuristics.value = (0, s6.toDisposable)(() => {
                for (const t8 of e9) t8.dispose();
              });
            }
          }
        }
        t7.CoreTerminal = S3;
      }, 460: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.runAndSubscribe = t7.forwardEvent = t7.EventEmitter = void 0, t7.EventEmitter = class {
          constructor() {
            this._listeners = [], this._disposed = false;
          }
          get event() {
            return this._event || (this._event = (e9) => {
              this._listeners.push(e9);
              const t8 = { dispose: () => {
                if (!this._disposed) {
                  for (let t9 = 0; t9 < this._listeners.length; t9++) if (this._listeners[t9] === e9) return void this._listeners.splice(t9, 1);
                }
              } };
              return t8;
            }), this._event;
          }
          fire(e9, t8) {
            const i7 = [];
            for (let e10 = 0; e10 < this._listeners.length; e10++) i7.push(this._listeners[e10]);
            for (let s6 = 0; s6 < i7.length; s6++) i7[s6].call(void 0, e9, t8);
          }
          dispose() {
            this.clearListeners(), this._disposed = true;
          }
          clearListeners() {
            this._listeners && (this._listeners.length = 0);
          }
        }, t7.forwardEvent = function(e9, t8) {
          return e9((e10) => t8.fire(e10));
        }, t7.runAndSubscribe = function(e9, t8) {
          return t8(void 0), e9((e10) => t8(e10));
        };
      }, 435: function(e8, t7, i7) {
        var s6 = this && this.__decorate || function(e9, t8, i8, s7) {
          var r9, n9 = arguments.length, a4 = n9 < 3 ? t8 : null === s7 ? s7 = Object.getOwnPropertyDescriptor(t8, i8) : s7;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a4 = Reflect.decorate(e9, t8, i8, s7);
          else for (var o9 = e9.length - 1; o9 >= 0; o9--) (r9 = e9[o9]) && (a4 = (n9 < 3 ? r9(a4) : n9 > 3 ? r9(t8, i8, a4) : r9(t8, i8)) || a4);
          return n9 > 3 && a4 && Object.defineProperty(t8, i8, a4), a4;
        }, r8 = this && this.__param || function(e9, t8) {
          return function(i8, s7) {
            t8(i8, s7, e9);
          };
        };
        Object.defineProperty(t7, "__esModule", { value: true }), t7.InputHandler = t7.WindowsOptionsReportType = void 0;
        const n8 = i7(584), a3 = i7(116), o8 = i7(15), h5 = i7(844), c5 = i7(482), l3 = i7(437), _2 = i7(460), d3 = i7(643), f5 = i7(511), u3 = i7(734), p3 = i7(585), g2 = i7(480), v2 = i7(242), b3 = i7(351), S3 = i7(941), m2 = { "(": 0, ")": 1, "*": 2, "+": 3, "-": 1, ".": 2 }, C2 = 131072;
        function y3(e9, t8) {
          if (e9 > 24) return t8.setWinLines || false;
          switch (e9) {
            case 1:
              return !!t8.restoreWin;
            case 2:
              return !!t8.minimizeWin;
            case 3:
              return !!t8.setWinPosition;
            case 4:
              return !!t8.setWinSizePixels;
            case 5:
              return !!t8.raiseWin;
            case 6:
              return !!t8.lowerWin;
            case 7:
              return !!t8.refreshWin;
            case 8:
              return !!t8.setWinSizeChars;
            case 9:
              return !!t8.maximizeWin;
            case 10:
              return !!t8.fullscreenWin;
            case 11:
              return !!t8.getWinState;
            case 13:
              return !!t8.getWinPosition;
            case 14:
              return !!t8.getWinSizePixels;
            case 15:
              return !!t8.getScreenSizePixels;
            case 16:
              return !!t8.getCellSizePixels;
            case 18:
              return !!t8.getWinSizeChars;
            case 19:
              return !!t8.getScreenSizeChars;
            case 20:
              return !!t8.getIconTitle;
            case 21:
              return !!t8.getWinTitle;
            case 22:
              return !!t8.pushTitle;
            case 23:
              return !!t8.popTitle;
            case 24:
              return !!t8.setWinLines;
          }
          return false;
        }
        var w2;
        !function(e9) {
          e9[e9.GET_WIN_SIZE_PIXELS = 0] = "GET_WIN_SIZE_PIXELS", e9[e9.GET_CELL_SIZE_PIXELS = 1] = "GET_CELL_SIZE_PIXELS";
        }(w2 || (t7.WindowsOptionsReportType = w2 = {}));
        let B2 = 0;
        class E2 extends h5.Disposable {
          getAttrData() {
            return this._curAttrData;
          }
          constructor(e9, t8, i8, s7, r9, h6, d4, u4, p4 = new o8.EscapeSequenceParser()) {
            super(), this._bufferService = e9, this._charsetService = t8, this._coreService = i8, this._logService = s7, this._optionsService = r9, this._oscLinkService = h6, this._coreMouseService = d4, this._unicodeService = u4, this._parser = p4, this._parseBuffer = new Uint32Array(4096), this._stringDecoder = new c5.StringToUtf32(), this._utf8Decoder = new c5.Utf8ToUtf32(), this._workCell = new f5.CellData(), this._windowTitle = "", this._iconName = "", this._windowTitleStack = [], this._iconNameStack = [], this._curAttrData = l3.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l3.DEFAULT_ATTR_DATA.clone(), this._onRequestBell = this.register(new _2.EventEmitter()), this.onRequestBell = this._onRequestBell.event, this._onRequestRefreshRows = this.register(new _2.EventEmitter()), this.onRequestRefreshRows = this._onRequestRefreshRows.event, this._onRequestReset = this.register(new _2.EventEmitter()), this.onRequestReset = this._onRequestReset.event, this._onRequestSendFocus = this.register(new _2.EventEmitter()), this.onRequestSendFocus = this._onRequestSendFocus.event, this._onRequestSyncScrollBar = this.register(new _2.EventEmitter()), this.onRequestSyncScrollBar = this._onRequestSyncScrollBar.event, this._onRequestWindowsOptionsReport = this.register(new _2.EventEmitter()), this.onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event, this._onA11yChar = this.register(new _2.EventEmitter()), this.onA11yChar = this._onA11yChar.event, this._onA11yTab = this.register(new _2.EventEmitter()), this.onA11yTab = this._onA11yTab.event, this._onCursorMove = this.register(new _2.EventEmitter()), this.onCursorMove = this._onCursorMove.event, this._onLineFeed = this.register(new _2.EventEmitter()), this.onLineFeed = this._onLineFeed.event, this._onScroll = this.register(new _2.EventEmitter()), this.onScroll = this._onScroll.event, this._onTitleChange = this.register(new _2.EventEmitter()), this.onTitleChange = this._onTitleChange.event, this._onColor = this.register(new _2.EventEmitter()), this.onColor = this._onColor.event, this._parseStack = { paused: false, cursorStartX: 0, cursorStartY: 0, decodedLength: 0, position: 0 }, this._specialColors = [256, 257, 258], this.register(this._parser), this._dirtyRowTracker = new A2(this._bufferService), this._activeBuffer = this._bufferService.buffer, this.register(this._bufferService.buffers.onBufferActivate((e10) => this._activeBuffer = e10.activeBuffer)), this._parser.setCsiHandlerFallback((e10, t9) => {
              this._logService.debug("Unknown CSI code: ", { identifier: this._parser.identToString(e10), params: t9.toArray() });
            }), this._parser.setEscHandlerFallback((e10) => {
              this._logService.debug("Unknown ESC code: ", { identifier: this._parser.identToString(e10) });
            }), this._parser.setExecuteHandlerFallback((e10) => {
              this._logService.debug("Unknown EXECUTE code: ", { code: e10 });
            }), this._parser.setOscHandlerFallback((e10, t9, i9) => {
              this._logService.debug("Unknown OSC code: ", { identifier: e10, action: t9, data: i9 });
            }), this._parser.setDcsHandlerFallback((e10, t9, i9) => {
              "HOOK" === t9 && (i9 = i9.toArray()), this._logService.debug("Unknown DCS code: ", { identifier: this._parser.identToString(e10), action: t9, payload: i9 });
            }), this._parser.setPrintHandler((e10, t9, i9) => this.print(e10, t9, i9)), this._parser.registerCsiHandler({ final: "@" }, (e10) => this.insertChars(e10)), this._parser.registerCsiHandler({ intermediates: " ", final: "@" }, (e10) => this.scrollLeft(e10)), this._parser.registerCsiHandler({ final: "A" }, (e10) => this.cursorUp(e10)), this._parser.registerCsiHandler({ intermediates: " ", final: "A" }, (e10) => this.scrollRight(e10)), this._parser.registerCsiHandler({ final: "B" }, (e10) => this.cursorDown(e10)), this._parser.registerCsiHandler({ final: "C" }, (e10) => this.cursorForward(e10)), this._parser.registerCsiHandler({ final: "D" }, (e10) => this.cursorBackward(e10)), this._parser.registerCsiHandler({ final: "E" }, (e10) => this.cursorNextLine(e10)), this._parser.registerCsiHandler({ final: "F" }, (e10) => this.cursorPrecedingLine(e10)), this._parser.registerCsiHandler({ final: "G" }, (e10) => this.cursorCharAbsolute(e10)), this._parser.registerCsiHandler({ final: "H" }, (e10) => this.cursorPosition(e10)), this._parser.registerCsiHandler({ final: "I" }, (e10) => this.cursorForwardTab(e10)), this._parser.registerCsiHandler({ final: "J" }, (e10) => this.eraseInDisplay(e10, false)), this._parser.registerCsiHandler({ prefix: "?", final: "J" }, (e10) => this.eraseInDisplay(e10, true)), this._parser.registerCsiHandler({ final: "K" }, (e10) => this.eraseInLine(e10, false)), this._parser.registerCsiHandler({ prefix: "?", final: "K" }, (e10) => this.eraseInLine(e10, true)), this._parser.registerCsiHandler({ final: "L" }, (e10) => this.insertLines(e10)), this._parser.registerCsiHandler({ final: "M" }, (e10) => this.deleteLines(e10)), this._parser.registerCsiHandler({ final: "P" }, (e10) => this.deleteChars(e10)), this._parser.registerCsiHandler({ final: "S" }, (e10) => this.scrollUp(e10)), this._parser.registerCsiHandler({ final: "T" }, (e10) => this.scrollDown(e10)), this._parser.registerCsiHandler({ final: "X" }, (e10) => this.eraseChars(e10)), this._parser.registerCsiHandler({ final: "Z" }, (e10) => this.cursorBackwardTab(e10)), this._parser.registerCsiHandler({ final: "`" }, (e10) => this.charPosAbsolute(e10)), this._parser.registerCsiHandler({ final: "a" }, (e10) => this.hPositionRelative(e10)), this._parser.registerCsiHandler({ final: "b" }, (e10) => this.repeatPrecedingCharacter(e10)), this._parser.registerCsiHandler({ final: "c" }, (e10) => this.sendDeviceAttributesPrimary(e10)), this._parser.registerCsiHandler({ prefix: ">", final: "c" }, (e10) => this.sendDeviceAttributesSecondary(e10)), this._parser.registerCsiHandler({ final: "d" }, (e10) => this.linePosAbsolute(e10)), this._parser.registerCsiHandler({ final: "e" }, (e10) => this.vPositionRelative(e10)), this._parser.registerCsiHandler({ final: "f" }, (e10) => this.hVPosition(e10)), this._parser.registerCsiHandler({ final: "g" }, (e10) => this.tabClear(e10)), this._parser.registerCsiHandler({ final: "h" }, (e10) => this.setMode(e10)), this._parser.registerCsiHandler({ prefix: "?", final: "h" }, (e10) => this.setModePrivate(e10)), this._parser.registerCsiHandler({ final: "l" }, (e10) => this.resetMode(e10)), this._parser.registerCsiHandler({ prefix: "?", final: "l" }, (e10) => this.resetModePrivate(e10)), this._parser.registerCsiHandler({ final: "m" }, (e10) => this.charAttributes(e10)), this._parser.registerCsiHandler({ final: "n" }, (e10) => this.deviceStatus(e10)), this._parser.registerCsiHandler({ prefix: "?", final: "n" }, (e10) => this.deviceStatusPrivate(e10)), this._parser.registerCsiHandler({ intermediates: "!", final: "p" }, (e10) => this.softReset(e10)), this._parser.registerCsiHandler({ intermediates: " ", final: "q" }, (e10) => this.setCursorStyle(e10)), this._parser.registerCsiHandler({ final: "r" }, (e10) => this.setScrollRegion(e10)), this._parser.registerCsiHandler({ final: "s" }, (e10) => this.saveCursor(e10)), this._parser.registerCsiHandler({ final: "t" }, (e10) => this.windowOptions(e10)), this._parser.registerCsiHandler({ final: "u" }, (e10) => this.restoreCursor(e10)), this._parser.registerCsiHandler({ intermediates: "'", final: "}" }, (e10) => this.insertColumns(e10)), this._parser.registerCsiHandler({ intermediates: "'", final: "~" }, (e10) => this.deleteColumns(e10)), this._parser.registerCsiHandler({ intermediates: '"', final: "q" }, (e10) => this.selectProtected(e10)), this._parser.registerCsiHandler({ intermediates: "$", final: "p" }, (e10) => this.requestMode(e10, true)), this._parser.registerCsiHandler({ prefix: "?", intermediates: "$", final: "p" }, (e10) => this.requestMode(e10, false)), this._parser.setExecuteHandler(n8.C0.BEL, () => this.bell()), this._parser.setExecuteHandler(n8.C0.LF, () => this.lineFeed()), this._parser.setExecuteHandler(n8.C0.VT, () => this.lineFeed()), this._parser.setExecuteHandler(n8.C0.FF, () => this.lineFeed()), this._parser.setExecuteHandler(n8.C0.CR, () => this.carriageReturn()), this._parser.setExecuteHandler(n8.C0.BS, () => this.backspace()), this._parser.setExecuteHandler(n8.C0.HT, () => this.tab()), this._parser.setExecuteHandler(n8.C0.SO, () => this.shiftOut()), this._parser.setExecuteHandler(n8.C0.SI, () => this.shiftIn()), this._parser.setExecuteHandler(n8.C1.IND, () => this.index()), this._parser.setExecuteHandler(n8.C1.NEL, () => this.nextLine()), this._parser.setExecuteHandler(n8.C1.HTS, () => this.tabSet()), this._parser.registerOscHandler(0, new v2.OscHandler((e10) => (this.setTitle(e10), this.setIconName(e10), true))), this._parser.registerOscHandler(1, new v2.OscHandler((e10) => this.setIconName(e10))), this._parser.registerOscHandler(2, new v2.OscHandler((e10) => this.setTitle(e10))), this._parser.registerOscHandler(4, new v2.OscHandler((e10) => this.setOrReportIndexedColor(e10))), this._parser.registerOscHandler(8, new v2.OscHandler((e10) => this.setHyperlink(e10))), this._parser.registerOscHandler(10, new v2.OscHandler((e10) => this.setOrReportFgColor(e10))), this._parser.registerOscHandler(11, new v2.OscHandler((e10) => this.setOrReportBgColor(e10))), this._parser.registerOscHandler(12, new v2.OscHandler((e10) => this.setOrReportCursorColor(e10))), this._parser.registerOscHandler(104, new v2.OscHandler((e10) => this.restoreIndexedColor(e10))), this._parser.registerOscHandler(110, new v2.OscHandler((e10) => this.restoreFgColor(e10))), this._parser.registerOscHandler(111, new v2.OscHandler((e10) => this.restoreBgColor(e10))), this._parser.registerOscHandler(112, new v2.OscHandler((e10) => this.restoreCursorColor(e10))), this._parser.registerEscHandler({ final: "7" }, () => this.saveCursor()), this._parser.registerEscHandler({ final: "8" }, () => this.restoreCursor()), this._parser.registerEscHandler({ final: "D" }, () => this.index()), this._parser.registerEscHandler({ final: "E" }, () => this.nextLine()), this._parser.registerEscHandler({ final: "H" }, () => this.tabSet()), this._parser.registerEscHandler({ final: "M" }, () => this.reverseIndex()), this._parser.registerEscHandler({ final: "=" }, () => this.keypadApplicationMode()), this._parser.registerEscHandler({ final: ">" }, () => this.keypadNumericMode()), this._parser.registerEscHandler({ final: "c" }, () => this.fullReset()), this._parser.registerEscHandler({ final: "n" }, () => this.setgLevel(2)), this._parser.registerEscHandler({ final: "o" }, () => this.setgLevel(3)), this._parser.registerEscHandler({ final: "|" }, () => this.setgLevel(3)), this._parser.registerEscHandler({ final: "}" }, () => this.setgLevel(2)), this._parser.registerEscHandler({ final: "~" }, () => this.setgLevel(1)), this._parser.registerEscHandler({ intermediates: "%", final: "@" }, () => this.selectDefaultCharset()), this._parser.registerEscHandler({ intermediates: "%", final: "G" }, () => this.selectDefaultCharset());
            for (const e10 in a3.CHARSETS) this._parser.registerEscHandler({ intermediates: "(", final: e10 }, () => this.selectCharset("(" + e10)), this._parser.registerEscHandler({ intermediates: ")", final: e10 }, () => this.selectCharset(")" + e10)), this._parser.registerEscHandler({ intermediates: "*", final: e10 }, () => this.selectCharset("*" + e10)), this._parser.registerEscHandler({ intermediates: "+", final: e10 }, () => this.selectCharset("+" + e10)), this._parser.registerEscHandler({ intermediates: "-", final: e10 }, () => this.selectCharset("-" + e10)), this._parser.registerEscHandler({ intermediates: ".", final: e10 }, () => this.selectCharset("." + e10)), this._parser.registerEscHandler({ intermediates: "/", final: e10 }, () => this.selectCharset("/" + e10));
            this._parser.registerEscHandler({ intermediates: "#", final: "8" }, () => this.screenAlignmentPattern()), this._parser.setErrorHandler((e10) => (this._logService.error("Parsing error: ", e10), e10)), this._parser.registerDcsHandler({ intermediates: "$", final: "q" }, new b3.DcsHandler((e10, t9) => this.requestStatusString(e10, t9)));
          }
          _preserveStack(e9, t8, i8, s7) {
            this._parseStack.paused = true, this._parseStack.cursorStartX = e9, this._parseStack.cursorStartY = t8, this._parseStack.decodedLength = i8, this._parseStack.position = s7;
          }
          _logSlowResolvingAsync(e9) {
            this._logService.logLevel <= p3.LogLevelEnum.WARN && Promise.race([e9, new Promise((e10, t8) => setTimeout(() => t8("#SLOW_TIMEOUT"), 5e3))]).catch((e10) => {
              if ("#SLOW_TIMEOUT" !== e10) throw e10;
              console.warn("async parser handler taking longer than 5000 ms");
            });
          }
          _getCurrentLinkId() {
            return this._curAttrData.extended.urlId;
          }
          parse(e9, t8) {
            let i8, s7 = this._activeBuffer.x, r9 = this._activeBuffer.y, n9 = 0;
            const a4 = this._parseStack.paused;
            if (a4) {
              if (i8 = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, t8)) return this._logSlowResolvingAsync(i8), i8;
              s7 = this._parseStack.cursorStartX, r9 = this._parseStack.cursorStartY, this._parseStack.paused = false, e9.length > C2 && (n9 = this._parseStack.position + C2);
            }
            if (this._logService.logLevel <= p3.LogLevelEnum.DEBUG && this._logService.debug("parsing data" + ("string" == typeof e9 ? ` "${e9}"` : ` "${Array.prototype.map.call(e9, (e10) => String.fromCharCode(e10)).join("")}"`), "string" == typeof e9 ? e9.split("").map((e10) => e10.charCodeAt(0)) : e9), this._parseBuffer.length < e9.length && this._parseBuffer.length < C2 && (this._parseBuffer = new Uint32Array(Math.min(e9.length, C2))), a4 || this._dirtyRowTracker.clearRange(), e9.length > C2) for (let t9 = n9; t9 < e9.length; t9 += C2) {
              const n10 = t9 + C2 < e9.length ? t9 + C2 : e9.length, a5 = "string" == typeof e9 ? this._stringDecoder.decode(e9.substring(t9, n10), this._parseBuffer) : this._utf8Decoder.decode(e9.subarray(t9, n10), this._parseBuffer);
              if (i8 = this._parser.parse(this._parseBuffer, a5)) return this._preserveStack(s7, r9, a5, t9), this._logSlowResolvingAsync(i8), i8;
            }
            else if (!a4) {
              const t9 = "string" == typeof e9 ? this._stringDecoder.decode(e9, this._parseBuffer) : this._utf8Decoder.decode(e9, this._parseBuffer);
              if (i8 = this._parser.parse(this._parseBuffer, t9)) return this._preserveStack(s7, r9, t9, 0), this._logSlowResolvingAsync(i8), i8;
            }
            this._activeBuffer.x === s7 && this._activeBuffer.y === r9 || this._onCursorMove.fire();
            const o9 = this._dirtyRowTracker.end + (this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp), h6 = this._dirtyRowTracker.start + (this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);
            h6 < this._bufferService.rows && this._onRequestRefreshRows.fire(Math.min(h6, this._bufferService.rows - 1), Math.min(o9, this._bufferService.rows - 1));
          }
          print(e9, t8, i8) {
            let s7, r9;
            const n9 = this._charsetService.charset, a4 = this._optionsService.rawOptions.screenReaderMode, o9 = this._bufferService.cols, h6 = this._coreService.decPrivateModes.wraparound, _3 = this._coreService.modes.insertMode, f6 = this._curAttrData;
            let u4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
            this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._activeBuffer.x && i8 - t8 > 0 && 2 === u4.getWidth(this._activeBuffer.x - 1) && u4.setCellFromCodepoint(this._activeBuffer.x - 1, 0, 1, f6);
            let p4 = this._parser.precedingJoinState;
            for (let v3 = t8; v3 < i8; ++v3) {
              if (s7 = e9[v3], s7 < 127 && n9) {
                const e10 = n9[String.fromCharCode(s7)];
                e10 && (s7 = e10.charCodeAt(0));
              }
              const t9 = this._unicodeService.charProperties(s7, p4);
              r9 = g2.UnicodeService.extractWidth(t9);
              const i9 = g2.UnicodeService.extractShouldJoin(t9), b4 = i9 ? g2.UnicodeService.extractWidth(p4) : 0;
              if (p4 = t9, a4 && this._onA11yChar.fire((0, c5.stringFromCodePoint)(s7)), this._getCurrentLinkId() && this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y), this._activeBuffer.x + r9 - b4 > o9) {
                if (h6) {
                  const e10 = u4;
                  let t10 = this._activeBuffer.x - b4;
                  for (this._activeBuffer.x = b4, this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData(), true)) : (this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = true), u4 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y), b4 > 0 && u4 instanceof l3.BufferLine && u4.copyCellsFrom(e10, t10, 0, b4, false); t10 < o9; ) e10.setCellFromCodepoint(t10++, 0, 1, f6);
                } else if (this._activeBuffer.x = o9 - 1, 2 === r9) continue;
              }
              if (i9 && this._activeBuffer.x) {
                const e10 = u4.getWidth(this._activeBuffer.x - 1) ? 1 : 2;
                u4.addCodepointToCell(this._activeBuffer.x - e10, s7, r9);
                for (let e11 = r9 - b4; --e11 >= 0; ) u4.setCellFromCodepoint(this._activeBuffer.x++, 0, 0, f6);
              } else if (_3 && (u4.insertCells(this._activeBuffer.x, r9 - b4, this._activeBuffer.getNullCell(f6)), 2 === u4.getWidth(o9 - 1) && u4.setCellFromCodepoint(o9 - 1, d3.NULL_CELL_CODE, d3.NULL_CELL_WIDTH, f6)), u4.setCellFromCodepoint(this._activeBuffer.x++, s7, r9, f6), r9 > 0) for (; --r9; ) u4.setCellFromCodepoint(this._activeBuffer.x++, 0, 0, f6);
            }
            this._parser.precedingJoinState = p4, this._activeBuffer.x < o9 && i8 - t8 > 0 && 0 === u4.getWidth(this._activeBuffer.x) && !u4.hasContent(this._activeBuffer.x) && u4.setCellFromCodepoint(this._activeBuffer.x, 0, 1, f6), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
          }
          registerCsiHandler(e9, t8) {
            return "t" !== e9.final || e9.prefix || e9.intermediates ? this._parser.registerCsiHandler(e9, t8) : this._parser.registerCsiHandler(e9, (e10) => !y3(e10.params[0], this._optionsService.rawOptions.windowOptions) || t8(e10));
          }
          registerDcsHandler(e9, t8) {
            return this._parser.registerDcsHandler(e9, new b3.DcsHandler(t8));
          }
          registerEscHandler(e9, t8) {
            return this._parser.registerEscHandler(e9, t8);
          }
          registerOscHandler(e9, t8) {
            return this._parser.registerOscHandler(e9, new v2.OscHandler(t8));
          }
          bell() {
            return this._onRequestBell.fire(), true;
          }
          lineFeed() {
            return this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._optionsService.rawOptions.convertEol && (this._activeBuffer.x = 0), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows ? this._activeBuffer.y = this._bufferService.rows - 1 : this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = false, this._activeBuffer.x >= this._bufferService.cols && this._activeBuffer.x--, this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._onLineFeed.fire(), true;
          }
          carriageReturn() {
            return this._activeBuffer.x = 0, true;
          }
          backspace() {
            if (!this._coreService.decPrivateModes.reverseWraparound) return this._restrictCursor(), this._activeBuffer.x > 0 && this._activeBuffer.x--, true;
            if (this._restrictCursor(this._bufferService.cols), this._activeBuffer.x > 0) this._activeBuffer.x--;
            else if (0 === this._activeBuffer.x && this._activeBuffer.y > this._activeBuffer.scrollTop && this._activeBuffer.y <= this._activeBuffer.scrollBottom && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {
              this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).isWrapped = false, this._activeBuffer.y--, this._activeBuffer.x = this._bufferService.cols - 1;
              const e9 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
              e9.hasWidth(this._activeBuffer.x) && !e9.hasContent(this._activeBuffer.x) && this._activeBuffer.x--;
            }
            return this._restrictCursor(), true;
          }
          tab() {
            if (this._activeBuffer.x >= this._bufferService.cols) return true;
            const e9 = this._activeBuffer.x;
            return this._activeBuffer.x = this._activeBuffer.nextStop(), this._optionsService.rawOptions.screenReaderMode && this._onA11yTab.fire(this._activeBuffer.x - e9), true;
          }
          shiftOut() {
            return this._charsetService.setgLevel(1), true;
          }
          shiftIn() {
            return this._charsetService.setgLevel(0), true;
          }
          _restrictCursor(e9 = this._bufferService.cols - 1) {
            this._activeBuffer.x = Math.min(e9, Math.max(0, this._activeBuffer.x)), this._activeBuffer.y = this._coreService.decPrivateModes.origin ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y)) : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y)), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
          }
          _setCursor(e9, t8) {
            this._dirtyRowTracker.markDirty(this._activeBuffer.y), this._coreService.decPrivateModes.origin ? (this._activeBuffer.x = e9, this._activeBuffer.y = this._activeBuffer.scrollTop + t8) : (this._activeBuffer.x = e9, this._activeBuffer.y = t8), this._restrictCursor(), this._dirtyRowTracker.markDirty(this._activeBuffer.y);
          }
          _moveCursor(e9, t8) {
            this._restrictCursor(), this._setCursor(this._activeBuffer.x + e9, this._activeBuffer.y + t8);
          }
          cursorUp(e9) {
            const t8 = this._activeBuffer.y - this._activeBuffer.scrollTop;
            return t8 >= 0 ? this._moveCursor(0, -Math.min(t8, e9.params[0] || 1)) : this._moveCursor(0, -(e9.params[0] || 1)), true;
          }
          cursorDown(e9) {
            const t8 = this._activeBuffer.scrollBottom - this._activeBuffer.y;
            return t8 >= 0 ? this._moveCursor(0, Math.min(t8, e9.params[0] || 1)) : this._moveCursor(0, e9.params[0] || 1), true;
          }
          cursorForward(e9) {
            return this._moveCursor(e9.params[0] || 1, 0), true;
          }
          cursorBackward(e9) {
            return this._moveCursor(-(e9.params[0] || 1), 0), true;
          }
          cursorNextLine(e9) {
            return this.cursorDown(e9), this._activeBuffer.x = 0, true;
          }
          cursorPrecedingLine(e9) {
            return this.cursorUp(e9), this._activeBuffer.x = 0, true;
          }
          cursorCharAbsolute(e9) {
            return this._setCursor((e9.params[0] || 1) - 1, this._activeBuffer.y), true;
          }
          cursorPosition(e9) {
            return this._setCursor(e9.length >= 2 ? (e9.params[1] || 1) - 1 : 0, (e9.params[0] || 1) - 1), true;
          }
          charPosAbsolute(e9) {
            return this._setCursor((e9.params[0] || 1) - 1, this._activeBuffer.y), true;
          }
          hPositionRelative(e9) {
            return this._moveCursor(e9.params[0] || 1, 0), true;
          }
          linePosAbsolute(e9) {
            return this._setCursor(this._activeBuffer.x, (e9.params[0] || 1) - 1), true;
          }
          vPositionRelative(e9) {
            return this._moveCursor(0, e9.params[0] || 1), true;
          }
          hVPosition(e9) {
            return this.cursorPosition(e9), true;
          }
          tabClear(e9) {
            const t8 = e9.params[0];
            return 0 === t8 ? delete this._activeBuffer.tabs[this._activeBuffer.x] : 3 === t8 && (this._activeBuffer.tabs = {}), true;
          }
          cursorForwardTab(e9) {
            if (this._activeBuffer.x >= this._bufferService.cols) return true;
            let t8 = e9.params[0] || 1;
            for (; t8--; ) this._activeBuffer.x = this._activeBuffer.nextStop();
            return true;
          }
          cursorBackwardTab(e9) {
            if (this._activeBuffer.x >= this._bufferService.cols) return true;
            let t8 = e9.params[0] || 1;
            for (; t8--; ) this._activeBuffer.x = this._activeBuffer.prevStop();
            return true;
          }
          selectProtected(e9) {
            const t8 = e9.params[0];
            return 1 === t8 && (this._curAttrData.bg |= 536870912), 2 !== t8 && 0 !== t8 || (this._curAttrData.bg &= -536870913), true;
          }
          _eraseInBufferLine(e9, t8, i8, s7 = false, r9 = false) {
            const n9 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e9);
            n9.replaceCells(t8, i8, this._activeBuffer.getNullCell(this._eraseAttrData()), r9), s7 && (n9.isWrapped = false);
          }
          _resetBufferLine(e9, t8 = false) {
            const i8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e9);
            i8 && (i8.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), t8), this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + e9), i8.isWrapped = false);
          }
          eraseInDisplay(e9, t8 = false) {
            let i8;
            switch (this._restrictCursor(this._bufferService.cols), e9.params[0]) {
              case 0:
                for (i8 = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i8), this._eraseInBufferLine(i8++, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t8); i8 < this._bufferService.rows; i8++) this._resetBufferLine(i8, t8);
                this._dirtyRowTracker.markDirty(i8);
                break;
              case 1:
                for (i8 = this._activeBuffer.y, this._dirtyRowTracker.markDirty(i8), this._eraseInBufferLine(i8, 0, this._activeBuffer.x + 1, true, t8), this._activeBuffer.x + 1 >= this._bufferService.cols && (this._activeBuffer.lines.get(i8 + 1).isWrapped = false); i8--; ) this._resetBufferLine(i8, t8);
                this._dirtyRowTracker.markDirty(0);
                break;
              case 2:
                for (i8 = this._bufferService.rows, this._dirtyRowTracker.markDirty(i8 - 1); i8--; ) this._resetBufferLine(i8, t8);
                this._dirtyRowTracker.markDirty(0);
                break;
              case 3:
                const e10 = this._activeBuffer.lines.length - this._bufferService.rows;
                e10 > 0 && (this._activeBuffer.lines.trimStart(e10), this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - e10, 0), this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - e10, 0), this._onScroll.fire(0));
            }
            return true;
          }
          eraseInLine(e9, t8 = false) {
            switch (this._restrictCursor(this._bufferService.cols), e9.params[0]) {
              case 0:
                this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, 0 === this._activeBuffer.x, t8);
                break;
              case 1:
                this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, t8);
                break;
              case 2:
                this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, t8);
            }
            return this._dirtyRowTracker.markDirty(this._activeBuffer.y), true;
          }
          insertLines(e9) {
            this._restrictCursor();
            let t8 = e9.params[0] || 1;
            if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
            const i8 = this._activeBuffer.ybase + this._activeBuffer.y, s7 = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, r9 = this._bufferService.rows - 1 + this._activeBuffer.ybase - s7 + 1;
            for (; t8--; ) this._activeBuffer.lines.splice(r9 - 1, 1), this._activeBuffer.lines.splice(i8, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, true;
          }
          deleteLines(e9) {
            this._restrictCursor();
            let t8 = e9.params[0] || 1;
            if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
            const i8 = this._activeBuffer.ybase + this._activeBuffer.y;
            let s7;
            for (s7 = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom, s7 = this._bufferService.rows - 1 + this._activeBuffer.ybase - s7; t8--; ) this._activeBuffer.lines.splice(i8, 1), this._activeBuffer.lines.splice(s7, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom), this._activeBuffer.x = 0, true;
          }
          insertChars(e9) {
            this._restrictCursor();
            const t8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
            return t8 && (t8.insertCells(this._activeBuffer.x, e9.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData())), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), true;
          }
          deleteChars(e9) {
            this._restrictCursor();
            const t8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
            return t8 && (t8.deleteCells(this._activeBuffer.x, e9.params[0] || 1, this._activeBuffer.getNullCell(this._eraseAttrData())), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), true;
          }
          scrollUp(e9) {
            let t8 = e9.params[0] || 1;
            for (; t8--; ) this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
          }
          scrollDown(e9) {
            let t8 = e9.params[0] || 1;
            for (; t8--; ) this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1), this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(l3.DEFAULT_ATTR_DATA));
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
          }
          scrollLeft(e9) {
            if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
            const t8 = e9.params[0] || 1;
            for (let e10 = this._activeBuffer.scrollTop; e10 <= this._activeBuffer.scrollBottom; ++e10) {
              const i8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e10);
              i8.deleteCells(0, t8, this._activeBuffer.getNullCell(this._eraseAttrData())), i8.isWrapped = false;
            }
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
          }
          scrollRight(e9) {
            if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
            const t8 = e9.params[0] || 1;
            for (let e10 = this._activeBuffer.scrollTop; e10 <= this._activeBuffer.scrollBottom; ++e10) {
              const i8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e10);
              i8.insertCells(0, t8, this._activeBuffer.getNullCell(this._eraseAttrData())), i8.isWrapped = false;
            }
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
          }
          insertColumns(e9) {
            if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
            const t8 = e9.params[0] || 1;
            for (let e10 = this._activeBuffer.scrollTop; e10 <= this._activeBuffer.scrollBottom; ++e10) {
              const i8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e10);
              i8.insertCells(this._activeBuffer.x, t8, this._activeBuffer.getNullCell(this._eraseAttrData())), i8.isWrapped = false;
            }
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
          }
          deleteColumns(e9) {
            if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) return true;
            const t8 = e9.params[0] || 1;
            for (let e10 = this._activeBuffer.scrollTop; e10 <= this._activeBuffer.scrollBottom; ++e10) {
              const i8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + e10);
              i8.deleteCells(this._activeBuffer.x, t8, this._activeBuffer.getNullCell(this._eraseAttrData())), i8.isWrapped = false;
            }
            return this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom), true;
          }
          eraseChars(e9) {
            this._restrictCursor();
            const t8 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);
            return t8 && (t8.replaceCells(this._activeBuffer.x, this._activeBuffer.x + (e9.params[0] || 1), this._activeBuffer.getNullCell(this._eraseAttrData())), this._dirtyRowTracker.markDirty(this._activeBuffer.y)), true;
          }
          repeatPrecedingCharacter(e9) {
            const t8 = this._parser.precedingJoinState;
            if (!t8) return true;
            const i8 = e9.params[0] || 1, s7 = g2.UnicodeService.extractWidth(t8), r9 = this._activeBuffer.x - s7, n9 = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y).getString(r9), a4 = new Uint32Array(n9.length * i8);
            let o9 = 0;
            for (let e10 = 0; e10 < n9.length; ) {
              const t9 = n9.codePointAt(e10) || 0;
              a4[o9++] = t9, e10 += t9 > 65535 ? 2 : 1;
            }
            let h6 = o9;
            for (let e10 = 1; e10 < i8; ++e10) a4.copyWithin(h6, 0, o9), h6 += o9;
            return this.print(a4, 0, h6), true;
          }
          sendDeviceAttributesPrimary(e9) {
            return e9.params[0] > 0 || (this._is("xterm") || this._is("rxvt-unicode") || this._is("screen") ? this._coreService.triggerDataEvent(n8.C0.ESC + "[?1;2c") : this._is("linux") && this._coreService.triggerDataEvent(n8.C0.ESC + "[?6c")), true;
          }
          sendDeviceAttributesSecondary(e9) {
            return e9.params[0] > 0 || (this._is("xterm") ? this._coreService.triggerDataEvent(n8.C0.ESC + "[>0;276;0c") : this._is("rxvt-unicode") ? this._coreService.triggerDataEvent(n8.C0.ESC + "[>85;95;0c") : this._is("linux") ? this._coreService.triggerDataEvent(e9.params[0] + "c") : this._is("screen") && this._coreService.triggerDataEvent(n8.C0.ESC + "[>83;40003;0c")), true;
          }
          _is(e9) {
            return 0 === (this._optionsService.rawOptions.termName + "").indexOf(e9);
          }
          setMode(e9) {
            for (let t8 = 0; t8 < e9.length; t8++) switch (e9.params[t8]) {
              case 4:
                this._coreService.modes.insertMode = true;
                break;
              case 20:
                this._optionsService.options.convertEol = true;
            }
            return true;
          }
          setModePrivate(e9) {
            for (let t8 = 0; t8 < e9.length; t8++) switch (e9.params[t8]) {
              case 1:
                this._coreService.decPrivateModes.applicationCursorKeys = true;
                break;
              case 2:
                this._charsetService.setgCharset(0, a3.DEFAULT_CHARSET), this._charsetService.setgCharset(1, a3.DEFAULT_CHARSET), this._charsetService.setgCharset(2, a3.DEFAULT_CHARSET), this._charsetService.setgCharset(3, a3.DEFAULT_CHARSET);
                break;
              case 3:
                this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(132, this._bufferService.rows), this._onRequestReset.fire());
                break;
              case 6:
                this._coreService.decPrivateModes.origin = true, this._setCursor(0, 0);
                break;
              case 7:
                this._coreService.decPrivateModes.wraparound = true;
                break;
              case 12:
                this._optionsService.options.cursorBlink = true;
                break;
              case 45:
                this._coreService.decPrivateModes.reverseWraparound = true;
                break;
              case 66:
                this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, this._onRequestSyncScrollBar.fire();
                break;
              case 9:
                this._coreMouseService.activeProtocol = "X10";
                break;
              case 1e3:
                this._coreMouseService.activeProtocol = "VT200";
                break;
              case 1002:
                this._coreMouseService.activeProtocol = "DRAG";
                break;
              case 1003:
                this._coreMouseService.activeProtocol = "ANY";
                break;
              case 1004:
                this._coreService.decPrivateModes.sendFocus = true, this._onRequestSendFocus.fire();
                break;
              case 1005:
                this._logService.debug("DECSET 1005 not supported (see #2507)");
                break;
              case 1006:
                this._coreMouseService.activeEncoding = "SGR";
                break;
              case 1015:
                this._logService.debug("DECSET 1015 not supported (see #2507)");
                break;
              case 1016:
                this._coreMouseService.activeEncoding = "SGR_PIXELS";
                break;
              case 25:
                this._coreService.isCursorHidden = false;
                break;
              case 1048:
                this.saveCursor();
                break;
              case 1049:
                this.saveCursor();
              case 47:
              case 1047:
                this._bufferService.buffers.activateAltBuffer(this._eraseAttrData()), this._coreService.isCursorInitialized = true, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                break;
              case 2004:
                this._coreService.decPrivateModes.bracketedPasteMode = true;
            }
            return true;
          }
          resetMode(e9) {
            for (let t8 = 0; t8 < e9.length; t8++) switch (e9.params[t8]) {
              case 4:
                this._coreService.modes.insertMode = false;
                break;
              case 20:
                this._optionsService.options.convertEol = false;
            }
            return true;
          }
          resetModePrivate(e9) {
            for (let t8 = 0; t8 < e9.length; t8++) switch (e9.params[t8]) {
              case 1:
                this._coreService.decPrivateModes.applicationCursorKeys = false;
                break;
              case 3:
                this._optionsService.rawOptions.windowOptions.setWinLines && (this._bufferService.resize(80, this._bufferService.rows), this._onRequestReset.fire());
                break;
              case 6:
                this._coreService.decPrivateModes.origin = false, this._setCursor(0, 0);
                break;
              case 7:
                this._coreService.decPrivateModes.wraparound = false;
                break;
              case 12:
                this._optionsService.options.cursorBlink = false;
                break;
              case 45:
                this._coreService.decPrivateModes.reverseWraparound = false;
                break;
              case 66:
                this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, this._onRequestSyncScrollBar.fire();
                break;
              case 9:
              case 1e3:
              case 1002:
              case 1003:
                this._coreMouseService.activeProtocol = "NONE";
                break;
              case 1004:
                this._coreService.decPrivateModes.sendFocus = false;
                break;
              case 1005:
                this._logService.debug("DECRST 1005 not supported (see #2507)");
                break;
              case 1006:
              case 1016:
                this._coreMouseService.activeEncoding = "DEFAULT";
                break;
              case 1015:
                this._logService.debug("DECRST 1015 not supported (see #2507)");
                break;
              case 25:
                this._coreService.isCursorHidden = true;
                break;
              case 1048:
                this.restoreCursor();
                break;
              case 1049:
              case 47:
              case 1047:
                this._bufferService.buffers.activateNormalBuffer(), 1049 === e9.params[t8] && this.restoreCursor(), this._coreService.isCursorInitialized = true, this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1), this._onRequestSyncScrollBar.fire();
                break;
              case 2004:
                this._coreService.decPrivateModes.bracketedPasteMode = false;
            }
            return true;
          }
          requestMode(e9, t8) {
            const i8 = this._coreService.decPrivateModes, { activeProtocol: s7, activeEncoding: r9 } = this._coreMouseService, a4 = this._coreService, { buffers: o9, cols: h6 } = this._bufferService, { active: c6, alt: l4 } = o9, _3 = this._optionsService.rawOptions, d4 = (e10) => e10 ? 1 : 2, f6 = e9.params[0];
            return u4 = f6, p4 = t8 ? 2 === f6 ? 4 : 4 === f6 ? d4(a4.modes.insertMode) : 12 === f6 ? 3 : 20 === f6 ? d4(_3.convertEol) : 0 : 1 === f6 ? d4(i8.applicationCursorKeys) : 3 === f6 ? _3.windowOptions.setWinLines ? 80 === h6 ? 2 : 132 === h6 ? 1 : 0 : 0 : 6 === f6 ? d4(i8.origin) : 7 === f6 ? d4(i8.wraparound) : 8 === f6 ? 3 : 9 === f6 ? d4("X10" === s7) : 12 === f6 ? d4(_3.cursorBlink) : 25 === f6 ? d4(!a4.isCursorHidden) : 45 === f6 ? d4(i8.reverseWraparound) : 66 === f6 ? d4(i8.applicationKeypad) : 67 === f6 ? 4 : 1e3 === f6 ? d4("VT200" === s7) : 1002 === f6 ? d4("DRAG" === s7) : 1003 === f6 ? d4("ANY" === s7) : 1004 === f6 ? d4(i8.sendFocus) : 1005 === f6 ? 4 : 1006 === f6 ? d4("SGR" === r9) : 1015 === f6 ? 4 : 1016 === f6 ? d4("SGR_PIXELS" === r9) : 1048 === f6 ? 1 : 47 === f6 || 1047 === f6 || 1049 === f6 ? d4(c6 === l4) : 2004 === f6 ? d4(i8.bracketedPasteMode) : 0, a4.triggerDataEvent(`${n8.C0.ESC}[${t8 ? "" : "?"}${u4};${p4}$y`), true;
            var u4, p4;
          }
          _updateAttrColor(e9, t8, i8, s7, r9) {
            return 2 === t8 ? (e9 |= 50331648, e9 &= -16777216, e9 |= u3.AttributeData.fromColorRGB([i8, s7, r9])) : 5 === t8 && (e9 &= -50331904, e9 |= 33554432 | 255 & i8), e9;
          }
          _extractColor(e9, t8, i8) {
            const s7 = [0, 0, -1, 0, 0, 0];
            let r9 = 0, n9 = 0;
            do {
              if (s7[n9 + r9] = e9.params[t8 + n9], e9.hasSubParams(t8 + n9)) {
                const i9 = e9.getSubParams(t8 + n9);
                let a4 = 0;
                do {
                  5 === s7[1] && (r9 = 1), s7[n9 + a4 + 1 + r9] = i9[a4];
                } while (++a4 < i9.length && a4 + n9 + 1 + r9 < s7.length);
                break;
              }
              if (5 === s7[1] && n9 + r9 >= 2 || 2 === s7[1] && n9 + r9 >= 5) break;
              s7[1] && (r9 = 1);
            } while (++n9 + t8 < e9.length && n9 + r9 < s7.length);
            for (let e10 = 2; e10 < s7.length; ++e10) -1 === s7[e10] && (s7[e10] = 0);
            switch (s7[0]) {
              case 38:
                i8.fg = this._updateAttrColor(i8.fg, s7[1], s7[3], s7[4], s7[5]);
                break;
              case 48:
                i8.bg = this._updateAttrColor(i8.bg, s7[1], s7[3], s7[4], s7[5]);
                break;
              case 58:
                i8.extended = i8.extended.clone(), i8.extended.underlineColor = this._updateAttrColor(i8.extended.underlineColor, s7[1], s7[3], s7[4], s7[5]);
            }
            return n9;
          }
          _processUnderline(e9, t8) {
            t8.extended = t8.extended.clone(), (!~e9 || e9 > 5) && (e9 = 1), t8.extended.underlineStyle = e9, t8.fg |= 268435456, 0 === e9 && (t8.fg &= -268435457), t8.updateExtended();
          }
          _processSGR0(e9) {
            e9.fg = l3.DEFAULT_ATTR_DATA.fg, e9.bg = l3.DEFAULT_ATTR_DATA.bg, e9.extended = e9.extended.clone(), e9.extended.underlineStyle = 0, e9.extended.underlineColor &= -67108864, e9.updateExtended();
          }
          charAttributes(e9) {
            if (1 === e9.length && 0 === e9.params[0]) return this._processSGR0(this._curAttrData), true;
            const t8 = e9.length;
            let i8;
            const s7 = this._curAttrData;
            for (let r9 = 0; r9 < t8; r9++) i8 = e9.params[r9], i8 >= 30 && i8 <= 37 ? (s7.fg &= -50331904, s7.fg |= 16777216 | i8 - 30) : i8 >= 40 && i8 <= 47 ? (s7.bg &= -50331904, s7.bg |= 16777216 | i8 - 40) : i8 >= 90 && i8 <= 97 ? (s7.fg &= -50331904, s7.fg |= 16777224 | i8 - 90) : i8 >= 100 && i8 <= 107 ? (s7.bg &= -50331904, s7.bg |= 16777224 | i8 - 100) : 0 === i8 ? this._processSGR0(s7) : 1 === i8 ? s7.fg |= 134217728 : 3 === i8 ? s7.bg |= 67108864 : 4 === i8 ? (s7.fg |= 268435456, this._processUnderline(e9.hasSubParams(r9) ? e9.getSubParams(r9)[0] : 1, s7)) : 5 === i8 ? s7.fg |= 536870912 : 7 === i8 ? s7.fg |= 67108864 : 8 === i8 ? s7.fg |= 1073741824 : 9 === i8 ? s7.fg |= 2147483648 : 2 === i8 ? s7.bg |= 134217728 : 21 === i8 ? this._processUnderline(2, s7) : 22 === i8 ? (s7.fg &= -134217729, s7.bg &= -134217729) : 23 === i8 ? s7.bg &= -67108865 : 24 === i8 ? (s7.fg &= -268435457, this._processUnderline(0, s7)) : 25 === i8 ? s7.fg &= -536870913 : 27 === i8 ? s7.fg &= -67108865 : 28 === i8 ? s7.fg &= -1073741825 : 29 === i8 ? s7.fg &= 2147483647 : 39 === i8 ? (s7.fg &= -67108864, s7.fg |= 16777215 & l3.DEFAULT_ATTR_DATA.fg) : 49 === i8 ? (s7.bg &= -67108864, s7.bg |= 16777215 & l3.DEFAULT_ATTR_DATA.bg) : 38 === i8 || 48 === i8 || 58 === i8 ? r9 += this._extractColor(e9, r9, s7) : 53 === i8 ? s7.bg |= 1073741824 : 55 === i8 ? s7.bg &= -1073741825 : 59 === i8 ? (s7.extended = s7.extended.clone(), s7.extended.underlineColor = -1, s7.updateExtended()) : 100 === i8 ? (s7.fg &= -67108864, s7.fg |= 16777215 & l3.DEFAULT_ATTR_DATA.fg, s7.bg &= -67108864, s7.bg |= 16777215 & l3.DEFAULT_ATTR_DATA.bg) : this._logService.debug("Unknown SGR attribute: %d.", i8);
            return true;
          }
          deviceStatus(e9) {
            switch (e9.params[0]) {
              case 5:
                this._coreService.triggerDataEvent(`${n8.C0.ESC}[0n`);
                break;
              case 6:
                const e10 = this._activeBuffer.y + 1, t8 = this._activeBuffer.x + 1;
                this._coreService.triggerDataEvent(`${n8.C0.ESC}[${e10};${t8}R`);
            }
            return true;
          }
          deviceStatusPrivate(e9) {
            if (6 === e9.params[0]) {
              const e10 = this._activeBuffer.y + 1, t8 = this._activeBuffer.x + 1;
              this._coreService.triggerDataEvent(`${n8.C0.ESC}[?${e10};${t8}R`);
            }
            return true;
          }
          softReset(e9) {
            return this._coreService.isCursorHidden = false, this._onRequestSyncScrollBar.fire(), this._activeBuffer.scrollTop = 0, this._activeBuffer.scrollBottom = this._bufferService.rows - 1, this._curAttrData = l3.DEFAULT_ATTR_DATA.clone(), this._coreService.reset(), this._charsetService.reset(), this._activeBuffer.savedX = 0, this._activeBuffer.savedY = this._activeBuffer.ybase, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, this._coreService.decPrivateModes.origin = false, true;
          }
          setCursorStyle(e9) {
            const t8 = e9.params[0] || 1;
            switch (t8) {
              case 1:
              case 2:
                this._optionsService.options.cursorStyle = "block";
                break;
              case 3:
              case 4:
                this._optionsService.options.cursorStyle = "underline";
                break;
              case 5:
              case 6:
                this._optionsService.options.cursorStyle = "bar";
            }
            const i8 = t8 % 2 == 1;
            return this._optionsService.options.cursorBlink = i8, true;
          }
          setScrollRegion(e9) {
            const t8 = e9.params[0] || 1;
            let i8;
            return (e9.length < 2 || (i8 = e9.params[1]) > this._bufferService.rows || 0 === i8) && (i8 = this._bufferService.rows), i8 > t8 && (this._activeBuffer.scrollTop = t8 - 1, this._activeBuffer.scrollBottom = i8 - 1, this._setCursor(0, 0)), true;
          }
          windowOptions(e9) {
            if (!y3(e9.params[0], this._optionsService.rawOptions.windowOptions)) return true;
            const t8 = e9.length > 1 ? e9.params[1] : 0;
            switch (e9.params[0]) {
              case 14:
                2 !== t8 && this._onRequestWindowsOptionsReport.fire(w2.GET_WIN_SIZE_PIXELS);
                break;
              case 16:
                this._onRequestWindowsOptionsReport.fire(w2.GET_CELL_SIZE_PIXELS);
                break;
              case 18:
                this._bufferService && this._coreService.triggerDataEvent(`${n8.C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);
                break;
              case 22:
                0 !== t8 && 2 !== t8 || (this._windowTitleStack.push(this._windowTitle), this._windowTitleStack.length > 10 && this._windowTitleStack.shift()), 0 !== t8 && 1 !== t8 || (this._iconNameStack.push(this._iconName), this._iconNameStack.length > 10 && this._iconNameStack.shift());
                break;
              case 23:
                0 !== t8 && 2 !== t8 || this._windowTitleStack.length && this.setTitle(this._windowTitleStack.pop()), 0 !== t8 && 1 !== t8 || this._iconNameStack.length && this.setIconName(this._iconNameStack.pop());
            }
            return true;
          }
          saveCursor(e9) {
            return this._activeBuffer.savedX = this._activeBuffer.x, this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg, this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg, this._activeBuffer.savedCharset = this._charsetService.charset, true;
          }
          restoreCursor(e9) {
            return this._activeBuffer.x = this._activeBuffer.savedX || 0, this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0), this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg, this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg, this._charsetService.charset = this._savedCharset, this._activeBuffer.savedCharset && (this._charsetService.charset = this._activeBuffer.savedCharset), this._restrictCursor(), true;
          }
          setTitle(e9) {
            return this._windowTitle = e9, this._onTitleChange.fire(e9), true;
          }
          setIconName(e9) {
            return this._iconName = e9, true;
          }
          setOrReportIndexedColor(e9) {
            const t8 = [], i8 = e9.split(";");
            for (; i8.length > 1; ) {
              const e10 = i8.shift(), s7 = i8.shift();
              if (/^\d+$/.exec(e10)) {
                const i9 = parseInt(e10);
                if (L2(i9)) if ("?" === s7) t8.push({ type: 0, index: i9 });
                else {
                  const e11 = (0, S3.parseColor)(s7);
                  e11 && t8.push({ type: 1, index: i9, color: e11 });
                }
              }
            }
            return t8.length && this._onColor.fire(t8), true;
          }
          setHyperlink(e9) {
            const t8 = e9.split(";");
            return !(t8.length < 2) && (t8[1] ? this._createHyperlink(t8[0], t8[1]) : !t8[0] && this._finishHyperlink());
          }
          _createHyperlink(e9, t8) {
            this._getCurrentLinkId() && this._finishHyperlink();
            const i8 = e9.split(":");
            let s7;
            const r9 = i8.findIndex((e10) => e10.startsWith("id="));
            return -1 !== r9 && (s7 = i8[r9].slice(3) || void 0), this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = this._oscLinkService.registerLink({ id: s7, uri: t8 }), this._curAttrData.updateExtended(), true;
          }
          _finishHyperlink() {
            return this._curAttrData.extended = this._curAttrData.extended.clone(), this._curAttrData.extended.urlId = 0, this._curAttrData.updateExtended(), true;
          }
          _setOrReportSpecialColor(e9, t8) {
            const i8 = e9.split(";");
            for (let e10 = 0; e10 < i8.length && !(t8 >= this._specialColors.length); ++e10, ++t8) if ("?" === i8[e10]) this._onColor.fire([{ type: 0, index: this._specialColors[t8] }]);
            else {
              const s7 = (0, S3.parseColor)(i8[e10]);
              s7 && this._onColor.fire([{ type: 1, index: this._specialColors[t8], color: s7 }]);
            }
            return true;
          }
          setOrReportFgColor(e9) {
            return this._setOrReportSpecialColor(e9, 0);
          }
          setOrReportBgColor(e9) {
            return this._setOrReportSpecialColor(e9, 1);
          }
          setOrReportCursorColor(e9) {
            return this._setOrReportSpecialColor(e9, 2);
          }
          restoreIndexedColor(e9) {
            if (!e9) return this._onColor.fire([{ type: 2 }]), true;
            const t8 = [], i8 = e9.split(";");
            for (let e10 = 0; e10 < i8.length; ++e10) if (/^\d+$/.exec(i8[e10])) {
              const s7 = parseInt(i8[e10]);
              L2(s7) && t8.push({ type: 2, index: s7 });
            }
            return t8.length && this._onColor.fire(t8), true;
          }
          restoreFgColor(e9) {
            return this._onColor.fire([{ type: 2, index: 256 }]), true;
          }
          restoreBgColor(e9) {
            return this._onColor.fire([{ type: 2, index: 257 }]), true;
          }
          restoreCursorColor(e9) {
            return this._onColor.fire([{ type: 2, index: 258 }]), true;
          }
          nextLine() {
            return this._activeBuffer.x = 0, this.index(), true;
          }
          keypadApplicationMode() {
            return this._logService.debug("Serial port requested application keypad."), this._coreService.decPrivateModes.applicationKeypad = true, this._onRequestSyncScrollBar.fire(), true;
          }
          keypadNumericMode() {
            return this._logService.debug("Switching back to normal keypad."), this._coreService.decPrivateModes.applicationKeypad = false, this._onRequestSyncScrollBar.fire(), true;
          }
          selectDefaultCharset() {
            return this._charsetService.setgLevel(0), this._charsetService.setgCharset(0, a3.DEFAULT_CHARSET), true;
          }
          selectCharset(e9) {
            return 2 !== e9.length ? (this.selectDefaultCharset(), true) : ("/" === e9[0] || this._charsetService.setgCharset(m2[e9[0]], a3.CHARSETS[e9[1]] || a3.DEFAULT_CHARSET), true);
          }
          index() {
            return this._restrictCursor(), this._activeBuffer.y++, this._activeBuffer.y === this._activeBuffer.scrollBottom + 1 ? (this._activeBuffer.y--, this._bufferService.scroll(this._eraseAttrData())) : this._activeBuffer.y >= this._bufferService.rows && (this._activeBuffer.y = this._bufferService.rows - 1), this._restrictCursor(), true;
          }
          tabSet() {
            return this._activeBuffer.tabs[this._activeBuffer.x] = true, true;
          }
          reverseIndex() {
            if (this._restrictCursor(), this._activeBuffer.y === this._activeBuffer.scrollTop) {
              const e9 = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;
              this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, e9, 1), this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData())), this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);
            } else this._activeBuffer.y--, this._restrictCursor();
            return true;
          }
          fullReset() {
            return this._parser.reset(), this._onRequestReset.fire(), true;
          }
          reset() {
            this._curAttrData = l3.DEFAULT_ATTR_DATA.clone(), this._eraseAttrDataInternal = l3.DEFAULT_ATTR_DATA.clone();
          }
          _eraseAttrData() {
            return this._eraseAttrDataInternal.bg &= -67108864, this._eraseAttrDataInternal.bg |= 67108863 & this._curAttrData.bg, this._eraseAttrDataInternal;
          }
          setgLevel(e9) {
            return this._charsetService.setgLevel(e9), true;
          }
          screenAlignmentPattern() {
            const e9 = new f5.CellData();
            e9.content = 1 << 22 | "E".charCodeAt(0), e9.fg = this._curAttrData.fg, e9.bg = this._curAttrData.bg, this._setCursor(0, 0);
            for (let t8 = 0; t8 < this._bufferService.rows; ++t8) {
              const i8 = this._activeBuffer.ybase + this._activeBuffer.y + t8, s7 = this._activeBuffer.lines.get(i8);
              s7 && (s7.fill(e9), s7.isWrapped = false);
            }
            return this._dirtyRowTracker.markAllDirty(), this._setCursor(0, 0), true;
          }
          requestStatusString(e9, t8) {
            const i8 = this._bufferService.buffer, s7 = this._optionsService.rawOptions;
            return ((e10) => (this._coreService.triggerDataEvent(`${n8.C0.ESC}${e10}${n8.C0.ESC}\\`), true))('"q' === e9 ? `P1$r${this._curAttrData.isProtected() ? 1 : 0}"q` : '"p' === e9 ? 'P1$r61;1"p' : "r" === e9 ? `P1$r${i8.scrollTop + 1};${i8.scrollBottom + 1}r` : "m" === e9 ? "P1$r0m" : " q" === e9 ? `P1$r${{ block: 2, underline: 4, bar: 6 }[s7.cursorStyle] - (s7.cursorBlink ? 1 : 0)} q` : "P0$r");
          }
          markRangeDirty(e9, t8) {
            this._dirtyRowTracker.markRangeDirty(e9, t8);
          }
        }
        t7.InputHandler = E2;
        let A2 = class {
          constructor(e9) {
            this._bufferService = e9, this.clearRange();
          }
          clearRange() {
            this.start = this._bufferService.buffer.y, this.end = this._bufferService.buffer.y;
          }
          markDirty(e9) {
            e9 < this.start ? this.start = e9 : e9 > this.end && (this.end = e9);
          }
          markRangeDirty(e9, t8) {
            e9 > t8 && (B2 = e9, e9 = t8, t8 = B2), e9 < this.start && (this.start = e9), t8 > this.end && (this.end = t8);
          }
          markAllDirty() {
            this.markRangeDirty(0, this._bufferService.rows - 1);
          }
        };
        function L2(e9) {
          return 0 <= e9 && e9 < 256;
        }
        A2 = s6([r8(0, p3.IBufferService)], A2);
      }, 844: (e8, t7) => {
        function i7(e9) {
          for (const t8 of e9) t8.dispose();
          e9.length = 0;
        }
        Object.defineProperty(t7, "__esModule", { value: true }), t7.getDisposeArrayDisposable = t7.disposeArray = t7.toDisposable = t7.MutableDisposable = t7.Disposable = void 0, t7.Disposable = class {
          constructor() {
            this._disposables = [], this._isDisposed = false;
          }
          dispose() {
            this._isDisposed = true;
            for (const e9 of this._disposables) e9.dispose();
            this._disposables.length = 0;
          }
          register(e9) {
            return this._disposables.push(e9), e9;
          }
          unregister(e9) {
            const t8 = this._disposables.indexOf(e9);
            -1 !== t8 && this._disposables.splice(t8, 1);
          }
        }, t7.MutableDisposable = class {
          constructor() {
            this._isDisposed = false;
          }
          get value() {
            return this._isDisposed ? void 0 : this._value;
          }
          set value(e9) {
            this._isDisposed || e9 === this._value || (this._value?.dispose(), this._value = e9);
          }
          clear() {
            this.value = void 0;
          }
          dispose() {
            this._isDisposed = true, this._value?.dispose(), this._value = void 0;
          }
        }, t7.toDisposable = function(e9) {
          return { dispose: e9 };
        }, t7.disposeArray = i7, t7.getDisposeArrayDisposable = function(e9) {
          return { dispose: () => i7(e9) };
        };
      }, 114: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.isChromeOS = t7.isLinux = t7.isWindows = t7.isIphone = t7.isIpad = t7.isMac = t7.getSafariVersion = t7.isSafari = t7.isLegacyEdge = t7.isFirefox = t7.isNode = void 0, t7.isNode = "undefined" != typeof process && "title" in process;
        const i7 = t7.isNode ? "node" : navigator.userAgent, s6 = t7.isNode ? "node" : navigator.platform;
        t7.isFirefox = i7.includes("Firefox"), t7.isLegacyEdge = i7.includes("Edge"), t7.isSafari = /^((?!chrome|android).)*safari/i.test(i7), t7.getSafariVersion = function() {
          if (!t7.isSafari) return 0;
          const e9 = i7.match(/Version\/(\d+)/);
          return null === e9 || e9.length < 2 ? 0 : parseInt(e9[1]);
        }, t7.isMac = ["Macintosh", "MacIntel", "MacPPC", "Mac68K"].includes(s6), t7.isIpad = "iPad" === s6, t7.isIphone = "iPhone" === s6, t7.isWindows = ["Windows", "Win16", "Win32", "WinCE"].includes(s6), t7.isLinux = s6.indexOf("Linux") >= 0, t7.isChromeOS = /\bCrOS\b/.test(i7);
      }, 226: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.DebouncedIdleTask = t7.IdleTaskQueue = t7.PriorityTaskQueue = void 0;
        const s6 = i7(114);
        class r8 {
          constructor() {
            this._tasks = [], this._i = 0;
          }
          enqueue(e9) {
            this._tasks.push(e9), this._start();
          }
          flush() {
            for (; this._i < this._tasks.length; ) this._tasks[this._i]() || this._i++;
            this.clear();
          }
          clear() {
            this._idleCallback && (this._cancelCallback(this._idleCallback), this._idleCallback = void 0), this._i = 0, this._tasks.length = 0;
          }
          _start() {
            this._idleCallback || (this._idleCallback = this._requestCallback(this._process.bind(this)));
          }
          _process(e9) {
            this._idleCallback = void 0;
            let t8 = 0, i8 = 0, s7 = e9.timeRemaining(), r9 = 0;
            for (; this._i < this._tasks.length; ) {
              if (t8 = Date.now(), this._tasks[this._i]() || this._i++, t8 = Math.max(1, Date.now() - t8), i8 = Math.max(t8, i8), r9 = e9.timeRemaining(), 1.5 * i8 > r9) return s7 - t8 < -20 && console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(s7 - t8))}ms`), void this._start();
              s7 = r9;
            }
            this.clear();
          }
        }
        class n8 extends r8 {
          _requestCallback(e9) {
            return setTimeout(() => e9(this._createDeadline(16)));
          }
          _cancelCallback(e9) {
            clearTimeout(e9);
          }
          _createDeadline(e9) {
            const t8 = Date.now() + e9;
            return { timeRemaining: () => Math.max(0, t8 - Date.now()) };
          }
        }
        t7.PriorityTaskQueue = n8, t7.IdleTaskQueue = !s6.isNode && "requestIdleCallback" in window ? class extends r8 {
          _requestCallback(e9) {
            return requestIdleCallback(e9);
          }
          _cancelCallback(e9) {
            cancelIdleCallback(e9);
          }
        } : n8, t7.DebouncedIdleTask = class {
          constructor() {
            this._queue = new t7.IdleTaskQueue();
          }
          set(e9) {
            this._queue.clear(), this._queue.enqueue(e9);
          }
          flush() {
            this._queue.flush();
          }
        };
      }, 282: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.updateWindowsModeWrappedState = void 0;
        const s6 = i7(643);
        t7.updateWindowsModeWrappedState = function(e9) {
          const t8 = e9.buffer.lines.get(e9.buffer.ybase + e9.buffer.y - 1), i8 = t8?.get(e9.cols - 1), r8 = e9.buffer.lines.get(e9.buffer.ybase + e9.buffer.y);
          r8 && i8 && (r8.isWrapped = i8[s6.CHAR_DATA_CODE_INDEX] !== s6.NULL_CELL_CODE && i8[s6.CHAR_DATA_CODE_INDEX] !== s6.WHITESPACE_CELL_CODE);
        };
      }, 734: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.ExtendedAttrs = t7.AttributeData = void 0;
        class i7 {
          constructor() {
            this.fg = 0, this.bg = 0, this.extended = new s6();
          }
          static toColorRGB(e9) {
            return [e9 >>> 16 & 255, e9 >>> 8 & 255, 255 & e9];
          }
          static fromColorRGB(e9) {
            return (255 & e9[0]) << 16 | (255 & e9[1]) << 8 | 255 & e9[2];
          }
          clone() {
            const e9 = new i7();
            return e9.fg = this.fg, e9.bg = this.bg, e9.extended = this.extended.clone(), e9;
          }
          isInverse() {
            return 67108864 & this.fg;
          }
          isBold() {
            return 134217728 & this.fg;
          }
          isUnderline() {
            return this.hasExtendedAttrs() && 0 !== this.extended.underlineStyle ? 1 : 268435456 & this.fg;
          }
          isBlink() {
            return 536870912 & this.fg;
          }
          isInvisible() {
            return 1073741824 & this.fg;
          }
          isItalic() {
            return 67108864 & this.bg;
          }
          isDim() {
            return 134217728 & this.bg;
          }
          isStrikethrough() {
            return 2147483648 & this.fg;
          }
          isProtected() {
            return 536870912 & this.bg;
          }
          isOverline() {
            return 1073741824 & this.bg;
          }
          getFgColorMode() {
            return 50331648 & this.fg;
          }
          getBgColorMode() {
            return 50331648 & this.bg;
          }
          isFgRGB() {
            return 50331648 == (50331648 & this.fg);
          }
          isBgRGB() {
            return 50331648 == (50331648 & this.bg);
          }
          isFgPalette() {
            return 16777216 == (50331648 & this.fg) || 33554432 == (50331648 & this.fg);
          }
          isBgPalette() {
            return 16777216 == (50331648 & this.bg) || 33554432 == (50331648 & this.bg);
          }
          isFgDefault() {
            return 0 == (50331648 & this.fg);
          }
          isBgDefault() {
            return 0 == (50331648 & this.bg);
          }
          isAttributeDefault() {
            return 0 === this.fg && 0 === this.bg;
          }
          getFgColor() {
            switch (50331648 & this.fg) {
              case 16777216:
              case 33554432:
                return 255 & this.fg;
              case 50331648:
                return 16777215 & this.fg;
              default:
                return -1;
            }
          }
          getBgColor() {
            switch (50331648 & this.bg) {
              case 16777216:
              case 33554432:
                return 255 & this.bg;
              case 50331648:
                return 16777215 & this.bg;
              default:
                return -1;
            }
          }
          hasExtendedAttrs() {
            return 268435456 & this.bg;
          }
          updateExtended() {
            this.extended.isEmpty() ? this.bg &= -268435457 : this.bg |= 268435456;
          }
          getUnderlineColor() {
            if (268435456 & this.bg && ~this.extended.underlineColor) switch (50331648 & this.extended.underlineColor) {
              case 16777216:
              case 33554432:
                return 255 & this.extended.underlineColor;
              case 50331648:
                return 16777215 & this.extended.underlineColor;
              default:
                return this.getFgColor();
            }
            return this.getFgColor();
          }
          getUnderlineColorMode() {
            return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 & this.extended.underlineColor : this.getFgColorMode();
          }
          isUnderlineColorRGB() {
            return 268435456 & this.bg && ~this.extended.underlineColor ? 50331648 == (50331648 & this.extended.underlineColor) : this.isFgRGB();
          }
          isUnderlineColorPalette() {
            return 268435456 & this.bg && ~this.extended.underlineColor ? 16777216 == (50331648 & this.extended.underlineColor) || 33554432 == (50331648 & this.extended.underlineColor) : this.isFgPalette();
          }
          isUnderlineColorDefault() {
            return 268435456 & this.bg && ~this.extended.underlineColor ? 0 == (50331648 & this.extended.underlineColor) : this.isFgDefault();
          }
          getUnderlineStyle() {
            return 268435456 & this.fg ? 268435456 & this.bg ? this.extended.underlineStyle : 1 : 0;
          }
          getUnderlineVariantOffset() {
            return this.extended.underlineVariantOffset;
          }
        }
        t7.AttributeData = i7;
        class s6 {
          get ext() {
            return this._urlId ? -469762049 & this._ext | this.underlineStyle << 26 : this._ext;
          }
          set ext(e9) {
            this._ext = e9;
          }
          get underlineStyle() {
            return this._urlId ? 5 : (469762048 & this._ext) >> 26;
          }
          set underlineStyle(e9) {
            this._ext &= -469762049, this._ext |= e9 << 26 & 469762048;
          }
          get underlineColor() {
            return 67108863 & this._ext;
          }
          set underlineColor(e9) {
            this._ext &= -67108864, this._ext |= 67108863 & e9;
          }
          get urlId() {
            return this._urlId;
          }
          set urlId(e9) {
            this._urlId = e9;
          }
          get underlineVariantOffset() {
            const e9 = (3758096384 & this._ext) >> 29;
            return e9 < 0 ? 4294967288 ^ e9 : e9;
          }
          set underlineVariantOffset(e9) {
            this._ext &= 536870911, this._ext |= e9 << 29 & 3758096384;
          }
          constructor(e9 = 0, t8 = 0) {
            this._ext = 0, this._urlId = 0, this._ext = e9, this._urlId = t8;
          }
          clone() {
            return new s6(this._ext, this._urlId);
          }
          isEmpty() {
            return 0 === this.underlineStyle && 0 === this._urlId;
          }
        }
        t7.ExtendedAttrs = s6;
      }, 92: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.Buffer = t7.MAX_BUFFER_SIZE = void 0;
        const s6 = i7(349), r8 = i7(226), n8 = i7(734), a3 = i7(437), o8 = i7(634), h5 = i7(511), c5 = i7(643), l3 = i7(863), _2 = i7(116);
        t7.MAX_BUFFER_SIZE = 4294967295, t7.Buffer = class {
          constructor(e9, t8, i8) {
            this._hasScrollback = e9, this._optionsService = t8, this._bufferService = i8, this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.tabs = {}, this.savedY = 0, this.savedX = 0, this.savedCurAttrData = a3.DEFAULT_ATTR_DATA.clone(), this.savedCharset = _2.DEFAULT_CHARSET, this.markers = [], this._nullCell = h5.CellData.fromCharData([0, c5.NULL_CELL_CHAR, c5.NULL_CELL_WIDTH, c5.NULL_CELL_CODE]), this._whitespaceCell = h5.CellData.fromCharData([0, c5.WHITESPACE_CELL_CHAR, c5.WHITESPACE_CELL_WIDTH, c5.WHITESPACE_CELL_CODE]), this._isClearing = false, this._memoryCleanupQueue = new r8.IdleTaskQueue(), this._memoryCleanupPosition = 0, this._cols = this._bufferService.cols, this._rows = this._bufferService.rows, this.lines = new s6.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
          }
          getNullCell(e9) {
            return e9 ? (this._nullCell.fg = e9.fg, this._nullCell.bg = e9.bg, this._nullCell.extended = e9.extended) : (this._nullCell.fg = 0, this._nullCell.bg = 0, this._nullCell.extended = new n8.ExtendedAttrs()), this._nullCell;
          }
          getWhitespaceCell(e9) {
            return e9 ? (this._whitespaceCell.fg = e9.fg, this._whitespaceCell.bg = e9.bg, this._whitespaceCell.extended = e9.extended) : (this._whitespaceCell.fg = 0, this._whitespaceCell.bg = 0, this._whitespaceCell.extended = new n8.ExtendedAttrs()), this._whitespaceCell;
          }
          getBlankLine(e9, t8) {
            return new a3.BufferLine(this._bufferService.cols, this.getNullCell(e9), t8);
          }
          get hasScrollback() {
            return this._hasScrollback && this.lines.maxLength > this._rows;
          }
          get isCursorInViewport() {
            const e9 = this.ybase + this.y - this.ydisp;
            return e9 >= 0 && e9 < this._rows;
          }
          _getCorrectBufferLength(e9) {
            if (!this._hasScrollback) return e9;
            const i8 = e9 + this._optionsService.rawOptions.scrollback;
            return i8 > t7.MAX_BUFFER_SIZE ? t7.MAX_BUFFER_SIZE : i8;
          }
          fillViewportRows(e9) {
            if (0 === this.lines.length) {
              void 0 === e9 && (e9 = a3.DEFAULT_ATTR_DATA);
              let t8 = this._rows;
              for (; t8--; ) this.lines.push(this.getBlankLine(e9));
            }
          }
          clear() {
            this.ydisp = 0, this.ybase = 0, this.y = 0, this.x = 0, this.lines = new s6.CircularList(this._getCorrectBufferLength(this._rows)), this.scrollTop = 0, this.scrollBottom = this._rows - 1, this.setupTabStops();
          }
          resize(e9, t8) {
            const i8 = this.getNullCell(a3.DEFAULT_ATTR_DATA);
            let s7 = 0;
            const r9 = this._getCorrectBufferLength(t8);
            if (r9 > this.lines.maxLength && (this.lines.maxLength = r9), this.lines.length > 0) {
              if (this._cols < e9) for (let t9 = 0; t9 < this.lines.length; t9++) s7 += +this.lines.get(t9).resize(e9, i8);
              let n9 = 0;
              if (this._rows < t8) for (let s8 = this._rows; s8 < t8; s8++) this.lines.length < t8 + this.ybase && (this._optionsService.rawOptions.windowsMode || void 0 !== this._optionsService.rawOptions.windowsPty.backend || void 0 !== this._optionsService.rawOptions.windowsPty.buildNumber ? this.lines.push(new a3.BufferLine(e9, i8)) : this.ybase > 0 && this.lines.length <= this.ybase + this.y + n9 + 1 ? (this.ybase--, n9++, this.ydisp > 0 && this.ydisp--) : this.lines.push(new a3.BufferLine(e9, i8)));
              else for (let e10 = this._rows; e10 > t8; e10--) this.lines.length > t8 + this.ybase && (this.lines.length > this.ybase + this.y + 1 ? this.lines.pop() : (this.ybase++, this.ydisp++));
              if (r9 < this.lines.maxLength) {
                const e10 = this.lines.length - r9;
                e10 > 0 && (this.lines.trimStart(e10), this.ybase = Math.max(this.ybase - e10, 0), this.ydisp = Math.max(this.ydisp - e10, 0), this.savedY = Math.max(this.savedY - e10, 0)), this.lines.maxLength = r9;
              }
              this.x = Math.min(this.x, e9 - 1), this.y = Math.min(this.y, t8 - 1), n9 && (this.y += n9), this.savedX = Math.min(this.savedX, e9 - 1), this.scrollTop = 0;
            }
            if (this.scrollBottom = t8 - 1, this._isReflowEnabled && (this._reflow(e9, t8), this._cols > e9)) for (let t9 = 0; t9 < this.lines.length; t9++) s7 += +this.lines.get(t9).resize(e9, i8);
            this._cols = e9, this._rows = t8, this._memoryCleanupQueue.clear(), s7 > 0.1 * this.lines.length && (this._memoryCleanupPosition = 0, this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup()));
          }
          _batchedMemoryCleanup() {
            let e9 = true;
            this._memoryCleanupPosition >= this.lines.length && (this._memoryCleanupPosition = 0, e9 = false);
            let t8 = 0;
            for (; this._memoryCleanupPosition < this.lines.length; ) if (t8 += this.lines.get(this._memoryCleanupPosition++).cleanupMemory(), t8 > 100) return true;
            return e9;
          }
          get _isReflowEnabled() {
            const e9 = this._optionsService.rawOptions.windowsPty;
            return e9 && e9.buildNumber ? this._hasScrollback && "conpty" === e9.backend && e9.buildNumber >= 21376 : this._hasScrollback && !this._optionsService.rawOptions.windowsMode;
          }
          _reflow(e9, t8) {
            this._cols !== e9 && (e9 > this._cols ? this._reflowLarger(e9, t8) : this._reflowSmaller(e9, t8));
          }
          _reflowLarger(e9, t8) {
            const i8 = (0, o8.reflowLargerGetLinesToRemove)(this.lines, this._cols, e9, this.ybase + this.y, this.getNullCell(a3.DEFAULT_ATTR_DATA));
            if (i8.length > 0) {
              const s7 = (0, o8.reflowLargerCreateNewLayout)(this.lines, i8);
              (0, o8.reflowLargerApplyNewLayout)(this.lines, s7.layout), this._reflowLargerAdjustViewport(e9, t8, s7.countRemoved);
            }
          }
          _reflowLargerAdjustViewport(e9, t8, i8) {
            const s7 = this.getNullCell(a3.DEFAULT_ATTR_DATA);
            let r9 = i8;
            for (; r9-- > 0; ) 0 === this.ybase ? (this.y > 0 && this.y--, this.lines.length < t8 && this.lines.push(new a3.BufferLine(e9, s7))) : (this.ydisp === this.ybase && this.ydisp--, this.ybase--);
            this.savedY = Math.max(this.savedY - i8, 0);
          }
          _reflowSmaller(e9, t8) {
            const i8 = this.getNullCell(a3.DEFAULT_ATTR_DATA), s7 = [];
            let r9 = 0;
            for (let n9 = this.lines.length - 1; n9 >= 0; n9--) {
              let h6 = this.lines.get(n9);
              if (!h6 || !h6.isWrapped && h6.getTrimmedLength() <= e9) continue;
              const c6 = [h6];
              for (; h6.isWrapped && n9 > 0; ) h6 = this.lines.get(--n9), c6.unshift(h6);
              const l4 = this.ybase + this.y;
              if (l4 >= n9 && l4 < n9 + c6.length) continue;
              const _3 = c6[c6.length - 1].getTrimmedLength(), d3 = (0, o8.reflowSmallerGetNewLineLengths)(c6, this._cols, e9), f5 = d3.length - c6.length;
              let u3;
              u3 = 0 === this.ybase && this.y !== this.lines.length - 1 ? Math.max(0, this.y - this.lines.maxLength + f5) : Math.max(0, this.lines.length - this.lines.maxLength + f5);
              const p3 = [];
              for (let e10 = 0; e10 < f5; e10++) {
                const e11 = this.getBlankLine(a3.DEFAULT_ATTR_DATA, true);
                p3.push(e11);
              }
              p3.length > 0 && (s7.push({ start: n9 + c6.length + r9, newLines: p3 }), r9 += p3.length), c6.push(...p3);
              let g2 = d3.length - 1, v2 = d3[g2];
              0 === v2 && (g2--, v2 = d3[g2]);
              let b3 = c6.length - f5 - 1, S3 = _3;
              for (; b3 >= 0; ) {
                const e10 = Math.min(S3, v2);
                if (void 0 === c6[g2]) break;
                if (c6[g2].copyCellsFrom(c6[b3], S3 - e10, v2 - e10, e10, true), v2 -= e10, 0 === v2 && (g2--, v2 = d3[g2]), S3 -= e10, 0 === S3) {
                  b3--;
                  const e11 = Math.max(b3, 0);
                  S3 = (0, o8.getWrappedLineTrimmedLength)(c6, e11, this._cols);
                }
              }
              for (let t9 = 0; t9 < c6.length; t9++) d3[t9] < e9 && c6[t9].setCell(d3[t9], i8);
              let m2 = f5 - u3;
              for (; m2-- > 0; ) 0 === this.ybase ? this.y < t8 - 1 ? (this.y++, this.lines.pop()) : (this.ybase++, this.ydisp++) : this.ybase < Math.min(this.lines.maxLength, this.lines.length + r9) - t8 && (this.ybase === this.ydisp && this.ydisp++, this.ybase++);
              this.savedY = Math.min(this.savedY + f5, this.ybase + t8 - 1);
            }
            if (s7.length > 0) {
              const e10 = [], t9 = [];
              for (let e11 = 0; e11 < this.lines.length; e11++) t9.push(this.lines.get(e11));
              const i9 = this.lines.length;
              let n9 = i9 - 1, a4 = 0, o9 = s7[a4];
              this.lines.length = Math.min(this.lines.maxLength, this.lines.length + r9);
              let h6 = 0;
              for (let c7 = Math.min(this.lines.maxLength - 1, i9 + r9 - 1); c7 >= 0; c7--) if (o9 && o9.start > n9 + h6) {
                for (let e11 = o9.newLines.length - 1; e11 >= 0; e11--) this.lines.set(c7--, o9.newLines[e11]);
                c7++, e10.push({ index: n9 + 1, amount: o9.newLines.length }), h6 += o9.newLines.length, o9 = s7[++a4];
              } else this.lines.set(c7, t9[n9--]);
              let c6 = 0;
              for (let t10 = e10.length - 1; t10 >= 0; t10--) e10[t10].index += c6, this.lines.onInsertEmitter.fire(e10[t10]), c6 += e10[t10].amount;
              const l4 = Math.max(0, i9 + r9 - this.lines.maxLength);
              l4 > 0 && this.lines.onTrimEmitter.fire(l4);
            }
          }
          translateBufferLineToString(e9, t8, i8 = 0, s7) {
            const r9 = this.lines.get(e9);
            return r9 ? r9.translateToString(t8, i8, s7) : "";
          }
          getWrappedRangeForLine(e9) {
            let t8 = e9, i8 = e9;
            for (; t8 > 0 && this.lines.get(t8).isWrapped; ) t8--;
            for (; i8 + 1 < this.lines.length && this.lines.get(i8 + 1).isWrapped; ) i8++;
            return { first: t8, last: i8 };
          }
          setupTabStops(e9) {
            for (null != e9 ? this.tabs[e9] || (e9 = this.prevStop(e9)) : (this.tabs = {}, e9 = 0); e9 < this._cols; e9 += this._optionsService.rawOptions.tabStopWidth) this.tabs[e9] = true;
          }
          prevStop(e9) {
            for (null == e9 && (e9 = this.x); !this.tabs[--e9] && e9 > 0; ) ;
            return e9 >= this._cols ? this._cols - 1 : e9 < 0 ? 0 : e9;
          }
          nextStop(e9) {
            for (null == e9 && (e9 = this.x); !this.tabs[++e9] && e9 < this._cols; ) ;
            return e9 >= this._cols ? this._cols - 1 : e9 < 0 ? 0 : e9;
          }
          clearMarkers(e9) {
            this._isClearing = true;
            for (let t8 = 0; t8 < this.markers.length; t8++) this.markers[t8].line === e9 && (this.markers[t8].dispose(), this.markers.splice(t8--, 1));
            this._isClearing = false;
          }
          clearAllMarkers() {
            this._isClearing = true;
            for (let e9 = 0; e9 < this.markers.length; e9++) this.markers[e9].dispose(), this.markers.splice(e9--, 1);
            this._isClearing = false;
          }
          addMarker(e9) {
            const t8 = new l3.Marker(e9);
            return this.markers.push(t8), t8.register(this.lines.onTrim((e10) => {
              t8.line -= e10, t8.line < 0 && t8.dispose();
            })), t8.register(this.lines.onInsert((e10) => {
              t8.line >= e10.index && (t8.line += e10.amount);
            })), t8.register(this.lines.onDelete((e10) => {
              t8.line >= e10.index && t8.line < e10.index + e10.amount && t8.dispose(), t8.line > e10.index && (t8.line -= e10.amount);
            })), t8.register(t8.onDispose(() => this._removeMarker(t8))), t8;
          }
          _removeMarker(e9) {
            this._isClearing || this.markers.splice(this.markers.indexOf(e9), 1);
          }
        };
      }, 437: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.BufferLine = t7.DEFAULT_ATTR_DATA = void 0;
        const s6 = i7(734), r8 = i7(511), n8 = i7(643), a3 = i7(482);
        t7.DEFAULT_ATTR_DATA = Object.freeze(new s6.AttributeData());
        let o8 = 0;
        class h5 {
          constructor(e9, t8, i8 = false) {
            this.isWrapped = i8, this._combined = {}, this._extendedAttrs = {}, this._data = new Uint32Array(3 * e9);
            const s7 = t8 || r8.CellData.fromCharData([0, n8.NULL_CELL_CHAR, n8.NULL_CELL_WIDTH, n8.NULL_CELL_CODE]);
            for (let t9 = 0; t9 < e9; ++t9) this.setCell(t9, s7);
            this.length = e9;
          }
          get(e9) {
            const t8 = this._data[3 * e9 + 0], i8 = 2097151 & t8;
            return [this._data[3 * e9 + 1], 2097152 & t8 ? this._combined[e9] : i8 ? (0, a3.stringFromCodePoint)(i8) : "", t8 >> 22, 2097152 & t8 ? this._combined[e9].charCodeAt(this._combined[e9].length - 1) : i8];
          }
          set(e9, t8) {
            this._data[3 * e9 + 1] = t8[n8.CHAR_DATA_ATTR_INDEX], t8[n8.CHAR_DATA_CHAR_INDEX].length > 1 ? (this._combined[e9] = t8[1], this._data[3 * e9 + 0] = 2097152 | e9 | t8[n8.CHAR_DATA_WIDTH_INDEX] << 22) : this._data[3 * e9 + 0] = t8[n8.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | t8[n8.CHAR_DATA_WIDTH_INDEX] << 22;
          }
          getWidth(e9) {
            return this._data[3 * e9 + 0] >> 22;
          }
          hasWidth(e9) {
            return 12582912 & this._data[3 * e9 + 0];
          }
          getFg(e9) {
            return this._data[3 * e9 + 1];
          }
          getBg(e9) {
            return this._data[3 * e9 + 2];
          }
          hasContent(e9) {
            return 4194303 & this._data[3 * e9 + 0];
          }
          getCodePoint(e9) {
            const t8 = this._data[3 * e9 + 0];
            return 2097152 & t8 ? this._combined[e9].charCodeAt(this._combined[e9].length - 1) : 2097151 & t8;
          }
          isCombined(e9) {
            return 2097152 & this._data[3 * e9 + 0];
          }
          getString(e9) {
            const t8 = this._data[3 * e9 + 0];
            return 2097152 & t8 ? this._combined[e9] : 2097151 & t8 ? (0, a3.stringFromCodePoint)(2097151 & t8) : "";
          }
          isProtected(e9) {
            return 536870912 & this._data[3 * e9 + 2];
          }
          loadCell(e9, t8) {
            return o8 = 3 * e9, t8.content = this._data[o8 + 0], t8.fg = this._data[o8 + 1], t8.bg = this._data[o8 + 2], 2097152 & t8.content && (t8.combinedData = this._combined[e9]), 268435456 & t8.bg && (t8.extended = this._extendedAttrs[e9]), t8;
          }
          setCell(e9, t8) {
            2097152 & t8.content && (this._combined[e9] = t8.combinedData), 268435456 & t8.bg && (this._extendedAttrs[e9] = t8.extended), this._data[3 * e9 + 0] = t8.content, this._data[3 * e9 + 1] = t8.fg, this._data[3 * e9 + 2] = t8.bg;
          }
          setCellFromCodepoint(e9, t8, i8, s7) {
            268435456 & s7.bg && (this._extendedAttrs[e9] = s7.extended), this._data[3 * e9 + 0] = t8 | i8 << 22, this._data[3 * e9 + 1] = s7.fg, this._data[3 * e9 + 2] = s7.bg;
          }
          addCodepointToCell(e9, t8, i8) {
            let s7 = this._data[3 * e9 + 0];
            2097152 & s7 ? this._combined[e9] += (0, a3.stringFromCodePoint)(t8) : 2097151 & s7 ? (this._combined[e9] = (0, a3.stringFromCodePoint)(2097151 & s7) + (0, a3.stringFromCodePoint)(t8), s7 &= -2097152, s7 |= 2097152) : s7 = t8 | 1 << 22, i8 && (s7 &= -12582913, s7 |= i8 << 22), this._data[3 * e9 + 0] = s7;
          }
          insertCells(e9, t8, i8) {
            if ((e9 %= this.length) && 2 === this.getWidth(e9 - 1) && this.setCellFromCodepoint(e9 - 1, 0, 1, i8), t8 < this.length - e9) {
              const s7 = new r8.CellData();
              for (let i9 = this.length - e9 - t8 - 1; i9 >= 0; --i9) this.setCell(e9 + t8 + i9, this.loadCell(e9 + i9, s7));
              for (let s8 = 0; s8 < t8; ++s8) this.setCell(e9 + s8, i8);
            } else for (let t9 = e9; t9 < this.length; ++t9) this.setCell(t9, i8);
            2 === this.getWidth(this.length - 1) && this.setCellFromCodepoint(this.length - 1, 0, 1, i8);
          }
          deleteCells(e9, t8, i8) {
            if (e9 %= this.length, t8 < this.length - e9) {
              const s7 = new r8.CellData();
              for (let i9 = 0; i9 < this.length - e9 - t8; ++i9) this.setCell(e9 + i9, this.loadCell(e9 + t8 + i9, s7));
              for (let e10 = this.length - t8; e10 < this.length; ++e10) this.setCell(e10, i8);
            } else for (let t9 = e9; t9 < this.length; ++t9) this.setCell(t9, i8);
            e9 && 2 === this.getWidth(e9 - 1) && this.setCellFromCodepoint(e9 - 1, 0, 1, i8), 0 !== this.getWidth(e9) || this.hasContent(e9) || this.setCellFromCodepoint(e9, 0, 1, i8);
          }
          replaceCells(e9, t8, i8, s7 = false) {
            if (s7) for (e9 && 2 === this.getWidth(e9 - 1) && !this.isProtected(e9 - 1) && this.setCellFromCodepoint(e9 - 1, 0, 1, i8), t8 < this.length && 2 === this.getWidth(t8 - 1) && !this.isProtected(t8) && this.setCellFromCodepoint(t8, 0, 1, i8); e9 < t8 && e9 < this.length; ) this.isProtected(e9) || this.setCell(e9, i8), e9++;
            else for (e9 && 2 === this.getWidth(e9 - 1) && this.setCellFromCodepoint(e9 - 1, 0, 1, i8), t8 < this.length && 2 === this.getWidth(t8 - 1) && this.setCellFromCodepoint(t8, 0, 1, i8); e9 < t8 && e9 < this.length; ) this.setCell(e9++, i8);
          }
          resize(e9, t8) {
            if (e9 === this.length) return 4 * this._data.length * 2 < this._data.buffer.byteLength;
            const i8 = 3 * e9;
            if (e9 > this.length) {
              if (this._data.buffer.byteLength >= 4 * i8) this._data = new Uint32Array(this._data.buffer, 0, i8);
              else {
                const e10 = new Uint32Array(i8);
                e10.set(this._data), this._data = e10;
              }
              for (let i9 = this.length; i9 < e9; ++i9) this.setCell(i9, t8);
            } else {
              this._data = this._data.subarray(0, i8);
              const t9 = Object.keys(this._combined);
              for (let i9 = 0; i9 < t9.length; i9++) {
                const s8 = parseInt(t9[i9], 10);
                s8 >= e9 && delete this._combined[s8];
              }
              const s7 = Object.keys(this._extendedAttrs);
              for (let t10 = 0; t10 < s7.length; t10++) {
                const i9 = parseInt(s7[t10], 10);
                i9 >= e9 && delete this._extendedAttrs[i9];
              }
            }
            return this.length = e9, 4 * i8 * 2 < this._data.buffer.byteLength;
          }
          cleanupMemory() {
            if (4 * this._data.length * 2 < this._data.buffer.byteLength) {
              const e9 = new Uint32Array(this._data.length);
              return e9.set(this._data), this._data = e9, 1;
            }
            return 0;
          }
          fill(e9, t8 = false) {
            if (t8) for (let t9 = 0; t9 < this.length; ++t9) this.isProtected(t9) || this.setCell(t9, e9);
            else {
              this._combined = {}, this._extendedAttrs = {};
              for (let t9 = 0; t9 < this.length; ++t9) this.setCell(t9, e9);
            }
          }
          copyFrom(e9) {
            this.length !== e9.length ? this._data = new Uint32Array(e9._data) : this._data.set(e9._data), this.length = e9.length, this._combined = {};
            for (const t8 in e9._combined) this._combined[t8] = e9._combined[t8];
            this._extendedAttrs = {};
            for (const t8 in e9._extendedAttrs) this._extendedAttrs[t8] = e9._extendedAttrs[t8];
            this.isWrapped = e9.isWrapped;
          }
          clone() {
            const e9 = new h5(0);
            e9._data = new Uint32Array(this._data), e9.length = this.length;
            for (const t8 in this._combined) e9._combined[t8] = this._combined[t8];
            for (const t8 in this._extendedAttrs) e9._extendedAttrs[t8] = this._extendedAttrs[t8];
            return e9.isWrapped = this.isWrapped, e9;
          }
          getTrimmedLength() {
            for (let e9 = this.length - 1; e9 >= 0; --e9) if (4194303 & this._data[3 * e9 + 0]) return e9 + (this._data[3 * e9 + 0] >> 22);
            return 0;
          }
          getNoBgTrimmedLength() {
            for (let e9 = this.length - 1; e9 >= 0; --e9) if (4194303 & this._data[3 * e9 + 0] || 50331648 & this._data[3 * e9 + 2]) return e9 + (this._data[3 * e9 + 0] >> 22);
            return 0;
          }
          copyCellsFrom(e9, t8, i8, s7, r9) {
            const n9 = e9._data;
            if (r9) for (let r10 = s7 - 1; r10 >= 0; r10--) {
              for (let e10 = 0; e10 < 3; e10++) this._data[3 * (i8 + r10) + e10] = n9[3 * (t8 + r10) + e10];
              268435456 & n9[3 * (t8 + r10) + 2] && (this._extendedAttrs[i8 + r10] = e9._extendedAttrs[t8 + r10]);
            }
            else for (let r10 = 0; r10 < s7; r10++) {
              for (let e10 = 0; e10 < 3; e10++) this._data[3 * (i8 + r10) + e10] = n9[3 * (t8 + r10) + e10];
              268435456 & n9[3 * (t8 + r10) + 2] && (this._extendedAttrs[i8 + r10] = e9._extendedAttrs[t8 + r10]);
            }
            const a4 = Object.keys(e9._combined);
            for (let s8 = 0; s8 < a4.length; s8++) {
              const r10 = parseInt(a4[s8], 10);
              r10 >= t8 && (this._combined[r10 - t8 + i8] = e9._combined[r10]);
            }
          }
          translateToString(e9, t8, i8, s7) {
            t8 = t8 ?? 0, i8 = i8 ?? this.length, e9 && (i8 = Math.min(i8, this.getTrimmedLength())), s7 && (s7.length = 0);
            let r9 = "";
            for (; t8 < i8; ) {
              const e10 = this._data[3 * t8 + 0], i9 = 2097151 & e10, o9 = 2097152 & e10 ? this._combined[t8] : i9 ? (0, a3.stringFromCodePoint)(i9) : n8.WHITESPACE_CELL_CHAR;
              if (r9 += o9, s7) for (let e11 = 0; e11 < o9.length; ++e11) s7.push(t8);
              t8 += e10 >> 22 || 1;
            }
            return s7 && s7.push(t8), r9;
          }
        }
        t7.BufferLine = h5;
      }, 634: (e8, t7) => {
        function i7(e9, t8, i8) {
          if (t8 === e9.length - 1) return e9[t8].getTrimmedLength();
          const s6 = !e9[t8].hasContent(i8 - 1) && 1 === e9[t8].getWidth(i8 - 1), r8 = 2 === e9[t8 + 1].getWidth(0);
          return s6 && r8 ? i8 - 1 : i8;
        }
        Object.defineProperty(t7, "__esModule", { value: true }), t7.getWrappedLineTrimmedLength = t7.reflowSmallerGetNewLineLengths = t7.reflowLargerApplyNewLayout = t7.reflowLargerCreateNewLayout = t7.reflowLargerGetLinesToRemove = void 0, t7.reflowLargerGetLinesToRemove = function(e9, t8, s6, r8, n8) {
          const a3 = [];
          for (let o8 = 0; o8 < e9.length - 1; o8++) {
            let h5 = o8, c5 = e9.get(++h5);
            if (!c5.isWrapped) continue;
            const l3 = [e9.get(o8)];
            for (; h5 < e9.length && c5.isWrapped; ) l3.push(c5), c5 = e9.get(++h5);
            if (r8 >= o8 && r8 < h5) {
              o8 += l3.length - 1;
              continue;
            }
            let _2 = 0, d3 = i7(l3, _2, t8), f5 = 1, u3 = 0;
            for (; f5 < l3.length; ) {
              const e10 = i7(l3, f5, t8), r9 = e10 - u3, a4 = s6 - d3, o9 = Math.min(r9, a4);
              l3[_2].copyCellsFrom(l3[f5], u3, d3, o9, false), d3 += o9, d3 === s6 && (_2++, d3 = 0), u3 += o9, u3 === e10 && (f5++, u3 = 0), 0 === d3 && 0 !== _2 && 2 === l3[_2 - 1].getWidth(s6 - 1) && (l3[_2].copyCellsFrom(l3[_2 - 1], s6 - 1, d3++, 1, false), l3[_2 - 1].setCell(s6 - 1, n8));
            }
            l3[_2].replaceCells(d3, s6, n8);
            let p3 = 0;
            for (let e10 = l3.length - 1; e10 > 0 && (e10 > _2 || 0 === l3[e10].getTrimmedLength()); e10--) p3++;
            p3 > 0 && (a3.push(o8 + l3.length - p3), a3.push(p3)), o8 += l3.length - 1;
          }
          return a3;
        }, t7.reflowLargerCreateNewLayout = function(e9, t8) {
          const i8 = [];
          let s6 = 0, r8 = t8[s6], n8 = 0;
          for (let a3 = 0; a3 < e9.length; a3++) if (r8 === a3) {
            const i9 = t8[++s6];
            e9.onDeleteEmitter.fire({ index: a3 - n8, amount: i9 }), a3 += i9 - 1, n8 += i9, r8 = t8[++s6];
          } else i8.push(a3);
          return { layout: i8, countRemoved: n8 };
        }, t7.reflowLargerApplyNewLayout = function(e9, t8) {
          const i8 = [];
          for (let s6 = 0; s6 < t8.length; s6++) i8.push(e9.get(t8[s6]));
          for (let t9 = 0; t9 < i8.length; t9++) e9.set(t9, i8[t9]);
          e9.length = t8.length;
        }, t7.reflowSmallerGetNewLineLengths = function(e9, t8, s6) {
          const r8 = [], n8 = e9.map((s7, r9) => i7(e9, r9, t8)).reduce((e10, t9) => e10 + t9);
          let a3 = 0, o8 = 0, h5 = 0;
          for (; h5 < n8; ) {
            if (n8 - h5 < s6) {
              r8.push(n8 - h5);
              break;
            }
            a3 += s6;
            const c5 = i7(e9, o8, t8);
            a3 > c5 && (a3 -= c5, o8++);
            const l3 = 2 === e9[o8].getWidth(a3 - 1);
            l3 && a3--;
            const _2 = l3 ? s6 - 1 : s6;
            r8.push(_2), h5 += _2;
          }
          return r8;
        }, t7.getWrappedLineTrimmedLength = i7;
      }, 295: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.BufferSet = void 0;
        const s6 = i7(460), r8 = i7(844), n8 = i7(92);
        class a3 extends r8.Disposable {
          constructor(e9, t8) {
            super(), this._optionsService = e9, this._bufferService = t8, this._onBufferActivate = this.register(new s6.EventEmitter()), this.onBufferActivate = this._onBufferActivate.event, this.reset(), this.register(this._optionsService.onSpecificOptionChange("scrollback", () => this.resize(this._bufferService.cols, this._bufferService.rows))), this.register(this._optionsService.onSpecificOptionChange("tabStopWidth", () => this.setupTabStops()));
          }
          reset() {
            this._normal = new n8.Buffer(true, this._optionsService, this._bufferService), this._normal.fillViewportRows(), this._alt = new n8.Buffer(false, this._optionsService, this._bufferService), this._activeBuffer = this._normal, this._onBufferActivate.fire({ activeBuffer: this._normal, inactiveBuffer: this._alt }), this.setupTabStops();
          }
          get alt() {
            return this._alt;
          }
          get active() {
            return this._activeBuffer;
          }
          get normal() {
            return this._normal;
          }
          activateNormalBuffer() {
            this._activeBuffer !== this._normal && (this._normal.x = this._alt.x, this._normal.y = this._alt.y, this._alt.clearAllMarkers(), this._alt.clear(), this._activeBuffer = this._normal, this._onBufferActivate.fire({ activeBuffer: this._normal, inactiveBuffer: this._alt }));
          }
          activateAltBuffer(e9) {
            this._activeBuffer !== this._alt && (this._alt.fillViewportRows(e9), this._alt.x = this._normal.x, this._alt.y = this._normal.y, this._activeBuffer = this._alt, this._onBufferActivate.fire({ activeBuffer: this._alt, inactiveBuffer: this._normal }));
          }
          resize(e9, t8) {
            this._normal.resize(e9, t8), this._alt.resize(e9, t8), this.setupTabStops(e9);
          }
          setupTabStops(e9) {
            this._normal.setupTabStops(e9), this._alt.setupTabStops(e9);
          }
        }
        t7.BufferSet = a3;
      }, 511: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.CellData = void 0;
        const s6 = i7(482), r8 = i7(643), n8 = i7(734);
        class a3 extends n8.AttributeData {
          constructor() {
            super(...arguments), this.content = 0, this.fg = 0, this.bg = 0, this.extended = new n8.ExtendedAttrs(), this.combinedData = "";
          }
          static fromCharData(e9) {
            const t8 = new a3();
            return t8.setFromCharData(e9), t8;
          }
          isCombined() {
            return 2097152 & this.content;
          }
          getWidth() {
            return this.content >> 22;
          }
          getChars() {
            return 2097152 & this.content ? this.combinedData : 2097151 & this.content ? (0, s6.stringFromCodePoint)(2097151 & this.content) : "";
          }
          getCode() {
            return this.isCombined() ? this.combinedData.charCodeAt(this.combinedData.length - 1) : 2097151 & this.content;
          }
          setFromCharData(e9) {
            this.fg = e9[r8.CHAR_DATA_ATTR_INDEX], this.bg = 0;
            let t8 = false;
            if (e9[r8.CHAR_DATA_CHAR_INDEX].length > 2) t8 = true;
            else if (2 === e9[r8.CHAR_DATA_CHAR_INDEX].length) {
              const i8 = e9[r8.CHAR_DATA_CHAR_INDEX].charCodeAt(0);
              if (55296 <= i8 && i8 <= 56319) {
                const s7 = e9[r8.CHAR_DATA_CHAR_INDEX].charCodeAt(1);
                56320 <= s7 && s7 <= 57343 ? this.content = 1024 * (i8 - 55296) + s7 - 56320 + 65536 | e9[r8.CHAR_DATA_WIDTH_INDEX] << 22 : t8 = true;
              } else t8 = true;
            } else this.content = e9[r8.CHAR_DATA_CHAR_INDEX].charCodeAt(0) | e9[r8.CHAR_DATA_WIDTH_INDEX] << 22;
            t8 && (this.combinedData = e9[r8.CHAR_DATA_CHAR_INDEX], this.content = 2097152 | e9[r8.CHAR_DATA_WIDTH_INDEX] << 22);
          }
          getAsCharData() {
            return [this.fg, this.getChars(), this.getWidth(), this.getCode()];
          }
        }
        t7.CellData = a3;
      }, 643: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.WHITESPACE_CELL_CODE = t7.WHITESPACE_CELL_WIDTH = t7.WHITESPACE_CELL_CHAR = t7.NULL_CELL_CODE = t7.NULL_CELL_WIDTH = t7.NULL_CELL_CHAR = t7.CHAR_DATA_CODE_INDEX = t7.CHAR_DATA_WIDTH_INDEX = t7.CHAR_DATA_CHAR_INDEX = t7.CHAR_DATA_ATTR_INDEX = t7.DEFAULT_EXT = t7.DEFAULT_ATTR = t7.DEFAULT_COLOR = void 0, t7.DEFAULT_COLOR = 0, t7.DEFAULT_ATTR = 256 | t7.DEFAULT_COLOR << 9, t7.DEFAULT_EXT = 0, t7.CHAR_DATA_ATTR_INDEX = 0, t7.CHAR_DATA_CHAR_INDEX = 1, t7.CHAR_DATA_WIDTH_INDEX = 2, t7.CHAR_DATA_CODE_INDEX = 3, t7.NULL_CELL_CHAR = "", t7.NULL_CELL_WIDTH = 1, t7.NULL_CELL_CODE = 0, t7.WHITESPACE_CELL_CHAR = " ", t7.WHITESPACE_CELL_WIDTH = 1, t7.WHITESPACE_CELL_CODE = 32;
      }, 863: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.Marker = void 0;
        const s6 = i7(460), r8 = i7(844);
        class n8 {
          get id() {
            return this._id;
          }
          constructor(e9) {
            this.line = e9, this.isDisposed = false, this._disposables = [], this._id = n8._nextId++, this._onDispose = this.register(new s6.EventEmitter()), this.onDispose = this._onDispose.event;
          }
          dispose() {
            this.isDisposed || (this.isDisposed = true, this.line = -1, this._onDispose.fire(), (0, r8.disposeArray)(this._disposables), this._disposables.length = 0);
          }
          register(e9) {
            return this._disposables.push(e9), e9;
          }
        }
        t7.Marker = n8, n8._nextId = 1;
      }, 116: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.DEFAULT_CHARSET = t7.CHARSETS = void 0, t7.CHARSETS = {}, t7.DEFAULT_CHARSET = t7.CHARSETS.B, t7.CHARSETS[0] = { "`": "\u25C6", a: "\u2592", b: "\u2409", c: "\u240C", d: "\u240D", e: "\u240A", f: "\xB0", g: "\xB1", h: "\u2424", i: "\u240B", j: "\u2518", k: "\u2510", l: "\u250C", m: "\u2514", n: "\u253C", o: "\u23BA", p: "\u23BB", q: "\u2500", r: "\u23BC", s: "\u23BD", t: "\u251C", u: "\u2524", v: "\u2534", w: "\u252C", x: "\u2502", y: "\u2264", z: "\u2265", "{": "\u03C0", "|": "\u2260", "}": "\xA3", "~": "\xB7" }, t7.CHARSETS.A = { "#": "\xA3" }, t7.CHARSETS.B = void 0, t7.CHARSETS[4] = { "#": "\xA3", "@": "\xBE", "[": "ij", "\\": "\xBD", "]": "|", "{": "\xA8", "|": "f", "}": "\xBC", "~": "\xB4" }, t7.CHARSETS.C = t7.CHARSETS[5] = { "[": "\xC4", "\\": "\xD6", "]": "\xC5", "^": "\xDC", "`": "\xE9", "{": "\xE4", "|": "\xF6", "}": "\xE5", "~": "\xFC" }, t7.CHARSETS.R = { "#": "\xA3", "@": "\xE0", "[": "\xB0", "\\": "\xE7", "]": "\xA7", "{": "\xE9", "|": "\xF9", "}": "\xE8", "~": "\xA8" }, t7.CHARSETS.Q = { "@": "\xE0", "[": "\xE2", "\\": "\xE7", "]": "\xEA", "^": "\xEE", "`": "\xF4", "{": "\xE9", "|": "\xF9", "}": "\xE8", "~": "\xFB" }, t7.CHARSETS.K = { "@": "\xA7", "[": "\xC4", "\\": "\xD6", "]": "\xDC", "{": "\xE4", "|": "\xF6", "}": "\xFC", "~": "\xDF" }, t7.CHARSETS.Y = { "#": "\xA3", "@": "\xA7", "[": "\xB0", "\\": "\xE7", "]": "\xE9", "`": "\xF9", "{": "\xE0", "|": "\xF2", "}": "\xE8", "~": "\xEC" }, t7.CHARSETS.E = t7.CHARSETS[6] = { "@": "\xC4", "[": "\xC6", "\\": "\xD8", "]": "\xC5", "^": "\xDC", "`": "\xE4", "{": "\xE6", "|": "\xF8", "}": "\xE5", "~": "\xFC" }, t7.CHARSETS.Z = { "#": "\xA3", "@": "\xA7", "[": "\xA1", "\\": "\xD1", "]": "\xBF", "{": "\xB0", "|": "\xF1", "}": "\xE7" }, t7.CHARSETS.H = t7.CHARSETS[7] = { "@": "\xC9", "[": "\xC4", "\\": "\xD6", "]": "\xC5", "^": "\xDC", "`": "\xE9", "{": "\xE4", "|": "\xF6", "}": "\xE5", "~": "\xFC" }, t7.CHARSETS["="] = { "#": "\xF9", "@": "\xE0", "[": "\xE9", "\\": "\xE7", "]": "\xEA", "^": "\xEE", _: "\xE8", "`": "\xF4", "{": "\xE4", "|": "\xF6", "}": "\xFC", "~": "\xFB" };
      }, 584: (e8, t7) => {
        var i7, s6, r8;
        Object.defineProperty(t7, "__esModule", { value: true }), t7.C1_ESCAPED = t7.C1 = t7.C0 = void 0, function(e9) {
          e9.NUL = "\0", e9.SOH = "", e9.STX = "", e9.ETX = "", e9.EOT = "", e9.ENQ = "", e9.ACK = "", e9.BEL = "\x07", e9.BS = "\b", e9.HT = "	", e9.LF = "\n", e9.VT = "\v", e9.FF = "\f", e9.CR = "\r", e9.SO = "", e9.SI = "", e9.DLE = "", e9.DC1 = "", e9.DC2 = "", e9.DC3 = "", e9.DC4 = "", e9.NAK = "", e9.SYN = "", e9.ETB = "", e9.CAN = "", e9.EM = "", e9.SUB = "", e9.ESC = "\x1B", e9.FS = "", e9.GS = "", e9.RS = "", e9.US = "", e9.SP = " ", e9.DEL = "\x7F";
        }(i7 || (t7.C0 = i7 = {})), function(e9) {
          e9.PAD = "\x80", e9.HOP = "\x81", e9.BPH = "\x82", e9.NBH = "\x83", e9.IND = "\x84", e9.NEL = "\x85", e9.SSA = "\x86", e9.ESA = "\x87", e9.HTS = "\x88", e9.HTJ = "\x89", e9.VTS = "\x8A", e9.PLD = "\x8B", e9.PLU = "\x8C", e9.RI = "\x8D", e9.SS2 = "\x8E", e9.SS3 = "\x8F", e9.DCS = "\x90", e9.PU1 = "\x91", e9.PU2 = "\x92", e9.STS = "\x93", e9.CCH = "\x94", e9.MW = "\x95", e9.SPA = "\x96", e9.EPA = "\x97", e9.SOS = "\x98", e9.SGCI = "\x99", e9.SCI = "\x9A", e9.CSI = "\x9B", e9.ST = "\x9C", e9.OSC = "\x9D", e9.PM = "\x9E", e9.APC = "\x9F";
        }(s6 || (t7.C1 = s6 = {})), function(e9) {
          e9.ST = `${i7.ESC}\\`;
        }(r8 || (t7.C1_ESCAPED = r8 = {}));
      }, 482: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.Utf8ToUtf32 = t7.StringToUtf32 = t7.utf32ToString = t7.stringFromCodePoint = void 0, t7.stringFromCodePoint = function(e9) {
          return e9 > 65535 ? (e9 -= 65536, String.fromCharCode(55296 + (e9 >> 10)) + String.fromCharCode(e9 % 1024 + 56320)) : String.fromCharCode(e9);
        }, t7.utf32ToString = function(e9, t8 = 0, i7 = e9.length) {
          let s6 = "";
          for (let r8 = t8; r8 < i7; ++r8) {
            let t9 = e9[r8];
            t9 > 65535 ? (t9 -= 65536, s6 += String.fromCharCode(55296 + (t9 >> 10)) + String.fromCharCode(t9 % 1024 + 56320)) : s6 += String.fromCharCode(t9);
          }
          return s6;
        }, t7.StringToUtf32 = class {
          constructor() {
            this._interim = 0;
          }
          clear() {
            this._interim = 0;
          }
          decode(e9, t8) {
            const i7 = e9.length;
            if (!i7) return 0;
            let s6 = 0, r8 = 0;
            if (this._interim) {
              const i8 = e9.charCodeAt(r8++);
              56320 <= i8 && i8 <= 57343 ? t8[s6++] = 1024 * (this._interim - 55296) + i8 - 56320 + 65536 : (t8[s6++] = this._interim, t8[s6++] = i8), this._interim = 0;
            }
            for (let n8 = r8; n8 < i7; ++n8) {
              const r9 = e9.charCodeAt(n8);
              if (55296 <= r9 && r9 <= 56319) {
                if (++n8 >= i7) return this._interim = r9, s6;
                const a3 = e9.charCodeAt(n8);
                56320 <= a3 && a3 <= 57343 ? t8[s6++] = 1024 * (r9 - 55296) + a3 - 56320 + 65536 : (t8[s6++] = r9, t8[s6++] = a3);
              } else 65279 !== r9 && (t8[s6++] = r9);
            }
            return s6;
          }
        }, t7.Utf8ToUtf32 = class {
          constructor() {
            this.interim = new Uint8Array(3);
          }
          clear() {
            this.interim.fill(0);
          }
          decode(e9, t8) {
            const i7 = e9.length;
            if (!i7) return 0;
            let s6, r8, n8, a3, o8 = 0, h5 = 0, c5 = 0;
            if (this.interim[0]) {
              let s7 = false, r9 = this.interim[0];
              r9 &= 192 == (224 & r9) ? 31 : 224 == (240 & r9) ? 15 : 7;
              let n9, a4 = 0;
              for (; (n9 = 63 & this.interim[++a4]) && a4 < 4; ) r9 <<= 6, r9 |= n9;
              const h6 = 192 == (224 & this.interim[0]) ? 2 : 224 == (240 & this.interim[0]) ? 3 : 4, l4 = h6 - a4;
              for (; c5 < l4; ) {
                if (c5 >= i7) return 0;
                if (n9 = e9[c5++], 128 != (192 & n9)) {
                  c5--, s7 = true;
                  break;
                }
                this.interim[a4++] = n9, r9 <<= 6, r9 |= 63 & n9;
              }
              s7 || (2 === h6 ? r9 < 128 ? c5-- : t8[o8++] = r9 : 3 === h6 ? r9 < 2048 || r9 >= 55296 && r9 <= 57343 || 65279 === r9 || (t8[o8++] = r9) : r9 < 65536 || r9 > 1114111 || (t8[o8++] = r9)), this.interim.fill(0);
            }
            const l3 = i7 - 4;
            let _2 = c5;
            for (; _2 < i7; ) {
              for (; !(!(_2 < l3) || 128 & (s6 = e9[_2]) || 128 & (r8 = e9[_2 + 1]) || 128 & (n8 = e9[_2 + 2]) || 128 & (a3 = e9[_2 + 3])); ) t8[o8++] = s6, t8[o8++] = r8, t8[o8++] = n8, t8[o8++] = a3, _2 += 4;
              if (s6 = e9[_2++], s6 < 128) t8[o8++] = s6;
              else if (192 == (224 & s6)) {
                if (_2 >= i7) return this.interim[0] = s6, o8;
                if (r8 = e9[_2++], 128 != (192 & r8)) {
                  _2--;
                  continue;
                }
                if (h5 = (31 & s6) << 6 | 63 & r8, h5 < 128) {
                  _2--;
                  continue;
                }
                t8[o8++] = h5;
              } else if (224 == (240 & s6)) {
                if (_2 >= i7) return this.interim[0] = s6, o8;
                if (r8 = e9[_2++], 128 != (192 & r8)) {
                  _2--;
                  continue;
                }
                if (_2 >= i7) return this.interim[0] = s6, this.interim[1] = r8, o8;
                if (n8 = e9[_2++], 128 != (192 & n8)) {
                  _2--;
                  continue;
                }
                if (h5 = (15 & s6) << 12 | (63 & r8) << 6 | 63 & n8, h5 < 2048 || h5 >= 55296 && h5 <= 57343 || 65279 === h5) continue;
                t8[o8++] = h5;
              } else if (240 == (248 & s6)) {
                if (_2 >= i7) return this.interim[0] = s6, o8;
                if (r8 = e9[_2++], 128 != (192 & r8)) {
                  _2--;
                  continue;
                }
                if (_2 >= i7) return this.interim[0] = s6, this.interim[1] = r8, o8;
                if (n8 = e9[_2++], 128 != (192 & n8)) {
                  _2--;
                  continue;
                }
                if (_2 >= i7) return this.interim[0] = s6, this.interim[1] = r8, this.interim[2] = n8, o8;
                if (a3 = e9[_2++], 128 != (192 & a3)) {
                  _2--;
                  continue;
                }
                if (h5 = (7 & s6) << 18 | (63 & r8) << 12 | (63 & n8) << 6 | 63 & a3, h5 < 65536 || h5 > 1114111) continue;
                t8[o8++] = h5;
              }
            }
            return o8;
          }
        };
      }, 225: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.UnicodeV6 = void 0;
        const s6 = i7(480), r8 = [[768, 879], [1155, 1158], [1160, 1161], [1425, 1469], [1471, 1471], [1473, 1474], [1476, 1477], [1479, 1479], [1536, 1539], [1552, 1557], [1611, 1630], [1648, 1648], [1750, 1764], [1767, 1768], [1770, 1773], [1807, 1807], [1809, 1809], [1840, 1866], [1958, 1968], [2027, 2035], [2305, 2306], [2364, 2364], [2369, 2376], [2381, 2381], [2385, 2388], [2402, 2403], [2433, 2433], [2492, 2492], [2497, 2500], [2509, 2509], [2530, 2531], [2561, 2562], [2620, 2620], [2625, 2626], [2631, 2632], [2635, 2637], [2672, 2673], [2689, 2690], [2748, 2748], [2753, 2757], [2759, 2760], [2765, 2765], [2786, 2787], [2817, 2817], [2876, 2876], [2879, 2879], [2881, 2883], [2893, 2893], [2902, 2902], [2946, 2946], [3008, 3008], [3021, 3021], [3134, 3136], [3142, 3144], [3146, 3149], [3157, 3158], [3260, 3260], [3263, 3263], [3270, 3270], [3276, 3277], [3298, 3299], [3393, 3395], [3405, 3405], [3530, 3530], [3538, 3540], [3542, 3542], [3633, 3633], [3636, 3642], [3655, 3662], [3761, 3761], [3764, 3769], [3771, 3772], [3784, 3789], [3864, 3865], [3893, 3893], [3895, 3895], [3897, 3897], [3953, 3966], [3968, 3972], [3974, 3975], [3984, 3991], [3993, 4028], [4038, 4038], [4141, 4144], [4146, 4146], [4150, 4151], [4153, 4153], [4184, 4185], [4448, 4607], [4959, 4959], [5906, 5908], [5938, 5940], [5970, 5971], [6002, 6003], [6068, 6069], [6071, 6077], [6086, 6086], [6089, 6099], [6109, 6109], [6155, 6157], [6313, 6313], [6432, 6434], [6439, 6440], [6450, 6450], [6457, 6459], [6679, 6680], [6912, 6915], [6964, 6964], [6966, 6970], [6972, 6972], [6978, 6978], [7019, 7027], [7616, 7626], [7678, 7679], [8203, 8207], [8234, 8238], [8288, 8291], [8298, 8303], [8400, 8431], [12330, 12335], [12441, 12442], [43014, 43014], [43019, 43019], [43045, 43046], [64286, 64286], [65024, 65039], [65056, 65059], [65279, 65279], [65529, 65531]], n8 = [[68097, 68099], [68101, 68102], [68108, 68111], [68152, 68154], [68159, 68159], [119143, 119145], [119155, 119170], [119173, 119179], [119210, 119213], [119362, 119364], [917505, 917505], [917536, 917631], [917760, 917999]];
        let a3;
        t7.UnicodeV6 = class {
          constructor() {
            if (this.version = "6", !a3) {
              a3 = new Uint8Array(65536), a3.fill(1), a3[0] = 0, a3.fill(0, 1, 32), a3.fill(0, 127, 160), a3.fill(2, 4352, 4448), a3[9001] = 2, a3[9002] = 2, a3.fill(2, 11904, 42192), a3[12351] = 1, a3.fill(2, 44032, 55204), a3.fill(2, 63744, 64256), a3.fill(2, 65040, 65050), a3.fill(2, 65072, 65136), a3.fill(2, 65280, 65377), a3.fill(2, 65504, 65511);
              for (let e9 = 0; e9 < r8.length; ++e9) a3.fill(0, r8[e9][0], r8[e9][1] + 1);
            }
          }
          wcwidth(e9) {
            return e9 < 32 ? 0 : e9 < 127 ? 1 : e9 < 65536 ? a3[e9] : function(e10, t8) {
              let i8, s7 = 0, r9 = t8.length - 1;
              if (e10 < t8[0][0] || e10 > t8[r9][1]) return false;
              for (; r9 >= s7; ) if (i8 = s7 + r9 >> 1, e10 > t8[i8][1]) s7 = i8 + 1;
              else {
                if (!(e10 < t8[i8][0])) return true;
                r9 = i8 - 1;
              }
              return false;
            }(e9, n8) ? 0 : e9 >= 131072 && e9 <= 196605 || e9 >= 196608 && e9 <= 262141 ? 2 : 1;
          }
          charProperties(e9, t8) {
            let i8 = this.wcwidth(e9), r9 = 0 === i8 && 0 !== t8;
            if (r9) {
              const e10 = s6.UnicodeService.extractWidth(t8);
              0 === e10 ? r9 = false : e10 > i8 && (i8 = e10);
            }
            return s6.UnicodeService.createPropertyValue(0, i8, r9);
          }
        };
      }, 981: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.WriteBuffer = void 0;
        const s6 = i7(460), r8 = i7(844);
        class n8 extends r8.Disposable {
          constructor(e9) {
            super(), this._action = e9, this._writeBuffer = [], this._callbacks = [], this._pendingData = 0, this._bufferOffset = 0, this._isSyncWriting = false, this._syncCalls = 0, this._didUserInput = false, this._onWriteParsed = this.register(new s6.EventEmitter()), this.onWriteParsed = this._onWriteParsed.event;
          }
          handleUserInput() {
            this._didUserInput = true;
          }
          writeSync(e9, t8) {
            if (void 0 !== t8 && this._syncCalls > t8) return void (this._syncCalls = 0);
            if (this._pendingData += e9.length, this._writeBuffer.push(e9), this._callbacks.push(void 0), this._syncCalls++, this._isSyncWriting) return;
            let i8;
            for (this._isSyncWriting = true; i8 = this._writeBuffer.shift(); ) {
              this._action(i8);
              const e10 = this._callbacks.shift();
              e10 && e10();
            }
            this._pendingData = 0, this._bufferOffset = 2147483647, this._isSyncWriting = false, this._syncCalls = 0;
          }
          write(e9, t8) {
            if (this._pendingData > 5e7) throw new Error("write data discarded, use flow control to avoid losing data");
            if (!this._writeBuffer.length) {
              if (this._bufferOffset = 0, this._didUserInput) return this._didUserInput = false, this._pendingData += e9.length, this._writeBuffer.push(e9), this._callbacks.push(t8), void this._innerWrite();
              setTimeout(() => this._innerWrite());
            }
            this._pendingData += e9.length, this._writeBuffer.push(e9), this._callbacks.push(t8);
          }
          _innerWrite(e9 = 0, t8 = true) {
            const i8 = e9 || Date.now();
            for (; this._writeBuffer.length > this._bufferOffset; ) {
              const e10 = this._writeBuffer[this._bufferOffset], s7 = this._action(e10, t8);
              if (s7) {
                const e11 = (e12) => Date.now() - i8 >= 12 ? setTimeout(() => this._innerWrite(0, e12)) : this._innerWrite(i8, e12);
                return void s7.catch((e12) => (queueMicrotask(() => {
                  throw e12;
                }), Promise.resolve(false))).then(e11);
              }
              const r9 = this._callbacks[this._bufferOffset];
              if (r9 && r9(), this._bufferOffset++, this._pendingData -= e10.length, Date.now() - i8 >= 12) break;
            }
            this._writeBuffer.length > this._bufferOffset ? (this._bufferOffset > 50 && (this._writeBuffer = this._writeBuffer.slice(this._bufferOffset), this._callbacks = this._callbacks.slice(this._bufferOffset), this._bufferOffset = 0), setTimeout(() => this._innerWrite())) : (this._writeBuffer.length = 0, this._callbacks.length = 0, this._pendingData = 0, this._bufferOffset = 0), this._onWriteParsed.fire();
          }
        }
        t7.WriteBuffer = n8;
      }, 941: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.toRgbString = t7.parseColor = void 0;
        const i7 = /^([\da-f])\/([\da-f])\/([\da-f])$|^([\da-f]{2})\/([\da-f]{2})\/([\da-f]{2})$|^([\da-f]{3})\/([\da-f]{3})\/([\da-f]{3})$|^([\da-f]{4})\/([\da-f]{4})\/([\da-f]{4})$/, s6 = /^[\da-f]+$/;
        function r8(e9, t8) {
          const i8 = e9.toString(16), s7 = i8.length < 2 ? "0" + i8 : i8;
          switch (t8) {
            case 4:
              return i8[0];
            case 8:
              return s7;
            case 12:
              return (s7 + s7).slice(0, 3);
            default:
              return s7 + s7;
          }
        }
        t7.parseColor = function(e9) {
          if (!e9) return;
          let t8 = e9.toLowerCase();
          if (0 === t8.indexOf("rgb:")) {
            t8 = t8.slice(4);
            const e10 = i7.exec(t8);
            if (e10) {
              const t9 = e10[1] ? 15 : e10[4] ? 255 : e10[7] ? 4095 : 65535;
              return [Math.round(parseInt(e10[1] || e10[4] || e10[7] || e10[10], 16) / t9 * 255), Math.round(parseInt(e10[2] || e10[5] || e10[8] || e10[11], 16) / t9 * 255), Math.round(parseInt(e10[3] || e10[6] || e10[9] || e10[12], 16) / t9 * 255)];
            }
          } else if (0 === t8.indexOf("#") && (t8 = t8.slice(1), s6.exec(t8) && [3, 6, 9, 12].includes(t8.length))) {
            const e10 = t8.length / 3, i8 = [0, 0, 0];
            for (let s7 = 0; s7 < 3; ++s7) {
              const r9 = parseInt(t8.slice(e10 * s7, e10 * s7 + e10), 16);
              i8[s7] = 1 === e10 ? r9 << 4 : 2 === e10 ? r9 : 3 === e10 ? r9 >> 4 : r9 >> 8;
            }
            return i8;
          }
        }, t7.toRgbString = function(e9, t8 = 16) {
          const [i8, s7, n8] = e9;
          return `rgb:${r8(i8, t8)}/${r8(s7, t8)}/${r8(n8, t8)}`;
        };
      }, 770: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.PAYLOAD_LIMIT = void 0, t7.PAYLOAD_LIMIT = 1e7;
      }, 351: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.DcsHandler = t7.DcsParser = void 0;
        const s6 = i7(482), r8 = i7(742), n8 = i7(770), a3 = [];
        t7.DcsParser = class {
          constructor() {
            this._handlers = /* @__PURE__ */ Object.create(null), this._active = a3, this._ident = 0, this._handlerFb = () => {
            }, this._stack = { paused: false, loopPosition: 0, fallThrough: false };
          }
          dispose() {
            this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = () => {
            }, this._active = a3;
          }
          registerHandler(e9, t8) {
            void 0 === this._handlers[e9] && (this._handlers[e9] = []);
            const i8 = this._handlers[e9];
            return i8.push(t8), { dispose: () => {
              const e10 = i8.indexOf(t8);
              -1 !== e10 && i8.splice(e10, 1);
            } };
          }
          clearHandler(e9) {
            this._handlers[e9] && delete this._handlers[e9];
          }
          setHandlerFallback(e9) {
            this._handlerFb = e9;
          }
          reset() {
            if (this._active.length) for (let e9 = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e9 >= 0; --e9) this._active[e9].unhook(false);
            this._stack.paused = false, this._active = a3, this._ident = 0;
          }
          hook(e9, t8) {
            if (this.reset(), this._ident = e9, this._active = this._handlers[e9] || a3, this._active.length) for (let e10 = this._active.length - 1; e10 >= 0; e10--) this._active[e10].hook(t8);
            else this._handlerFb(this._ident, "HOOK", t8);
          }
          put(e9, t8, i8) {
            if (this._active.length) for (let s7 = this._active.length - 1; s7 >= 0; s7--) this._active[s7].put(e9, t8, i8);
            else this._handlerFb(this._ident, "PUT", (0, s6.utf32ToString)(e9, t8, i8));
          }
          unhook(e9, t8 = true) {
            if (this._active.length) {
              let i8 = false, s7 = this._active.length - 1, r9 = false;
              if (this._stack.paused && (s7 = this._stack.loopPosition - 1, i8 = t8, r9 = this._stack.fallThrough, this._stack.paused = false), !r9 && false === i8) {
                for (; s7 >= 0 && (i8 = this._active[s7].unhook(e9), true !== i8); s7--) if (i8 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s7, this._stack.fallThrough = false, i8;
                s7--;
              }
              for (; s7 >= 0; s7--) if (i8 = this._active[s7].unhook(false), i8 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s7, this._stack.fallThrough = true, i8;
            } else this._handlerFb(this._ident, "UNHOOK", e9);
            this._active = a3, this._ident = 0;
          }
        };
        const o8 = new r8.Params();
        o8.addParam(0), t7.DcsHandler = class {
          constructor(e9) {
            this._handler = e9, this._data = "", this._params = o8, this._hitLimit = false;
          }
          hook(e9) {
            this._params = e9.length > 1 || e9.params[0] ? e9.clone() : o8, this._data = "", this._hitLimit = false;
          }
          put(e9, t8, i8) {
            this._hitLimit || (this._data += (0, s6.utf32ToString)(e9, t8, i8), this._data.length > n8.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
          }
          unhook(e9) {
            let t8 = false;
            if (this._hitLimit) t8 = false;
            else if (e9 && (t8 = this._handler(this._data, this._params), t8 instanceof Promise)) return t8.then((e10) => (this._params = o8, this._data = "", this._hitLimit = false, e10));
            return this._params = o8, this._data = "", this._hitLimit = false, t8;
          }
        };
      }, 15: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.EscapeSequenceParser = t7.VT500_TRANSITION_TABLE = t7.TransitionTable = void 0;
        const s6 = i7(844), r8 = i7(742), n8 = i7(242), a3 = i7(351);
        class o8 {
          constructor(e9) {
            this.table = new Uint8Array(e9);
          }
          setDefault(e9, t8) {
            this.table.fill(e9 << 4 | t8);
          }
          add(e9, t8, i8, s7) {
            this.table[t8 << 8 | e9] = i8 << 4 | s7;
          }
          addMany(e9, t8, i8, s7) {
            for (let r9 = 0; r9 < e9.length; r9++) this.table[t8 << 8 | e9[r9]] = i8 << 4 | s7;
          }
        }
        t7.TransitionTable = o8;
        const h5 = 160;
        t7.VT500_TRANSITION_TABLE = function() {
          const e9 = new o8(4095), t8 = Array.apply(null, Array(256)).map((e10, t9) => t9), i8 = (e10, i9) => t8.slice(e10, i9), s7 = i8(32, 127), r9 = i8(0, 24);
          r9.push(25), r9.push.apply(r9, i8(28, 32));
          const n9 = i8(0, 14);
          let a4;
          for (a4 in e9.setDefault(1, 0), e9.addMany(s7, 0, 2, 0), n9) e9.addMany([24, 26, 153, 154], a4, 3, 0), e9.addMany(i8(128, 144), a4, 3, 0), e9.addMany(i8(144, 152), a4, 3, 0), e9.add(156, a4, 0, 0), e9.add(27, a4, 11, 1), e9.add(157, a4, 4, 8), e9.addMany([152, 158, 159], a4, 0, 7), e9.add(155, a4, 11, 3), e9.add(144, a4, 11, 9);
          return e9.addMany(r9, 0, 3, 0), e9.addMany(r9, 1, 3, 1), e9.add(127, 1, 0, 1), e9.addMany(r9, 8, 0, 8), e9.addMany(r9, 3, 3, 3), e9.add(127, 3, 0, 3), e9.addMany(r9, 4, 3, 4), e9.add(127, 4, 0, 4), e9.addMany(r9, 6, 3, 6), e9.addMany(r9, 5, 3, 5), e9.add(127, 5, 0, 5), e9.addMany(r9, 2, 3, 2), e9.add(127, 2, 0, 2), e9.add(93, 1, 4, 8), e9.addMany(s7, 8, 5, 8), e9.add(127, 8, 5, 8), e9.addMany([156, 27, 24, 26, 7], 8, 6, 0), e9.addMany(i8(28, 32), 8, 0, 8), e9.addMany([88, 94, 95], 1, 0, 7), e9.addMany(s7, 7, 0, 7), e9.addMany(r9, 7, 0, 7), e9.add(156, 7, 0, 0), e9.add(127, 7, 0, 7), e9.add(91, 1, 11, 3), e9.addMany(i8(64, 127), 3, 7, 0), e9.addMany(i8(48, 60), 3, 8, 4), e9.addMany([60, 61, 62, 63], 3, 9, 4), e9.addMany(i8(48, 60), 4, 8, 4), e9.addMany(i8(64, 127), 4, 7, 0), e9.addMany([60, 61, 62, 63], 4, 0, 6), e9.addMany(i8(32, 64), 6, 0, 6), e9.add(127, 6, 0, 6), e9.addMany(i8(64, 127), 6, 0, 0), e9.addMany(i8(32, 48), 3, 9, 5), e9.addMany(i8(32, 48), 5, 9, 5), e9.addMany(i8(48, 64), 5, 0, 6), e9.addMany(i8(64, 127), 5, 7, 0), e9.addMany(i8(32, 48), 4, 9, 5), e9.addMany(i8(32, 48), 1, 9, 2), e9.addMany(i8(32, 48), 2, 9, 2), e9.addMany(i8(48, 127), 2, 10, 0), e9.addMany(i8(48, 80), 1, 10, 0), e9.addMany(i8(81, 88), 1, 10, 0), e9.addMany([89, 90, 92], 1, 10, 0), e9.addMany(i8(96, 127), 1, 10, 0), e9.add(80, 1, 11, 9), e9.addMany(r9, 9, 0, 9), e9.add(127, 9, 0, 9), e9.addMany(i8(28, 32), 9, 0, 9), e9.addMany(i8(32, 48), 9, 9, 12), e9.addMany(i8(48, 60), 9, 8, 10), e9.addMany([60, 61, 62, 63], 9, 9, 10), e9.addMany(r9, 11, 0, 11), e9.addMany(i8(32, 128), 11, 0, 11), e9.addMany(i8(28, 32), 11, 0, 11), e9.addMany(r9, 10, 0, 10), e9.add(127, 10, 0, 10), e9.addMany(i8(28, 32), 10, 0, 10), e9.addMany(i8(48, 60), 10, 8, 10), e9.addMany([60, 61, 62, 63], 10, 0, 11), e9.addMany(i8(32, 48), 10, 9, 12), e9.addMany(r9, 12, 0, 12), e9.add(127, 12, 0, 12), e9.addMany(i8(28, 32), 12, 0, 12), e9.addMany(i8(32, 48), 12, 9, 12), e9.addMany(i8(48, 64), 12, 0, 11), e9.addMany(i8(64, 127), 12, 12, 13), e9.addMany(i8(64, 127), 10, 12, 13), e9.addMany(i8(64, 127), 9, 12, 13), e9.addMany(r9, 13, 13, 13), e9.addMany(s7, 13, 13, 13), e9.add(127, 13, 0, 13), e9.addMany([27, 156, 24, 26], 13, 14, 0), e9.add(h5, 0, 2, 0), e9.add(h5, 8, 5, 8), e9.add(h5, 6, 0, 6), e9.add(h5, 11, 0, 11), e9.add(h5, 13, 13, 13), e9;
        }();
        class c5 extends s6.Disposable {
          constructor(e9 = t7.VT500_TRANSITION_TABLE) {
            super(), this._transitions = e9, this._parseStack = { state: 0, handlers: [], handlerPos: 0, transition: 0, chunkPos: 0 }, this.initialState = 0, this.currentState = this.initialState, this._params = new r8.Params(), this._params.addParam(0), this._collect = 0, this.precedingJoinState = 0, this._printHandlerFb = (e10, t8, i8) => {
            }, this._executeHandlerFb = (e10) => {
            }, this._csiHandlerFb = (e10, t8) => {
            }, this._escHandlerFb = (e10) => {
            }, this._errorHandlerFb = (e10) => e10, this._printHandler = this._printHandlerFb, this._executeHandlers = /* @__PURE__ */ Object.create(null), this._csiHandlers = /* @__PURE__ */ Object.create(null), this._escHandlers = /* @__PURE__ */ Object.create(null), this.register((0, s6.toDisposable)(() => {
              this._csiHandlers = /* @__PURE__ */ Object.create(null), this._executeHandlers = /* @__PURE__ */ Object.create(null), this._escHandlers = /* @__PURE__ */ Object.create(null);
            })), this._oscParser = this.register(new n8.OscParser()), this._dcsParser = this.register(new a3.DcsParser()), this._errorHandler = this._errorHandlerFb, this.registerEscHandler({ final: "\\" }, () => true);
          }
          _identifier(e9, t8 = [64, 126]) {
            let i8 = 0;
            if (e9.prefix) {
              if (e9.prefix.length > 1) throw new Error("only one byte as prefix supported");
              if (i8 = e9.prefix.charCodeAt(0), i8 && 60 > i8 || i8 > 63) throw new Error("prefix must be in range 0x3c .. 0x3f");
            }
            if (e9.intermediates) {
              if (e9.intermediates.length > 2) throw new Error("only two bytes as intermediates are supported");
              for (let t9 = 0; t9 < e9.intermediates.length; ++t9) {
                const s8 = e9.intermediates.charCodeAt(t9);
                if (32 > s8 || s8 > 47) throw new Error("intermediate must be in range 0x20 .. 0x2f");
                i8 <<= 8, i8 |= s8;
              }
            }
            if (1 !== e9.final.length) throw new Error("final must be a single byte");
            const s7 = e9.final.charCodeAt(0);
            if (t8[0] > s7 || s7 > t8[1]) throw new Error(`final must be in range ${t8[0]} .. ${t8[1]}`);
            return i8 <<= 8, i8 |= s7, i8;
          }
          identToString(e9) {
            const t8 = [];
            for (; e9; ) t8.push(String.fromCharCode(255 & e9)), e9 >>= 8;
            return t8.reverse().join("");
          }
          setPrintHandler(e9) {
            this._printHandler = e9;
          }
          clearPrintHandler() {
            this._printHandler = this._printHandlerFb;
          }
          registerEscHandler(e9, t8) {
            const i8 = this._identifier(e9, [48, 126]);
            void 0 === this._escHandlers[i8] && (this._escHandlers[i8] = []);
            const s7 = this._escHandlers[i8];
            return s7.push(t8), { dispose: () => {
              const e10 = s7.indexOf(t8);
              -1 !== e10 && s7.splice(e10, 1);
            } };
          }
          clearEscHandler(e9) {
            this._escHandlers[this._identifier(e9, [48, 126])] && delete this._escHandlers[this._identifier(e9, [48, 126])];
          }
          setEscHandlerFallback(e9) {
            this._escHandlerFb = e9;
          }
          setExecuteHandler(e9, t8) {
            this._executeHandlers[e9.charCodeAt(0)] = t8;
          }
          clearExecuteHandler(e9) {
            this._executeHandlers[e9.charCodeAt(0)] && delete this._executeHandlers[e9.charCodeAt(0)];
          }
          setExecuteHandlerFallback(e9) {
            this._executeHandlerFb = e9;
          }
          registerCsiHandler(e9, t8) {
            const i8 = this._identifier(e9);
            void 0 === this._csiHandlers[i8] && (this._csiHandlers[i8] = []);
            const s7 = this._csiHandlers[i8];
            return s7.push(t8), { dispose: () => {
              const e10 = s7.indexOf(t8);
              -1 !== e10 && s7.splice(e10, 1);
            } };
          }
          clearCsiHandler(e9) {
            this._csiHandlers[this._identifier(e9)] && delete this._csiHandlers[this._identifier(e9)];
          }
          setCsiHandlerFallback(e9) {
            this._csiHandlerFb = e9;
          }
          registerDcsHandler(e9, t8) {
            return this._dcsParser.registerHandler(this._identifier(e9), t8);
          }
          clearDcsHandler(e9) {
            this._dcsParser.clearHandler(this._identifier(e9));
          }
          setDcsHandlerFallback(e9) {
            this._dcsParser.setHandlerFallback(e9);
          }
          registerOscHandler(e9, t8) {
            return this._oscParser.registerHandler(e9, t8);
          }
          clearOscHandler(e9) {
            this._oscParser.clearHandler(e9);
          }
          setOscHandlerFallback(e9) {
            this._oscParser.setHandlerFallback(e9);
          }
          setErrorHandler(e9) {
            this._errorHandler = e9;
          }
          clearErrorHandler() {
            this._errorHandler = this._errorHandlerFb;
          }
          reset() {
            this.currentState = this.initialState, this._oscParser.reset(), this._dcsParser.reset(), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingJoinState = 0, 0 !== this._parseStack.state && (this._parseStack.state = 2, this._parseStack.handlers = []);
          }
          _preserveStack(e9, t8, i8, s7, r9) {
            this._parseStack.state = e9, this._parseStack.handlers = t8, this._parseStack.handlerPos = i8, this._parseStack.transition = s7, this._parseStack.chunkPos = r9;
          }
          parse(e9, t8, i8) {
            let s7, r9 = 0, n9 = 0, a4 = 0;
            if (this._parseStack.state) if (2 === this._parseStack.state) this._parseStack.state = 0, a4 = this._parseStack.chunkPos + 1;
            else {
              if (void 0 === i8 || 1 === this._parseStack.state) throw this._parseStack.state = 1, new Error("improper continuation due to previous async handler, giving up parsing");
              const t9 = this._parseStack.handlers;
              let n10 = this._parseStack.handlerPos - 1;
              switch (this._parseStack.state) {
                case 3:
                  if (false === i8 && n10 > -1) {
                    for (; n10 >= 0 && (s7 = t9[n10](this._params), true !== s7); n10--) if (s7 instanceof Promise) return this._parseStack.handlerPos = n10, s7;
                  }
                  this._parseStack.handlers = [];
                  break;
                case 4:
                  if (false === i8 && n10 > -1) {
                    for (; n10 >= 0 && (s7 = t9[n10](), true !== s7); n10--) if (s7 instanceof Promise) return this._parseStack.handlerPos = n10, s7;
                  }
                  this._parseStack.handlers = [];
                  break;
                case 6:
                  if (r9 = e9[this._parseStack.chunkPos], s7 = this._dcsParser.unhook(24 !== r9 && 26 !== r9, i8), s7) return s7;
                  27 === r9 && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
                  break;
                case 5:
                  if (r9 = e9[this._parseStack.chunkPos], s7 = this._oscParser.end(24 !== r9 && 26 !== r9, i8), s7) return s7;
                  27 === r9 && (this._parseStack.transition |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0;
              }
              this._parseStack.state = 0, a4 = this._parseStack.chunkPos + 1, this.precedingJoinState = 0, this.currentState = 15 & this._parseStack.transition;
            }
            for (let i9 = a4; i9 < t8; ++i9) {
              switch (r9 = e9[i9], n9 = this._transitions.table[this.currentState << 8 | (r9 < 160 ? r9 : h5)], n9 >> 4) {
                case 2:
                  for (let s8 = i9 + 1; ; ++s8) {
                    if (s8 >= t8 || (r9 = e9[s8]) < 32 || r9 > 126 && r9 < h5) {
                      this._printHandler(e9, i9, s8), i9 = s8 - 1;
                      break;
                    }
                    if (++s8 >= t8 || (r9 = e9[s8]) < 32 || r9 > 126 && r9 < h5) {
                      this._printHandler(e9, i9, s8), i9 = s8 - 1;
                      break;
                    }
                    if (++s8 >= t8 || (r9 = e9[s8]) < 32 || r9 > 126 && r9 < h5) {
                      this._printHandler(e9, i9, s8), i9 = s8 - 1;
                      break;
                    }
                    if (++s8 >= t8 || (r9 = e9[s8]) < 32 || r9 > 126 && r9 < h5) {
                      this._printHandler(e9, i9, s8), i9 = s8 - 1;
                      break;
                    }
                  }
                  break;
                case 3:
                  this._executeHandlers[r9] ? this._executeHandlers[r9]() : this._executeHandlerFb(r9), this.precedingJoinState = 0;
                  break;
                case 0:
                  break;
                case 1:
                  if (this._errorHandler({ position: i9, code: r9, currentState: this.currentState, collect: this._collect, params: this._params, abort: false }).abort) return;
                  break;
                case 7:
                  const a5 = this._csiHandlers[this._collect << 8 | r9];
                  let o9 = a5 ? a5.length - 1 : -1;
                  for (; o9 >= 0 && (s7 = a5[o9](this._params), true !== s7); o9--) if (s7 instanceof Promise) return this._preserveStack(3, a5, o9, n9, i9), s7;
                  o9 < 0 && this._csiHandlerFb(this._collect << 8 | r9, this._params), this.precedingJoinState = 0;
                  break;
                case 8:
                  do {
                    switch (r9) {
                      case 59:
                        this._params.addParam(0);
                        break;
                      case 58:
                        this._params.addSubParam(-1);
                        break;
                      default:
                        this._params.addDigit(r9 - 48);
                    }
                  } while (++i9 < t8 && (r9 = e9[i9]) > 47 && r9 < 60);
                  i9--;
                  break;
                case 9:
                  this._collect <<= 8, this._collect |= r9;
                  break;
                case 10:
                  const c6 = this._escHandlers[this._collect << 8 | r9];
                  let l3 = c6 ? c6.length - 1 : -1;
                  for (; l3 >= 0 && (s7 = c6[l3](), true !== s7); l3--) if (s7 instanceof Promise) return this._preserveStack(4, c6, l3, n9, i9), s7;
                  l3 < 0 && this._escHandlerFb(this._collect << 8 | r9), this.precedingJoinState = 0;
                  break;
                case 11:
                  this._params.reset(), this._params.addParam(0), this._collect = 0;
                  break;
                case 12:
                  this._dcsParser.hook(this._collect << 8 | r9, this._params);
                  break;
                case 13:
                  for (let s8 = i9 + 1; ; ++s8) if (s8 >= t8 || 24 === (r9 = e9[s8]) || 26 === r9 || 27 === r9 || r9 > 127 && r9 < h5) {
                    this._dcsParser.put(e9, i9, s8), i9 = s8 - 1;
                    break;
                  }
                  break;
                case 14:
                  if (s7 = this._dcsParser.unhook(24 !== r9 && 26 !== r9), s7) return this._preserveStack(6, [], 0, n9, i9), s7;
                  27 === r9 && (n9 |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingJoinState = 0;
                  break;
                case 4:
                  this._oscParser.start();
                  break;
                case 5:
                  for (let s8 = i9 + 1; ; s8++) if (s8 >= t8 || (r9 = e9[s8]) < 32 || r9 > 127 && r9 < h5) {
                    this._oscParser.put(e9, i9, s8), i9 = s8 - 1;
                    break;
                  }
                  break;
                case 6:
                  if (s7 = this._oscParser.end(24 !== r9 && 26 !== r9), s7) return this._preserveStack(5, [], 0, n9, i9), s7;
                  27 === r9 && (n9 |= 1), this._params.reset(), this._params.addParam(0), this._collect = 0, this.precedingJoinState = 0;
              }
              this.currentState = 15 & n9;
            }
          }
        }
        t7.EscapeSequenceParser = c5;
      }, 242: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.OscHandler = t7.OscParser = void 0;
        const s6 = i7(770), r8 = i7(482), n8 = [];
        t7.OscParser = class {
          constructor() {
            this._state = 0, this._active = n8, this._id = -1, this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = () => {
            }, this._stack = { paused: false, loopPosition: 0, fallThrough: false };
          }
          registerHandler(e9, t8) {
            void 0 === this._handlers[e9] && (this._handlers[e9] = []);
            const i8 = this._handlers[e9];
            return i8.push(t8), { dispose: () => {
              const e10 = i8.indexOf(t8);
              -1 !== e10 && i8.splice(e10, 1);
            } };
          }
          clearHandler(e9) {
            this._handlers[e9] && delete this._handlers[e9];
          }
          setHandlerFallback(e9) {
            this._handlerFb = e9;
          }
          dispose() {
            this._handlers = /* @__PURE__ */ Object.create(null), this._handlerFb = () => {
            }, this._active = n8;
          }
          reset() {
            if (2 === this._state) for (let e9 = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; e9 >= 0; --e9) this._active[e9].end(false);
            this._stack.paused = false, this._active = n8, this._id = -1, this._state = 0;
          }
          _start() {
            if (this._active = this._handlers[this._id] || n8, this._active.length) for (let e9 = this._active.length - 1; e9 >= 0; e9--) this._active[e9].start();
            else this._handlerFb(this._id, "START");
          }
          _put(e9, t8, i8) {
            if (this._active.length) for (let s7 = this._active.length - 1; s7 >= 0; s7--) this._active[s7].put(e9, t8, i8);
            else this._handlerFb(this._id, "PUT", (0, r8.utf32ToString)(e9, t8, i8));
          }
          start() {
            this.reset(), this._state = 1;
          }
          put(e9, t8, i8) {
            if (3 !== this._state) {
              if (1 === this._state) for (; t8 < i8; ) {
                const i9 = e9[t8++];
                if (59 === i9) {
                  this._state = 2, this._start();
                  break;
                }
                if (i9 < 48 || 57 < i9) return void (this._state = 3);
                -1 === this._id && (this._id = 0), this._id = 10 * this._id + i9 - 48;
              }
              2 === this._state && i8 - t8 > 0 && this._put(e9, t8, i8);
            }
          }
          end(e9, t8 = true) {
            if (0 !== this._state) {
              if (3 !== this._state) if (1 === this._state && this._start(), this._active.length) {
                let i8 = false, s7 = this._active.length - 1, r9 = false;
                if (this._stack.paused && (s7 = this._stack.loopPosition - 1, i8 = t8, r9 = this._stack.fallThrough, this._stack.paused = false), !r9 && false === i8) {
                  for (; s7 >= 0 && (i8 = this._active[s7].end(e9), true !== i8); s7--) if (i8 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s7, this._stack.fallThrough = false, i8;
                  s7--;
                }
                for (; s7 >= 0; s7--) if (i8 = this._active[s7].end(false), i8 instanceof Promise) return this._stack.paused = true, this._stack.loopPosition = s7, this._stack.fallThrough = true, i8;
              } else this._handlerFb(this._id, "END", e9);
              this._active = n8, this._id = -1, this._state = 0;
            }
          }
        }, t7.OscHandler = class {
          constructor(e9) {
            this._handler = e9, this._data = "", this._hitLimit = false;
          }
          start() {
            this._data = "", this._hitLimit = false;
          }
          put(e9, t8, i8) {
            this._hitLimit || (this._data += (0, r8.utf32ToString)(e9, t8, i8), this._data.length > s6.PAYLOAD_LIMIT && (this._data = "", this._hitLimit = true));
          }
          end(e9) {
            let t8 = false;
            if (this._hitLimit) t8 = false;
            else if (e9 && (t8 = this._handler(this._data), t8 instanceof Promise)) return t8.then((e10) => (this._data = "", this._hitLimit = false, e10));
            return this._data = "", this._hitLimit = false, t8;
          }
        };
      }, 742: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.Params = void 0;
        const i7 = 2147483647;
        class s6 {
          static fromArray(e9) {
            const t8 = new s6();
            if (!e9.length) return t8;
            for (let i8 = Array.isArray(e9[0]) ? 1 : 0; i8 < e9.length; ++i8) {
              const s7 = e9[i8];
              if (Array.isArray(s7)) for (let e10 = 0; e10 < s7.length; ++e10) t8.addSubParam(s7[e10]);
              else t8.addParam(s7);
            }
            return t8;
          }
          constructor(e9 = 32, t8 = 32) {
            if (this.maxLength = e9, this.maxSubParamsLength = t8, t8 > 256) throw new Error("maxSubParamsLength must not be greater than 256");
            this.params = new Int32Array(e9), this.length = 0, this._subParams = new Int32Array(t8), this._subParamsLength = 0, this._subParamsIdx = new Uint16Array(e9), this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
          }
          clone() {
            const e9 = new s6(this.maxLength, this.maxSubParamsLength);
            return e9.params.set(this.params), e9.length = this.length, e9._subParams.set(this._subParams), e9._subParamsLength = this._subParamsLength, e9._subParamsIdx.set(this._subParamsIdx), e9._rejectDigits = this._rejectDigits, e9._rejectSubDigits = this._rejectSubDigits, e9._digitIsSub = this._digitIsSub, e9;
          }
          toArray() {
            const e9 = [];
            for (let t8 = 0; t8 < this.length; ++t8) {
              e9.push(this.params[t8]);
              const i8 = this._subParamsIdx[t8] >> 8, s7 = 255 & this._subParamsIdx[t8];
              s7 - i8 > 0 && e9.push(Array.prototype.slice.call(this._subParams, i8, s7));
            }
            return e9;
          }
          reset() {
            this.length = 0, this._subParamsLength = 0, this._rejectDigits = false, this._rejectSubDigits = false, this._digitIsSub = false;
          }
          addParam(e9) {
            if (this._digitIsSub = false, this.length >= this.maxLength) this._rejectDigits = true;
            else {
              if (e9 < -1) throw new Error("values lesser than -1 are not allowed");
              this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength, this.params[this.length++] = e9 > i7 ? i7 : e9;
            }
          }
          addSubParam(e9) {
            if (this._digitIsSub = true, this.length) if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) this._rejectSubDigits = true;
            else {
              if (e9 < -1) throw new Error("values lesser than -1 are not allowed");
              this._subParams[this._subParamsLength++] = e9 > i7 ? i7 : e9, this._subParamsIdx[this.length - 1]++;
            }
          }
          hasSubParams(e9) {
            return (255 & this._subParamsIdx[e9]) - (this._subParamsIdx[e9] >> 8) > 0;
          }
          getSubParams(e9) {
            const t8 = this._subParamsIdx[e9] >> 8, i8 = 255 & this._subParamsIdx[e9];
            return i8 - t8 > 0 ? this._subParams.subarray(t8, i8) : null;
          }
          getSubParamsAll() {
            const e9 = {};
            for (let t8 = 0; t8 < this.length; ++t8) {
              const i8 = this._subParamsIdx[t8] >> 8, s7 = 255 & this._subParamsIdx[t8];
              s7 - i8 > 0 && (e9[t8] = this._subParams.slice(i8, s7));
            }
            return e9;
          }
          addDigit(e9) {
            let t8;
            if (this._rejectDigits || !(t8 = this._digitIsSub ? this._subParamsLength : this.length) || this._digitIsSub && this._rejectSubDigits) return;
            const s7 = this._digitIsSub ? this._subParams : this.params, r8 = s7[t8 - 1];
            s7[t8 - 1] = ~r8 ? Math.min(10 * r8 + e9, i7) : e9;
          }
        }
        t7.Params = s6;
      }, 741: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.AddonManager = void 0, t7.AddonManager = class {
          constructor() {
            this._addons = [];
          }
          dispose() {
            for (let e9 = this._addons.length - 1; e9 >= 0; e9--) this._addons[e9].instance.dispose();
          }
          loadAddon(e9, t8) {
            const i7 = { instance: t8, dispose: t8.dispose, isDisposed: false };
            this._addons.push(i7), t8.dispose = () => this._wrappedAddonDispose(i7), t8.activate(e9);
          }
          _wrappedAddonDispose(e9) {
            if (e9.isDisposed) return;
            let t8 = -1;
            for (let i7 = 0; i7 < this._addons.length; i7++) if (this._addons[i7] === e9) {
              t8 = i7;
              break;
            }
            if (-1 === t8) throw new Error("Could not dispose an addon that has not been loaded");
            e9.isDisposed = true, e9.dispose.apply(e9.instance), this._addons.splice(t8, 1);
          }
        };
      }, 771: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.BufferApiView = void 0;
        const s6 = i7(785), r8 = i7(511);
        t7.BufferApiView = class {
          constructor(e9, t8) {
            this._buffer = e9, this.type = t8;
          }
          init(e9) {
            return this._buffer = e9, this;
          }
          get cursorY() {
            return this._buffer.y;
          }
          get cursorX() {
            return this._buffer.x;
          }
          get viewportY() {
            return this._buffer.ydisp;
          }
          get baseY() {
            return this._buffer.ybase;
          }
          get length() {
            return this._buffer.lines.length;
          }
          getLine(e9) {
            const t8 = this._buffer.lines.get(e9);
            if (t8) return new s6.BufferLineApiView(t8);
          }
          getNullCell() {
            return new r8.CellData();
          }
        };
      }, 785: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.BufferLineApiView = void 0;
        const s6 = i7(511);
        t7.BufferLineApiView = class {
          constructor(e9) {
            this._line = e9;
          }
          get isWrapped() {
            return this._line.isWrapped;
          }
          get length() {
            return this._line.length;
          }
          getCell(e9, t8) {
            if (!(e9 < 0 || e9 >= this._line.length)) return t8 ? (this._line.loadCell(e9, t8), t8) : this._line.loadCell(e9, new s6.CellData());
          }
          translateToString(e9, t8, i8) {
            return this._line.translateToString(e9, t8, i8);
          }
        };
      }, 285: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.BufferNamespaceApi = void 0;
        const s6 = i7(771), r8 = i7(460), n8 = i7(844);
        class a3 extends n8.Disposable {
          constructor(e9) {
            super(), this._core = e9, this._onBufferChange = this.register(new r8.EventEmitter()), this.onBufferChange = this._onBufferChange.event, this._normal = new s6.BufferApiView(this._core.buffers.normal, "normal"), this._alternate = new s6.BufferApiView(this._core.buffers.alt, "alternate"), this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));
          }
          get active() {
            if (this._core.buffers.active === this._core.buffers.normal) return this.normal;
            if (this._core.buffers.active === this._core.buffers.alt) return this.alternate;
            throw new Error("Active buffer is neither normal nor alternate");
          }
          get normal() {
            return this._normal.init(this._core.buffers.normal);
          }
          get alternate() {
            return this._alternate.init(this._core.buffers.alt);
          }
        }
        t7.BufferNamespaceApi = a3;
      }, 975: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.ParserApi = void 0, t7.ParserApi = class {
          constructor(e9) {
            this._core = e9;
          }
          registerCsiHandler(e9, t8) {
            return this._core.registerCsiHandler(e9, (e10) => t8(e10.toArray()));
          }
          addCsiHandler(e9, t8) {
            return this.registerCsiHandler(e9, t8);
          }
          registerDcsHandler(e9, t8) {
            return this._core.registerDcsHandler(e9, (e10, i7) => t8(e10, i7.toArray()));
          }
          addDcsHandler(e9, t8) {
            return this.registerDcsHandler(e9, t8);
          }
          registerEscHandler(e9, t8) {
            return this._core.registerEscHandler(e9, t8);
          }
          addEscHandler(e9, t8) {
            return this.registerEscHandler(e9, t8);
          }
          registerOscHandler(e9, t8) {
            return this._core.registerOscHandler(e9, t8);
          }
          addOscHandler(e9, t8) {
            return this.registerOscHandler(e9, t8);
          }
        };
      }, 90: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.UnicodeApi = void 0, t7.UnicodeApi = class {
          constructor(e9) {
            this._core = e9;
          }
          register(e9) {
            this._core.unicodeService.register(e9);
          }
          get versions() {
            return this._core.unicodeService.versions;
          }
          get activeVersion() {
            return this._core.unicodeService.activeVersion;
          }
          set activeVersion(e9) {
            this._core.unicodeService.activeVersion = e9;
          }
        };
      }, 744: function(e8, t7, i7) {
        var s6 = this && this.__decorate || function(e9, t8, i8, s7) {
          var r9, n9 = arguments.length, a4 = n9 < 3 ? t8 : null === s7 ? s7 = Object.getOwnPropertyDescriptor(t8, i8) : s7;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a4 = Reflect.decorate(e9, t8, i8, s7);
          else for (var o9 = e9.length - 1; o9 >= 0; o9--) (r9 = e9[o9]) && (a4 = (n9 < 3 ? r9(a4) : n9 > 3 ? r9(t8, i8, a4) : r9(t8, i8)) || a4);
          return n9 > 3 && a4 && Object.defineProperty(t8, i8, a4), a4;
        }, r8 = this && this.__param || function(e9, t8) {
          return function(i8, s7) {
            t8(i8, s7, e9);
          };
        };
        Object.defineProperty(t7, "__esModule", { value: true }), t7.BufferService = t7.MINIMUM_ROWS = t7.MINIMUM_COLS = void 0;
        const n8 = i7(460), a3 = i7(844), o8 = i7(295), h5 = i7(585);
        t7.MINIMUM_COLS = 2, t7.MINIMUM_ROWS = 1;
        let c5 = t7.BufferService = class extends a3.Disposable {
          get buffer() {
            return this.buffers.active;
          }
          constructor(e9) {
            super(), this.isUserScrolling = false, this._onResize = this.register(new n8.EventEmitter()), this.onResize = this._onResize.event, this._onScroll = this.register(new n8.EventEmitter()), this.onScroll = this._onScroll.event, this.cols = Math.max(e9.rawOptions.cols || 0, t7.MINIMUM_COLS), this.rows = Math.max(e9.rawOptions.rows || 0, t7.MINIMUM_ROWS), this.buffers = this.register(new o8.BufferSet(e9, this));
          }
          resize(e9, t8) {
            this.cols = e9, this.rows = t8, this.buffers.resize(e9, t8), this._onResize.fire({ cols: e9, rows: t8 });
          }
          reset() {
            this.buffers.reset(), this.isUserScrolling = false;
          }
          scroll(e9, t8 = false) {
            const i8 = this.buffer;
            let s7;
            s7 = this._cachedBlankLine, s7 && s7.length === this.cols && s7.getFg(0) === e9.fg && s7.getBg(0) === e9.bg || (s7 = i8.getBlankLine(e9, t8), this._cachedBlankLine = s7), s7.isWrapped = t8;
            const r9 = i8.ybase + i8.scrollTop, n9 = i8.ybase + i8.scrollBottom;
            if (0 === i8.scrollTop) {
              const e10 = i8.lines.isFull;
              n9 === i8.lines.length - 1 ? e10 ? i8.lines.recycle().copyFrom(s7) : i8.lines.push(s7.clone()) : i8.lines.splice(n9 + 1, 0, s7.clone()), e10 ? this.isUserScrolling && (i8.ydisp = Math.max(i8.ydisp - 1, 0)) : (i8.ybase++, this.isUserScrolling || i8.ydisp++);
            } else {
              const e10 = n9 - r9 + 1;
              i8.lines.shiftElements(r9 + 1, e10 - 1, -1), i8.lines.set(n9, s7.clone());
            }
            this.isUserScrolling || (i8.ydisp = i8.ybase), this._onScroll.fire(i8.ydisp);
          }
          scrollLines(e9, t8, i8) {
            const s7 = this.buffer;
            if (e9 < 0) {
              if (0 === s7.ydisp) return;
              this.isUserScrolling = true;
            } else e9 + s7.ydisp >= s7.ybase && (this.isUserScrolling = false);
            const r9 = s7.ydisp;
            s7.ydisp = Math.max(Math.min(s7.ydisp + e9, s7.ybase), 0), r9 !== s7.ydisp && (t8 || this._onScroll.fire(s7.ydisp));
          }
        };
        t7.BufferService = c5 = s6([r8(0, h5.IOptionsService)], c5);
      }, 994: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.CharsetService = void 0, t7.CharsetService = class {
          constructor() {
            this.glevel = 0, this._charsets = [];
          }
          reset() {
            this.charset = void 0, this._charsets = [], this.glevel = 0;
          }
          setgLevel(e9) {
            this.glevel = e9, this.charset = this._charsets[e9];
          }
          setgCharset(e9, t8) {
            this._charsets[e9] = t8, this.glevel === e9 && (this.charset = t8);
          }
        };
      }, 753: function(e8, t7, i7) {
        var s6 = this && this.__decorate || function(e9, t8, i8, s7) {
          var r9, n9 = arguments.length, a4 = n9 < 3 ? t8 : null === s7 ? s7 = Object.getOwnPropertyDescriptor(t8, i8) : s7;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a4 = Reflect.decorate(e9, t8, i8, s7);
          else for (var o9 = e9.length - 1; o9 >= 0; o9--) (r9 = e9[o9]) && (a4 = (n9 < 3 ? r9(a4) : n9 > 3 ? r9(t8, i8, a4) : r9(t8, i8)) || a4);
          return n9 > 3 && a4 && Object.defineProperty(t8, i8, a4), a4;
        }, r8 = this && this.__param || function(e9, t8) {
          return function(i8, s7) {
            t8(i8, s7, e9);
          };
        };
        Object.defineProperty(t7, "__esModule", { value: true }), t7.CoreMouseService = void 0;
        const n8 = i7(585), a3 = i7(460), o8 = i7(844), h5 = { NONE: { events: 0, restrict: () => false }, X10: { events: 1, restrict: (e9) => 4 !== e9.button && 1 === e9.action && (e9.ctrl = false, e9.alt = false, e9.shift = false, true) }, VT200: { events: 19, restrict: (e9) => 32 !== e9.action }, DRAG: { events: 23, restrict: (e9) => 32 !== e9.action || 3 !== e9.button }, ANY: { events: 31, restrict: (e9) => true } };
        function c5(e9, t8) {
          let i8 = (e9.ctrl ? 16 : 0) | (e9.shift ? 4 : 0) | (e9.alt ? 8 : 0);
          return 4 === e9.button ? (i8 |= 64, i8 |= e9.action) : (i8 |= 3 & e9.button, 4 & e9.button && (i8 |= 64), 8 & e9.button && (i8 |= 128), 32 === e9.action ? i8 |= 32 : 0 !== e9.action || t8 || (i8 |= 3)), i8;
        }
        const l3 = String.fromCharCode, _2 = { DEFAULT: (e9) => {
          const t8 = [c5(e9, false) + 32, e9.col + 32, e9.row + 32];
          return t8[0] > 255 || t8[1] > 255 || t8[2] > 255 ? "" : `\x1B[M${l3(t8[0])}${l3(t8[1])}${l3(t8[2])}`;
        }, SGR: (e9) => {
          const t8 = 0 === e9.action && 4 !== e9.button ? "m" : "M";
          return `\x1B[<${c5(e9, true)};${e9.col};${e9.row}${t8}`;
        }, SGR_PIXELS: (e9) => {
          const t8 = 0 === e9.action && 4 !== e9.button ? "m" : "M";
          return `\x1B[<${c5(e9, true)};${e9.x};${e9.y}${t8}`;
        } };
        let d3 = t7.CoreMouseService = class extends o8.Disposable {
          constructor(e9, t8) {
            super(), this._bufferService = e9, this._coreService = t8, this._protocols = {}, this._encodings = {}, this._activeProtocol = "", this._activeEncoding = "", this._lastEvent = null, this._onProtocolChange = this.register(new a3.EventEmitter()), this.onProtocolChange = this._onProtocolChange.event;
            for (const e10 of Object.keys(h5)) this.addProtocol(e10, h5[e10]);
            for (const e10 of Object.keys(_2)) this.addEncoding(e10, _2[e10]);
            this.reset();
          }
          addProtocol(e9, t8) {
            this._protocols[e9] = t8;
          }
          addEncoding(e9, t8) {
            this._encodings[e9] = t8;
          }
          get activeProtocol() {
            return this._activeProtocol;
          }
          get areMouseEventsActive() {
            return 0 !== this._protocols[this._activeProtocol].events;
          }
          set activeProtocol(e9) {
            if (!this._protocols[e9]) throw new Error(`unknown protocol "${e9}"`);
            this._activeProtocol = e9, this._onProtocolChange.fire(this._protocols[e9].events);
          }
          get activeEncoding() {
            return this._activeEncoding;
          }
          set activeEncoding(e9) {
            if (!this._encodings[e9]) throw new Error(`unknown encoding "${e9}"`);
            this._activeEncoding = e9;
          }
          reset() {
            this.activeProtocol = "NONE", this.activeEncoding = "DEFAULT", this._lastEvent = null;
          }
          triggerMouseEvent(e9) {
            if (e9.col < 0 || e9.col >= this._bufferService.cols || e9.row < 0 || e9.row >= this._bufferService.rows) return false;
            if (4 === e9.button && 32 === e9.action) return false;
            if (3 === e9.button && 32 !== e9.action) return false;
            if (4 !== e9.button && (2 === e9.action || 3 === e9.action)) return false;
            if (e9.col++, e9.row++, 32 === e9.action && this._lastEvent && this._equalEvents(this._lastEvent, e9, "SGR_PIXELS" === this._activeEncoding)) return false;
            if (!this._protocols[this._activeProtocol].restrict(e9)) return false;
            const t8 = this._encodings[this._activeEncoding](e9);
            return t8 && ("DEFAULT" === this._activeEncoding ? this._coreService.triggerBinaryEvent(t8) : this._coreService.triggerDataEvent(t8, true)), this._lastEvent = e9, true;
          }
          explainEvents(e9) {
            return { down: !!(1 & e9), up: !!(2 & e9), drag: !!(4 & e9), move: !!(8 & e9), wheel: !!(16 & e9) };
          }
          _equalEvents(e9, t8, i8) {
            if (i8) {
              if (e9.x !== t8.x) return false;
              if (e9.y !== t8.y) return false;
            } else {
              if (e9.col !== t8.col) return false;
              if (e9.row !== t8.row) return false;
            }
            return e9.button === t8.button && e9.action === t8.action && e9.ctrl === t8.ctrl && e9.alt === t8.alt && e9.shift === t8.shift;
          }
        };
        t7.CoreMouseService = d3 = s6([r8(0, n8.IBufferService), r8(1, n8.ICoreService)], d3);
      }, 83: function(e8, t7, i7) {
        var s6 = this && this.__decorate || function(e9, t8, i8, s7) {
          var r9, n9 = arguments.length, a4 = n9 < 3 ? t8 : null === s7 ? s7 = Object.getOwnPropertyDescriptor(t8, i8) : s7;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a4 = Reflect.decorate(e9, t8, i8, s7);
          else for (var o9 = e9.length - 1; o9 >= 0; o9--) (r9 = e9[o9]) && (a4 = (n9 < 3 ? r9(a4) : n9 > 3 ? r9(t8, i8, a4) : r9(t8, i8)) || a4);
          return n9 > 3 && a4 && Object.defineProperty(t8, i8, a4), a4;
        }, r8 = this && this.__param || function(e9, t8) {
          return function(i8, s7) {
            t8(i8, s7, e9);
          };
        };
        Object.defineProperty(t7, "__esModule", { value: true }), t7.CoreService = void 0;
        const n8 = i7(439), a3 = i7(460), o8 = i7(844), h5 = i7(585), c5 = Object.freeze({ insertMode: false }), l3 = Object.freeze({ applicationCursorKeys: false, applicationKeypad: false, bracketedPasteMode: false, origin: false, reverseWraparound: false, sendFocus: false, wraparound: true });
        let _2 = t7.CoreService = class extends o8.Disposable {
          constructor(e9, t8, i8) {
            super(), this._bufferService = e9, this._logService = t8, this._optionsService = i8, this.isCursorInitialized = false, this.isCursorHidden = false, this._onData = this.register(new a3.EventEmitter()), this.onData = this._onData.event, this._onUserInput = this.register(new a3.EventEmitter()), this.onUserInput = this._onUserInput.event, this._onBinary = this.register(new a3.EventEmitter()), this.onBinary = this._onBinary.event, this._onRequestScrollToBottom = this.register(new a3.EventEmitter()), this.onRequestScrollToBottom = this._onRequestScrollToBottom.event, this.modes = (0, n8.clone)(c5), this.decPrivateModes = (0, n8.clone)(l3);
          }
          reset() {
            this.modes = (0, n8.clone)(c5), this.decPrivateModes = (0, n8.clone)(l3);
          }
          triggerDataEvent(e9, t8 = false) {
            if (this._optionsService.rawOptions.disableStdin) return;
            const i8 = this._bufferService.buffer;
            t8 && this._optionsService.rawOptions.scrollOnUserInput && i8.ybase !== i8.ydisp && this._onRequestScrollToBottom.fire(), t8 && this._onUserInput.fire(), this._logService.debug(`sending data "${e9}"`, () => e9.split("").map((e10) => e10.charCodeAt(0))), this._onData.fire(e9);
          }
          triggerBinaryEvent(e9) {
            this._optionsService.rawOptions.disableStdin || (this._logService.debug(`sending binary "${e9}"`, () => e9.split("").map((e10) => e10.charCodeAt(0))), this._onBinary.fire(e9));
          }
        };
        t7.CoreService = _2 = s6([r8(0, h5.IBufferService), r8(1, h5.ILogService), r8(2, h5.IOptionsService)], _2);
      }, 348: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.InstantiationService = t7.ServiceCollection = void 0;
        const s6 = i7(585), r8 = i7(343);
        class n8 {
          constructor(...e9) {
            this._entries = /* @__PURE__ */ new Map();
            for (const [t8, i8] of e9) this.set(t8, i8);
          }
          set(e9, t8) {
            const i8 = this._entries.get(e9);
            return this._entries.set(e9, t8), i8;
          }
          forEach(e9) {
            for (const [t8, i8] of this._entries.entries()) e9(t8, i8);
          }
          has(e9) {
            return this._entries.has(e9);
          }
          get(e9) {
            return this._entries.get(e9);
          }
        }
        t7.ServiceCollection = n8, t7.InstantiationService = class {
          constructor() {
            this._services = new n8(), this._services.set(s6.IInstantiationService, this);
          }
          setService(e9, t8) {
            this._services.set(e9, t8);
          }
          getService(e9) {
            return this._services.get(e9);
          }
          createInstance(e9, ...t8) {
            const i8 = (0, r8.getServiceDependencies)(e9).sort((e10, t9) => e10.index - t9.index), s7 = [];
            for (const t9 of i8) {
              const i9 = this._services.get(t9.id);
              if (!i9) throw new Error(`[createInstance] ${e9.name} depends on UNKNOWN service ${t9.id}.`);
              s7.push(i9);
            }
            const n9 = i8.length > 0 ? i8[0].index : t8.length;
            if (t8.length !== n9) throw new Error(`[createInstance] First service dependency of ${e9.name} at position ${n9 + 1} conflicts with ${t8.length} static arguments`);
            return new e9(...[...t8, ...s7]);
          }
        };
      }, 866: function(e8, t7, i7) {
        var s6 = this && this.__decorate || function(e9, t8, i8, s7) {
          var r9, n9 = arguments.length, a4 = n9 < 3 ? t8 : null === s7 ? s7 = Object.getOwnPropertyDescriptor(t8, i8) : s7;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a4 = Reflect.decorate(e9, t8, i8, s7);
          else for (var o9 = e9.length - 1; o9 >= 0; o9--) (r9 = e9[o9]) && (a4 = (n9 < 3 ? r9(a4) : n9 > 3 ? r9(t8, i8, a4) : r9(t8, i8)) || a4);
          return n9 > 3 && a4 && Object.defineProperty(t8, i8, a4), a4;
        }, r8 = this && this.__param || function(e9, t8) {
          return function(i8, s7) {
            t8(i8, s7, e9);
          };
        };
        Object.defineProperty(t7, "__esModule", { value: true }), t7.traceCall = t7.setTraceLogger = t7.LogService = void 0;
        const n8 = i7(844), a3 = i7(585), o8 = { trace: a3.LogLevelEnum.TRACE, debug: a3.LogLevelEnum.DEBUG, info: a3.LogLevelEnum.INFO, warn: a3.LogLevelEnum.WARN, error: a3.LogLevelEnum.ERROR, off: a3.LogLevelEnum.OFF };
        let h5, c5 = t7.LogService = class extends n8.Disposable {
          get logLevel() {
            return this._logLevel;
          }
          constructor(e9) {
            super(), this._optionsService = e9, this._logLevel = a3.LogLevelEnum.OFF, this._updateLogLevel(), this.register(this._optionsService.onSpecificOptionChange("logLevel", () => this._updateLogLevel())), h5 = this;
          }
          _updateLogLevel() {
            this._logLevel = o8[this._optionsService.rawOptions.logLevel];
          }
          _evalLazyOptionalParams(e9) {
            for (let t8 = 0; t8 < e9.length; t8++) "function" == typeof e9[t8] && (e9[t8] = e9[t8]());
          }
          _log(e9, t8, i8) {
            this._evalLazyOptionalParams(i8), e9.call(console, (this._optionsService.options.logger ? "" : "xterm.js: ") + t8, ...i8);
          }
          trace(e9, ...t8) {
            this._logLevel <= a3.LogLevelEnum.TRACE && this._log(this._optionsService.options.logger?.trace.bind(this._optionsService.options.logger) ?? console.log, e9, t8);
          }
          debug(e9, ...t8) {
            this._logLevel <= a3.LogLevelEnum.DEBUG && this._log(this._optionsService.options.logger?.debug.bind(this._optionsService.options.logger) ?? console.log, e9, t8);
          }
          info(e9, ...t8) {
            this._logLevel <= a3.LogLevelEnum.INFO && this._log(this._optionsService.options.logger?.info.bind(this._optionsService.options.logger) ?? console.info, e9, t8);
          }
          warn(e9, ...t8) {
            this._logLevel <= a3.LogLevelEnum.WARN && this._log(this._optionsService.options.logger?.warn.bind(this._optionsService.options.logger) ?? console.warn, e9, t8);
          }
          error(e9, ...t8) {
            this._logLevel <= a3.LogLevelEnum.ERROR && this._log(this._optionsService.options.logger?.error.bind(this._optionsService.options.logger) ?? console.error, e9, t8);
          }
        };
        t7.LogService = c5 = s6([r8(0, a3.IOptionsService)], c5), t7.setTraceLogger = function(e9) {
          h5 = e9;
        }, t7.traceCall = function(e9, t8, i8) {
          if ("function" != typeof i8.value) throw new Error("not supported");
          const s7 = i8.value;
          i8.value = function(...e10) {
            if (h5.logLevel !== a3.LogLevelEnum.TRACE) return s7.apply(this, e10);
            h5.trace(`GlyphRenderer#${s7.name}(${e10.map((e11) => JSON.stringify(e11)).join(", ")})`);
            const t9 = s7.apply(this, e10);
            return h5.trace(`GlyphRenderer#${s7.name} return`, t9), t9;
          };
        };
      }, 302: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.OptionsService = t7.DEFAULT_OPTIONS = void 0;
        const s6 = i7(460), r8 = i7(844), n8 = i7(114);
        t7.DEFAULT_OPTIONS = { cols: 80, rows: 24, cursorBlink: false, cursorStyle: "block", cursorWidth: 1, cursorInactiveStyle: "outline", customGlyphs: true, drawBoldTextInBrightColors: true, documentOverride: null, fastScrollModifier: "alt", fastScrollSensitivity: 5, fontFamily: "courier-new, courier, monospace", fontSize: 15, fontWeight: "normal", fontWeightBold: "bold", ignoreBracketedPasteMode: false, lineHeight: 1, letterSpacing: 0, linkHandler: null, logLevel: "info", logger: null, scrollback: 1e3, scrollOnUserInput: true, scrollSensitivity: 1, screenReaderMode: false, smoothScrollDuration: 0, macOptionIsMeta: false, macOptionClickForcesSelection: false, minimumContrastRatio: 1, disableStdin: false, allowProposedApi: false, allowTransparency: false, tabStopWidth: 8, theme: {}, rescaleOverlappingGlyphs: false, rightClickSelectsWord: n8.isMac, windowOptions: {}, windowsMode: false, windowsPty: {}, wordSeparator: " ()[]{}',\"`", altClickMovesCursor: true, convertEol: false, termName: "xterm", cancelEvents: false, overviewRulerWidth: 0 };
        const a3 = ["normal", "bold", "100", "200", "300", "400", "500", "600", "700", "800", "900"];
        class o8 extends r8.Disposable {
          constructor(e9) {
            super(), this._onOptionChange = this.register(new s6.EventEmitter()), this.onOptionChange = this._onOptionChange.event;
            const i8 = { ...t7.DEFAULT_OPTIONS };
            for (const t8 in e9) if (t8 in i8) try {
              const s7 = e9[t8];
              i8[t8] = this._sanitizeAndValidateOption(t8, s7);
            } catch (e10) {
              console.error(e10);
            }
            this.rawOptions = i8, this.options = { ...i8 }, this._setupOptions(), this.register((0, r8.toDisposable)(() => {
              this.rawOptions.linkHandler = null, this.rawOptions.documentOverride = null;
            }));
          }
          onSpecificOptionChange(e9, t8) {
            return this.onOptionChange((i8) => {
              i8 === e9 && t8(this.rawOptions[e9]);
            });
          }
          onMultipleOptionChange(e9, t8) {
            return this.onOptionChange((i8) => {
              -1 !== e9.indexOf(i8) && t8();
            });
          }
          _setupOptions() {
            const e9 = (e10) => {
              if (!(e10 in t7.DEFAULT_OPTIONS)) throw new Error(`No option with key "${e10}"`);
              return this.rawOptions[e10];
            }, i8 = (e10, i9) => {
              if (!(e10 in t7.DEFAULT_OPTIONS)) throw new Error(`No option with key "${e10}"`);
              i9 = this._sanitizeAndValidateOption(e10, i9), this.rawOptions[e10] !== i9 && (this.rawOptions[e10] = i9, this._onOptionChange.fire(e10));
            };
            for (const t8 in this.rawOptions) {
              const s7 = { get: e9.bind(this, t8), set: i8.bind(this, t8) };
              Object.defineProperty(this.options, t8, s7);
            }
          }
          _sanitizeAndValidateOption(e9, i8) {
            switch (e9) {
              case "cursorStyle":
                if (i8 || (i8 = t7.DEFAULT_OPTIONS[e9]), !/* @__PURE__ */ function(e10) {
                  return "block" === e10 || "underline" === e10 || "bar" === e10;
                }(i8)) throw new Error(`"${i8}" is not a valid value for ${e9}`);
                break;
              case "wordSeparator":
                i8 || (i8 = t7.DEFAULT_OPTIONS[e9]);
                break;
              case "fontWeight":
              case "fontWeightBold":
                if ("number" == typeof i8 && 1 <= i8 && i8 <= 1e3) break;
                i8 = a3.includes(i8) ? i8 : t7.DEFAULT_OPTIONS[e9];
                break;
              case "cursorWidth":
                i8 = Math.floor(i8);
              case "lineHeight":
              case "tabStopWidth":
                if (i8 < 1) throw new Error(`${e9} cannot be less than 1, value: ${i8}`);
                break;
              case "minimumContrastRatio":
                i8 = Math.max(1, Math.min(21, Math.round(10 * i8) / 10));
                break;
              case "scrollback":
                if ((i8 = Math.min(i8, 4294967295)) < 0) throw new Error(`${e9} cannot be less than 0, value: ${i8}`);
                break;
              case "fastScrollSensitivity":
              case "scrollSensitivity":
                if (i8 <= 0) throw new Error(`${e9} cannot be less than or equal to 0, value: ${i8}`);
                break;
              case "rows":
              case "cols":
                if (!i8 && 0 !== i8) throw new Error(`${e9} must be numeric, value: ${i8}`);
                break;
              case "windowsPty":
                i8 = i8 ?? {};
            }
            return i8;
          }
        }
        t7.OptionsService = o8;
      }, 660: function(e8, t7, i7) {
        var s6 = this && this.__decorate || function(e9, t8, i8, s7) {
          var r9, n9 = arguments.length, a4 = n9 < 3 ? t8 : null === s7 ? s7 = Object.getOwnPropertyDescriptor(t8, i8) : s7;
          if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) a4 = Reflect.decorate(e9, t8, i8, s7);
          else for (var o8 = e9.length - 1; o8 >= 0; o8--) (r9 = e9[o8]) && (a4 = (n9 < 3 ? r9(a4) : n9 > 3 ? r9(t8, i8, a4) : r9(t8, i8)) || a4);
          return n9 > 3 && a4 && Object.defineProperty(t8, i8, a4), a4;
        }, r8 = this && this.__param || function(e9, t8) {
          return function(i8, s7) {
            t8(i8, s7, e9);
          };
        };
        Object.defineProperty(t7, "__esModule", { value: true }), t7.OscLinkService = void 0;
        const n8 = i7(585);
        let a3 = t7.OscLinkService = class {
          constructor(e9) {
            this._bufferService = e9, this._nextId = 1, this._entriesWithId = /* @__PURE__ */ new Map(), this._dataByLinkId = /* @__PURE__ */ new Map();
          }
          registerLink(e9) {
            const t8 = this._bufferService.buffer;
            if (void 0 === e9.id) {
              const i9 = t8.addMarker(t8.ybase + t8.y), s8 = { data: e9, id: this._nextId++, lines: [i9] };
              return i9.onDispose(() => this._removeMarkerFromLink(s8, i9)), this._dataByLinkId.set(s8.id, s8), s8.id;
            }
            const i8 = e9, s7 = this._getEntryIdKey(i8), r9 = this._entriesWithId.get(s7);
            if (r9) return this.addLineToLink(r9.id, t8.ybase + t8.y), r9.id;
            const n9 = t8.addMarker(t8.ybase + t8.y), a4 = { id: this._nextId++, key: this._getEntryIdKey(i8), data: i8, lines: [n9] };
            return n9.onDispose(() => this._removeMarkerFromLink(a4, n9)), this._entriesWithId.set(a4.key, a4), this._dataByLinkId.set(a4.id, a4), a4.id;
          }
          addLineToLink(e9, t8) {
            const i8 = this._dataByLinkId.get(e9);
            if (i8 && i8.lines.every((e10) => e10.line !== t8)) {
              const e10 = this._bufferService.buffer.addMarker(t8);
              i8.lines.push(e10), e10.onDispose(() => this._removeMarkerFromLink(i8, e10));
            }
          }
          getLinkData(e9) {
            return this._dataByLinkId.get(e9)?.data;
          }
          _getEntryIdKey(e9) {
            return `${e9.id};;${e9.uri}`;
          }
          _removeMarkerFromLink(e9, t8) {
            const i8 = e9.lines.indexOf(t8);
            -1 !== i8 && (e9.lines.splice(i8, 1), 0 === e9.lines.length && (void 0 !== e9.data.id && this._entriesWithId.delete(e9.key), this._dataByLinkId.delete(e9.id)));
          }
        };
        t7.OscLinkService = a3 = s6([r8(0, n8.IBufferService)], a3);
      }, 343: (e8, t7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.createDecorator = t7.getServiceDependencies = t7.serviceRegistry = void 0;
        const i7 = "di$target", s6 = "di$dependencies";
        t7.serviceRegistry = /* @__PURE__ */ new Map(), t7.getServiceDependencies = function(e9) {
          return e9[s6] || [];
        }, t7.createDecorator = function(e9) {
          if (t7.serviceRegistry.has(e9)) return t7.serviceRegistry.get(e9);
          const r8 = function(e10, t8, n8) {
            if (3 !== arguments.length) throw new Error("@IServiceName-decorator can only be used to decorate a parameter");
            !function(e11, t9, r9) {
              t9[i7] === t9 ? t9[s6].push({ id: e11, index: r9 }) : (t9[s6] = [{ id: e11, index: r9 }], t9[i7] = t9);
            }(r8, e10, n8);
          };
          return r8.toString = () => e9, t7.serviceRegistry.set(e9, r8), r8;
        };
      }, 585: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.IDecorationService = t7.IUnicodeService = t7.IOscLinkService = t7.IOptionsService = t7.ILogService = t7.LogLevelEnum = t7.IInstantiationService = t7.ICharsetService = t7.ICoreService = t7.ICoreMouseService = t7.IBufferService = void 0;
        const s6 = i7(343);
        var r8;
        t7.IBufferService = (0, s6.createDecorator)("BufferService"), t7.ICoreMouseService = (0, s6.createDecorator)("CoreMouseService"), t7.ICoreService = (0, s6.createDecorator)("CoreService"), t7.ICharsetService = (0, s6.createDecorator)("CharsetService"), t7.IInstantiationService = (0, s6.createDecorator)("InstantiationService"), function(e9) {
          e9[e9.TRACE = 0] = "TRACE", e9[e9.DEBUG = 1] = "DEBUG", e9[e9.INFO = 2] = "INFO", e9[e9.WARN = 3] = "WARN", e9[e9.ERROR = 4] = "ERROR", e9[e9.OFF = 5] = "OFF";
        }(r8 || (t7.LogLevelEnum = r8 = {})), t7.ILogService = (0, s6.createDecorator)("LogService"), t7.IOptionsService = (0, s6.createDecorator)("OptionsService"), t7.IOscLinkService = (0, s6.createDecorator)("OscLinkService"), t7.IUnicodeService = (0, s6.createDecorator)("UnicodeService"), t7.IDecorationService = (0, s6.createDecorator)("DecorationService");
      }, 480: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.UnicodeService = void 0;
        const s6 = i7(460), r8 = i7(225);
        class n8 {
          static extractShouldJoin(e9) {
            return 0 != (1 & e9);
          }
          static extractWidth(e9) {
            return e9 >> 1 & 3;
          }
          static extractCharKind(e9) {
            return e9 >> 3;
          }
          static createPropertyValue(e9, t8, i8 = false) {
            return (16777215 & e9) << 3 | (3 & t8) << 1 | (i8 ? 1 : 0);
          }
          constructor() {
            this._providers = /* @__PURE__ */ Object.create(null), this._active = "", this._onChange = new s6.EventEmitter(), this.onChange = this._onChange.event;
            const e9 = new r8.UnicodeV6();
            this.register(e9), this._active = e9.version, this._activeProvider = e9;
          }
          dispose() {
            this._onChange.dispose();
          }
          get versions() {
            return Object.keys(this._providers);
          }
          get activeVersion() {
            return this._active;
          }
          set activeVersion(e9) {
            if (!this._providers[e9]) throw new Error(`unknown Unicode version "${e9}"`);
            this._active = e9, this._activeProvider = this._providers[e9], this._onChange.fire(e9);
          }
          register(e9) {
            this._providers[e9.version] = e9;
          }
          wcwidth(e9) {
            return this._activeProvider.wcwidth(e9);
          }
          getStringCellWidth(e9) {
            let t8 = 0, i8 = 0;
            const s7 = e9.length;
            for (let r9 = 0; r9 < s7; ++r9) {
              let a3 = e9.charCodeAt(r9);
              if (55296 <= a3 && a3 <= 56319) {
                if (++r9 >= s7) return t8 + this.wcwidth(a3);
                const i9 = e9.charCodeAt(r9);
                56320 <= i9 && i9 <= 57343 ? a3 = 1024 * (a3 - 55296) + i9 - 56320 + 65536 : t8 += this.wcwidth(i9);
              }
              const o8 = this.charProperties(a3, i8);
              let h5 = n8.extractWidth(o8);
              n8.extractShouldJoin(o8) && (h5 -= n8.extractWidth(i8)), t8 += h5, i8 = o8;
            }
            return t8;
          }
          charProperties(e9, t8) {
            return this._activeProvider.charProperties(e9, t8);
          }
        }
        t7.UnicodeService = n8;
      }, 781: (e8, t7, i7) => {
        Object.defineProperty(t7, "__esModule", { value: true }), t7.Terminal = void 0;
        const s6 = i7(437), r8 = i7(969), n8 = i7(460);
        class a3 extends r8.CoreTerminal {
          constructor(e9 = {}) {
            super(e9), this._onBell = this.register(new n8.EventEmitter()), this.onBell = this._onBell.event, this._onCursorMove = this.register(new n8.EventEmitter()), this.onCursorMove = this._onCursorMove.event, this._onTitleChange = this.register(new n8.EventEmitter()), this.onTitleChange = this._onTitleChange.event, this._onA11yCharEmitter = this.register(new n8.EventEmitter()), this.onA11yChar = this._onA11yCharEmitter.event, this._onA11yTabEmitter = this.register(new n8.EventEmitter()), this.onA11yTab = this._onA11yTabEmitter.event, this._setup(), this.register(this._inputHandler.onRequestBell(() => this.bell())), this.register(this._inputHandler.onRequestReset(() => this.reset())), this.register((0, n8.forwardEvent)(this._inputHandler.onCursorMove, this._onCursorMove)), this.register((0, n8.forwardEvent)(this._inputHandler.onTitleChange, this._onTitleChange)), this.register((0, n8.forwardEvent)(this._inputHandler.onA11yChar, this._onA11yCharEmitter)), this.register((0, n8.forwardEvent)(this._inputHandler.onA11yTab, this._onA11yTabEmitter));
          }
          get buffer() {
            return this.buffers.active;
          }
          get markers() {
            return this.buffer.markers;
          }
          addMarker(e9) {
            if (this.buffer === this.buffers.normal) return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + e9);
          }
          bell() {
            this._onBell.fire();
          }
          input(e9, t8 = true) {
            this.coreService.triggerDataEvent(e9, t8);
          }
          resize(e9, t8) {
            e9 === this.cols && t8 === this.rows || super.resize(e9, t8);
          }
          clear() {
            if (0 !== this.buffer.ybase || 0 !== this.buffer.y) {
              this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)), this.buffer.lines.length = 1, this.buffer.ydisp = 0, this.buffer.ybase = 0, this.buffer.y = 0;
              for (let e9 = 1; e9 < this.rows; e9++) this.buffer.lines.push(this.buffer.getBlankLine(s6.DEFAULT_ATTR_DATA));
              this._onScroll.fire({ position: this.buffer.ydisp, source: 0 });
            }
          }
          reset() {
            this.options.rows = this.rows, this.options.cols = this.cols, this._setup(), super.reset();
          }
        }
        t7.Terminal = a3;
      } }, t6 = {};
      function i6(s6) {
        var r8 = t6[s6];
        if (void 0 !== r8) return r8.exports;
        var n8 = t6[s6] = { exports: {} };
        return e7[s6].call(n8.exports, n8, n8.exports, i6), n8.exports;
      }
      var s5 = {};
      (() => {
        var e8 = s5;
        Object.defineProperty(e8, "__esModule", { value: true }), e8.Terminal = void 0;
        const t7 = i6(285), r8 = i6(975), n8 = i6(90), a3 = i6(781), o8 = i6(741), h5 = i6(844), c5 = ["cols", "rows"];
        class l3 extends h5.Disposable {
          constructor(e9) {
            super(), this._core = this.register(new a3.Terminal(e9)), this._addonManager = this.register(new o8.AddonManager()), this._publicOptions = { ...this._core.options };
            const t8 = (e10) => this._core.options[e10], i7 = (e10, t9) => {
              this._checkReadonlyOptions(e10), this._core.options[e10] = t9;
            };
            for (const e10 in this._core.options) {
              Object.defineProperty(this._publicOptions, e10, { get: () => this._core.options[e10], set: (t9) => {
                this._checkReadonlyOptions(e10), this._core.options[e10] = t9;
              } });
              const s6 = { get: t8.bind(this, e10), set: i7.bind(this, e10) };
              Object.defineProperty(this._publicOptions, e10, s6);
            }
          }
          _checkReadonlyOptions(e9) {
            if (c5.includes(e9)) throw new Error(`Option "${e9}" can only be set in the constructor`);
          }
          _checkProposedApi() {
            if (!this._core.optionsService.options.allowProposedApi) throw new Error("You must set the allowProposedApi option to true to use proposed API");
          }
          get onBell() {
            return this._core.onBell;
          }
          get onBinary() {
            return this._core.onBinary;
          }
          get onCursorMove() {
            return this._core.onCursorMove;
          }
          get onData() {
            return this._core.onData;
          }
          get onLineFeed() {
            return this._core.onLineFeed;
          }
          get onResize() {
            return this._core.onResize;
          }
          get onScroll() {
            return this._core.onScroll;
          }
          get onTitleChange() {
            return this._core.onTitleChange;
          }
          get parser() {
            return this._checkProposedApi(), this._parser || (this._parser = new r8.ParserApi(this._core)), this._parser;
          }
          get unicode() {
            return this._checkProposedApi(), new n8.UnicodeApi(this._core);
          }
          get rows() {
            return this._core.rows;
          }
          get cols() {
            return this._core.cols;
          }
          get buffer() {
            return this._checkProposedApi(), this._buffer || (this._buffer = this.register(new t7.BufferNamespaceApi(this._core))), this._buffer;
          }
          get markers() {
            return this._checkProposedApi(), this._core.markers;
          }
          get modes() {
            const e9 = this._core.coreService.decPrivateModes;
            let t8 = "none";
            switch (this._core.coreMouseService.activeProtocol) {
              case "X10":
                t8 = "x10";
                break;
              case "VT200":
                t8 = "vt200";
                break;
              case "DRAG":
                t8 = "drag";
                break;
              case "ANY":
                t8 = "any";
            }
            return { applicationCursorKeysMode: e9.applicationCursorKeys, applicationKeypadMode: e9.applicationKeypad, bracketedPasteMode: e9.bracketedPasteMode, insertMode: this._core.coreService.modes.insertMode, mouseTrackingMode: t8, originMode: e9.origin, reverseWraparoundMode: e9.reverseWraparound, sendFocusMode: e9.sendFocus, wraparoundMode: e9.wraparound };
          }
          get options() {
            return this._publicOptions;
          }
          set options(e9) {
            for (const t8 in e9) this._publicOptions[t8] = e9[t8];
          }
          input(e9, t8 = true) {
            this._core.input(e9, t8);
          }
          resize(e9, t8) {
            this._verifyIntegers(e9, t8), this._core.resize(e9, t8);
          }
          registerMarker(e9 = 0) {
            return this._checkProposedApi(), this._verifyIntegers(e9), this._core.addMarker(e9);
          }
          addMarker(e9) {
            return this.registerMarker(e9);
          }
          dispose() {
            super.dispose();
          }
          scrollLines(e9) {
            this._verifyIntegers(e9), this._core.scrollLines(e9);
          }
          scrollPages(e9) {
            this._verifyIntegers(e9), this._core.scrollPages(e9);
          }
          scrollToTop() {
            this._core.scrollToTop();
          }
          scrollToBottom() {
            this._core.scrollToBottom();
          }
          scrollToLine(e9) {
            this._verifyIntegers(e9), this._core.scrollToLine(e9);
          }
          clear() {
            this._core.clear();
          }
          write(e9, t8) {
            this._core.write(e9, t8);
          }
          writeln(e9, t8) {
            this._core.write(e9), this._core.write("\r\n", t8);
          }
          reset() {
            this._core.reset();
          }
          loadAddon(e9) {
            this._addonManager.loadAddon(this, e9);
          }
          _verifyIntegers(...e9) {
            for (const t8 of e9) if (t8 === 1 / 0 || isNaN(t8) || t8 % 1 != 0) throw new Error("This API only accepts integers");
          }
        }
        e8.Terminal = l3;
      })();
      var r7 = exports;
      for (var n7 in s5) r7[n7] = s5[n7];
      s5.__esModule && Object.defineProperty(r7, "__esModule", { value: true });
    })();
  }
});

// src/shared/types.ts
var init_types = __esm({
  "src/shared/types.ts"() {
  }
});

// src/client/services/ssh-agent.ts
var cryptoSubtle, _BrowserSSHAgent, BrowserSSHAgent;
var init_ssh_agent = __esm({
  "src/client/services/ssh-agent.ts"() {
    if (globalThis.crypto?.subtle) {
      cryptoSubtle = globalThis.crypto.subtle;
    }
    _BrowserSSHAgent = class _BrowserSSHAgent {
      constructor(customStorageKey) {
        this.keys = /* @__PURE__ */ new Map();
        this.cryptoErrorShown = false;
        this.storageKey = customStorageKey || _BrowserSSHAgent.DEFAULT_STORAGE_KEY;
        this.loadKeysFromStorage();
      }
      /**
       * Check if Web Crypto API is available and show error if not
       */
      ensureCryptoAvailable() {
        if (!cryptoSubtle) {
          if (!this.cryptoErrorShown) {
            this.showCryptoError();
            this.cryptoErrorShown = true;
          }
          throw new Error("Web Crypto API is not available");
        }
      }
      /**
       * Show user-friendly error banner for crypto unavailability
       */
      showCryptoError() {
        if (!document.body) {
          console.error("Web Crypto API not available and DOM not ready to show error");
          return;
        }
        const hostname = window.location.hostname;
        const isLocalNetwork = hostname.match(/^(192\.168\.|10\.|172\.(1[6-9]|2[0-9]|3[0-1])\.)/);
        const isNonLocalhost = hostname !== "localhost" && hostname !== "127.0.0.1";
        let errorMessage = "SSH key operations are unavailable because the Web Crypto API is not accessible.\n\n";
        if (isLocalNetwork || isNonLocalhost && window.location.protocol === "http:") {
          if (isLocalNetwork && window.location.protocol === "https:") {
            errorMessage += "Even though you're using HTTPS, browsers block the Web Crypto API on local network IPs.\n\n";
          } else {
            errorMessage += "This happens when accessing VibeTunnel over HTTP from non-localhost addresses.\n\n";
          }
          errorMessage += "To fix this, use one of these methods:\n";
          errorMessage += "1. Access via http://localhost:4020 instead\n";
          errorMessage += "   - Use SSH tunnel: ssh -L 4020:localhost:4020 user@server\n";
          errorMessage += "2. Enable HTTPS on the server (recommended for production)\n";
          errorMessage += "3. For Chrome: Enable insecure origins at chrome://flags/#unsafely-treat-insecure-origin-as-secure\n";
          errorMessage += "   - Add your server URL (e.g., http://192.168.1.100:4020)\n";
          errorMessage += "   - Restart Chrome after changing the flag\n";
          errorMessage += "   - Note: Firefox also enforces these restrictions since v75";
        } else {
          errorMessage += "Your browser may not support the Web Crypto API or it may be disabled.\n";
          errorMessage += "Please use a modern browser (Chrome 60+, Firefox 75+, Safari 11+).";
        }
        if (!document.querySelector("#crypto-error-style")) {
          const style = document.createElement("style");
          style.id = "crypto-error-style";
          style.textContent = `
        .crypto-error-banner {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          background: #dc2626;
          color: white;
          padding: 16px;
          z-index: 9999;
          font-family: monospace;
          white-space: pre-wrap;
          box-shadow: 0 2px 10px rgba(0,0,0,0.3);
        }
      `;
          document.head.appendChild(style);
        }
        if (!document.querySelector(".crypto-error-banner")) {
          const banner = document.createElement("div");
          banner.className = "crypto-error-banner";
          banner.textContent = errorMessage;
          document.body.appendChild(banner);
        }
      }
      /**
       * Check if agent is ready (always true since no unlock needed)
       */
      isUnlocked() {
        return true;
      }
      /**
       * Add SSH private key to the agent
       */
      async addKey(name, privateKeyPEM) {
        this.ensureCryptoAvailable();
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        try {
          const keyData = await this.parsePrivateKey(privateKeyPEM);
          const keyId = this.generateKeyId();
          const sshKey = {
            id: keyId,
            name,
            publicKey: keyData.publicKey,
            privateKey: privateKeyPEM,
            algorithm: "Ed25519",
            encrypted: keyData.encrypted,
            fingerprint: keyData.fingerprint,
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          };
          this.keys.set(keyId, sshKey);
          this.saveKeysToStorage();
          return keyId;
        } catch (error) {
          throw new Error(`Failed to add SSH key: ${error}`);
        }
      }
      /**
       * Remove SSH key from agent
       */
      removeKey(keyId) {
        this.keys.delete(keyId);
        this.saveKeysToStorage();
      }
      /**
       * List all SSH keys
       */
      listKeys() {
        return Array.from(this.keys.values()).map((key) => ({
          id: key.id,
          name: key.name,
          publicKey: key.publicKey,
          algorithm: key.algorithm,
          encrypted: key.encrypted,
          fingerprint: key.fingerprint,
          createdAt: key.createdAt
        }));
      }
      /**
       * Sign data with a specific SSH key
       */
      async sign(keyId, data) {
        this.ensureCryptoAvailable();
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        const key = this.keys.get(keyId);
        if (!key) {
          throw new Error("SSH key not found");
        }
        if (!key.privateKey) {
          throw new Error("Private key not available for signing");
        }
        try {
          let privateKeyPEM = key.privateKey;
          if (key.encrypted) {
            const password = await this.promptForPassword(key.name);
            if (!password) {
              throw new Error("Password required for encrypted key");
            }
            privateKeyPEM = await this.decryptPrivateKey(key.privateKey, password);
          }
          const privateKey = await this.importPrivateKey(privateKeyPEM, key.algorithm);
          const dataBuffer = this.base64ToArrayBuffer(data);
          const signature = await cryptoSubtle.sign({ name: "Ed25519" }, privateKey, dataBuffer);
          return {
            signature: this.arrayBufferToBase64(signature),
            algorithm: key.algorithm
          };
        } catch (error) {
          throw new Error(`Failed to sign data: ${error}`);
        }
      }
      /**
       * Generate SSH key pair in the browser
       */
      async generateKeyPair(name, password) {
        this.ensureCryptoAvailable();
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        console.log(`\u{1F511} SSH Agent: Starting Ed25519 key generation for "${name}"`);
        try {
          const keyPair = await cryptoSubtle.generateKey(
            {
              name: "Ed25519"
            },
            true,
            ["sign", "verify"]
          );
          const cryptoKeyPair = keyPair;
          const privateKeyBuffer = await cryptoSubtle.exportKey("pkcs8", cryptoKeyPair.privateKey);
          const publicKeyBuffer = await cryptoSubtle.exportKey("raw", cryptoKeyPair.publicKey);
          let privateKeyPEM = this.arrayBufferToPEM(privateKeyBuffer, "PRIVATE KEY");
          const publicKeySSH = this.convertEd25519ToSSHPublicKey(publicKeyBuffer);
          const isEncrypted = !!password;
          if (password) {
            privateKeyPEM = await this.encryptPrivateKey(privateKeyPEM, password);
          }
          const keyId = this.generateKeyId();
          const sshKey = {
            id: keyId,
            name,
            publicKey: publicKeySSH,
            privateKey: privateKeyPEM,
            algorithm: "Ed25519",
            encrypted: isEncrypted,
            fingerprint: await this.generateFingerprint(publicKeySSH),
            createdAt: (/* @__PURE__ */ new Date()).toISOString()
          };
          this.keys.set(keyId, sshKey);
          await this.saveKeysToStorage();
          console.log(`\u{1F511} SSH Agent: Key "${name}" generated successfully with ID: ${keyId}`);
          return { keyId, privateKeyPEM };
        } catch (error) {
          throw new Error(`Failed to generate key pair: ${error}`);
        }
      }
      /**
       * Export public key in SSH format
       */
      getPublicKey(keyId) {
        const key = this.keys.get(keyId);
        return key ? key.publicKey : null;
      }
      /**
       * Get private key for a specific key ID
       */
      getPrivateKey(keyId) {
        const key = this.keys.get(keyId);
        return key ? key.privateKey : null;
      }
      // Private helper methods
      async parsePrivateKey(privateKeyPEM) {
        const isEncrypted = privateKeyPEM.includes("BEGIN ENCRYPTED PRIVATE KEY") || privateKeyPEM.includes("Proc-Type: 4,ENCRYPTED");
        if (privateKeyPEM.includes("BEGIN PRIVATE KEY") || privateKeyPEM.includes("BEGIN ENCRYPTED PRIVATE KEY")) {
          const mockPublicKey = "ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIImported...";
          return {
            publicKey: mockPublicKey,
            algorithm: "Ed25519",
            fingerprint: await this.generateFingerprint(mockPublicKey),
            encrypted: isEncrypted
          };
        }
        throw new Error("Only Ed25519 private keys are supported");
      }
      async importPrivateKey(privateKeyPEM, _algorithm) {
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        const pemContents = privateKeyPEM.replace("-----BEGIN PRIVATE KEY-----", "").replace("-----END PRIVATE KEY-----", "").replace(/\s/g, "");
        const keyData = this.base64ToArrayBuffer(pemContents);
        return cryptoSubtle.importKey(
          "pkcs8",
          keyData,
          {
            name: "Ed25519"
          },
          false,
          ["sign"]
        );
      }
      convertEd25519ToSSHPublicKey(publicKeyBuffer) {
        const publicKeyBytes = new Uint8Array(publicKeyBuffer);
        const keyType = "ssh-ed25519";
        const keyTypeBytes = new TextEncoder().encode(keyType);
        const buffer = new ArrayBuffer(4 + keyTypeBytes.length + 4 + publicKeyBytes.length);
        const view = new DataView(buffer);
        const bytes = new Uint8Array(buffer);
        let offset = 0;
        view.setUint32(offset, keyTypeBytes.length, false);
        offset += 4;
        bytes.set(keyTypeBytes, offset);
        offset += keyTypeBytes.length;
        view.setUint32(offset, publicKeyBytes.length, false);
        offset += 4;
        bytes.set(publicKeyBytes, offset);
        const base64Key = this.arrayBufferToBase64(buffer);
        return `ssh-ed25519 ${base64Key}`;
      }
      async generateFingerprint(publicKey) {
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        const encoder = new TextEncoder();
        const hash = await cryptoSubtle.digest("SHA-256", encoder.encode(publicKey));
        return this.arrayBufferToBase64(hash).substring(0, 16);
      }
      generateKeyId() {
        return window.crypto.randomUUID();
      }
      arrayBufferToBase64(buffer) {
        const bytes = new Uint8Array(buffer);
        let binary = "";
        for (let i6 = 0; i6 < bytes.length; i6++) {
          binary += String.fromCharCode(bytes[i6]);
        }
        return btoa(binary);
      }
      base64ToArrayBuffer(base64) {
        const binary = atob(base64);
        const bytes = new Uint8Array(binary.length);
        for (let i6 = 0; i6 < binary.length; i6++) {
          bytes[i6] = binary.charCodeAt(i6);
        }
        return bytes.buffer;
      }
      arrayBufferToPEM(buffer, type) {
        const base64 = this.arrayBufferToBase64(buffer);
        const lines = base64.match(/.{1,64}/g) || [];
        return `-----BEGIN ${type}-----
${lines.join("\n")}
-----END ${type}-----`;
      }
      async loadKeysFromStorage() {
        try {
          const keysData = localStorage.getItem(this.storageKey);
          if (keysData) {
            const keys = JSON.parse(keysData);
            this.keys.clear();
            keys.forEach((key) => this.keys.set(key.id, key));
          }
        } catch (error) {
          console.error("Failed to load SSH keys from storage:", error);
        }
      }
      async saveKeysToStorage() {
        try {
          const keysArray = Array.from(this.keys.values());
          localStorage.setItem(this.storageKey, JSON.stringify(keysArray));
        } catch (error) {
          console.error("Failed to save SSH keys to storage:", error);
        }
      }
      /**
       * Encrypt private key with password using Web Crypto API
       */
      async encryptPrivateKey(privateKeyPEM, password) {
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        const encoder = new TextEncoder();
        const data = encoder.encode(privateKeyPEM);
        const passwordKey = await cryptoSubtle.importKey(
          "raw",
          encoder.encode(password),
          { name: "PBKDF2" },
          false,
          ["deriveKey"]
        );
        const salt = crypto.getRandomValues(new Uint8Array(16));
        const encryptionKey = await cryptoSubtle.deriveKey(
          {
            name: "PBKDF2",
            salt,
            iterations: 1e5,
            hash: "SHA-256"
          },
          passwordKey,
          { name: "AES-GCM", length: 256 },
          false,
          ["encrypt"]
        );
        const iv = crypto.getRandomValues(new Uint8Array(12));
        const encryptedData = await cryptoSubtle.encrypt({ name: "AES-GCM", iv }, encryptionKey, data);
        const combined = new Uint8Array(salt.length + iv.length + encryptedData.byteLength);
        combined.set(salt, 0);
        combined.set(iv, salt.length);
        combined.set(new Uint8Array(encryptedData), salt.length + iv.length);
        return `-----BEGIN ENCRYPTED PRIVATE KEY-----
${this.arrayBufferToBase64(combined.buffer)}
-----END ENCRYPTED PRIVATE KEY-----`;
      }
      /**
       * Decrypt private key with password
       */
      async decryptPrivateKey(encryptedPrivateKeyPEM, password) {
        if (!cryptoSubtle) {
          throw new Error("Crypto not available");
        }
        const base64Data = encryptedPrivateKeyPEM.replace("-----BEGIN ENCRYPTED PRIVATE KEY-----", "").replace("-----END ENCRYPTED PRIVATE KEY-----", "").replace(/\s/g, "");
        const combinedData = this.base64ToArrayBuffer(base64Data);
        const combined = new Uint8Array(combinedData);
        const salt = combined.slice(0, 16);
        const iv = combined.slice(16, 28);
        const encryptedData = combined.slice(28);
        const encoder = new TextEncoder();
        const passwordKey = await cryptoSubtle.importKey(
          "raw",
          encoder.encode(password),
          { name: "PBKDF2" },
          false,
          ["deriveKey"]
        );
        const encryptionKey = await cryptoSubtle.deriveKey(
          {
            name: "PBKDF2",
            salt,
            iterations: 1e5,
            hash: "SHA-256"
          },
          passwordKey,
          { name: "AES-GCM", length: 256 },
          false,
          ["decrypt"]
        );
        const decryptedData = await cryptoSubtle.decrypt(
          { name: "AES-GCM", iv },
          encryptionKey,
          encryptedData
        );
        const decoder = new TextDecoder();
        return decoder.decode(decryptedData);
      }
      /**
       * Prompt user for password using browser dialog
       */
      async promptForPassword(keyName) {
        return window.prompt(`Enter password for SSH key "${keyName}":`);
      }
    };
    _BrowserSSHAgent.DEFAULT_STORAGE_KEY = "vibetunnel_ssh_keys";
    BrowserSSHAgent = _BrowserSSHAgent;
  }
});

// src/client/services/auth-client.ts
var auth_client_exports = {};
__export(auth_client_exports, {
  AuthClient: () => AuthClient,
  authClient: () => authClient
});
var logger, _AuthClient, AuthClient, authClient;
var init_auth_client = __esm({
  "src/client/services/auth-client.ts"() {
    init_types();
    init_logger();
    init_ssh_agent();
    logger = createLogger("auth-client");
    _AuthClient = class _AuthClient {
      constructor() {
        this.currentUser = null;
        this.sshAgent = new BrowserSSHAgent();
        this.loadCurrentUser();
      }
      /**
       * Get SSH agent instance
       */
      getSSHAgent() {
        return this.sshAgent;
      }
      /**
       * Check if user is authenticated
       */
      isAuthenticated() {
        return this.currentUser !== null && this.isTokenValid();
      }
      /**
       * Get current user info
       */
      getCurrentUser() {
        return this.currentUser;
      }
      /**
       * Get current system user from server
       */
      async getCurrentSystemUser() {
        try {
          const response = await fetch("/api/auth/current-user");
          if (response.ok) {
            const data = await response.json();
            return data.userId;
          }
          throw new Error("Failed to get current user");
        } catch (error) {
          logger.error("Failed to get current system user:", error);
          throw error;
        }
      }
      /**
       * Get user avatar (macOS returns base64, others get generic)
       */
      async getUserAvatar(userId) {
        try {
          const response = await fetch(`/api/auth/avatar/${userId}`);
          if (response.ok) {
            const data = await response.json();
            if (data.avatar) {
              if (data.avatar.startsWith("data:")) {
                return data.avatar;
              }
            }
          }
        } catch (error) {
          logger.error("Failed to get user avatar:", error);
        }
        const computedStyle = getComputedStyle(document.documentElement);
        const bgColor = computedStyle.getPropertyValue("--color-text-dim").trim().split(" ").map((v2) => Number.parseInt(v2));
        const fgColor = computedStyle.getPropertyValue("--color-text-muted").trim().split(" ").map((v2) => Number.parseInt(v2));
        const bgColorStr = `rgb(${bgColor.join(", ")})`;
        const fgColorStr = `rgb(${fgColor.join(", ")})`;
        return "data:image/svg+xml;base64," + btoa(`
      <svg width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="24" cy="24" r="24" fill="${bgColorStr}"/>
        <circle cx="24" cy="18" r="8" fill="${fgColorStr}"/>
        <path d="M8 38c0-8.837 7.163-16 16-16s16 7.163 16 16" fill="${fgColorStr}"/>
      </svg>
    `);
      }
      /**
       * Authenticate using SSH key (priority method)
       */
      async authenticateWithSSHKey(userId, keyId) {
        try {
          if (!this.sshAgent.isUnlocked()) {
            return { success: false, error: "SSH agent is locked" };
          }
          const challenge = await this.createChallenge(userId);
          const signatureResult = await this.sshAgent.sign(keyId, challenge.challenge);
          const publicKey = this.sshAgent.getPublicKey(keyId);
          if (!publicKey) {
            return { success: false, error: "SSH key not found" };
          }
          const response = await fetch("/api/auth/ssh-key", {
            method: "POST" /* POST */,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              challengeId: challenge.challengeId,
              publicKey,
              signature: signatureResult.signature
            })
          });
          const result = await response.json();
          logger.log("\u{1F510} SSH key auth server response:", result);
          if (result.success) {
            logger.log("\u2705 SSH key auth successful, setting current user");
            this.setCurrentUser({
              userId: result.userId,
              token: result.token,
              authMethod: "ssh-key",
              loginTime: Date.now()
            });
            logger.log("\u{1F464} Current user set:", this.getCurrentUser());
          } else {
            logger.log("\u274C SSH key auth failed:", result.error);
          }
          return result;
        } catch (error) {
          logger.error("SSH key authentication failed:", error);
          return { success: false, error: "SSH key authentication failed" };
        }
      }
      /**
       * Authenticate using password (fallback method)
       */
      async authenticateWithPassword(userId, password) {
        try {
          const response = await fetch("/api/auth/password", {
            method: "POST" /* POST */,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ userId, password })
          });
          const result = await response.json();
          if (result.success) {
            this.setCurrentUser({
              userId: result.userId,
              token: result.token,
              authMethod: "password",
              loginTime: Date.now()
            });
          }
          return result;
        } catch (error) {
          logger.error("Password authentication failed:", error);
          return { success: false, error: "Password authentication failed" };
        }
      }
      /**
       * Automated authentication - tries SSH keys first, then prompts for password
       */
      async authenticate(userId) {
        logger.log("\u{1F680} Starting SSH authentication for user:", userId);
        if (this.sshAgent.isUnlocked()) {
          const keys = this.sshAgent.listKeys();
          logger.log(
            "\u{1F5DD}\uFE0F Found SSH keys:",
            keys.length,
            keys.map((k2) => ({ id: k2.id, name: k2.name }))
          );
          for (const key of keys) {
            try {
              logger.log(`\u{1F511} Trying SSH key: ${key.name} (${key.id})`);
              const result = await this.authenticateWithSSHKey(userId, key.id);
              logger.log(`\u{1F3AF} SSH key ${key.name} result:`, result);
              if (result.success) {
                logger.log(`\u2705 Authenticated with SSH key: ${key.name}`);
                return result;
              }
            } catch (error) {
              logger.warn(`\u274C SSH key authentication failed for key ${key.name}:`, error);
            }
          }
        } else {
          logger.log("\u{1F512} SSH agent is locked");
        }
        return {
          success: false,
          error: "SSH key authentication failed. Password authentication required."
        };
      }
      /**
       * Logout user
       */
      async logout() {
        try {
          if (this.currentUser?.token) {
            await fetch("/api/auth/logout", {
              method: "POST" /* POST */,
              headers: {
                Authorization: `Bearer ${this.currentUser.token}`,
                "Content-Type": "application/json"
              }
            });
          }
        } catch (error) {
          logger.warn("Server logout failed:", error);
        } finally {
          this.clearCurrentUser();
        }
      }
      /**
       * Get authorization header for API requests
       */
      getAuthHeader() {
        if (this.currentUser?.token) {
          return { Authorization: `Bearer ${this.currentUser.token}` };
        }
        return {};
      }
      /**
       * Authenticated fetch wrapper that adds authorization header
       */
      async fetch(url, options) {
        const headers = {
          ...this.getAuthHeader(),
          ...options?.headers || {}
        };
        return fetch(url, {
          ...options,
          headers
        });
      }
      /**
       * Verify current token with server
       */
      async verifyToken() {
        if (!this.currentUser?.token) return false;
        try {
          const response = await fetch("/api/auth/verify", {
            headers: { Authorization: `Bearer ${this.currentUser.token}` }
          });
          const result = await response.json();
          return result.valid;
        } catch (error) {
          logger.error("Token verification failed:", error);
          return false;
        }
      }
      /**
       * Unlock SSH agent (no-op since we don't use encryption)
       */
      async unlockSSHAgent(_passphrase) {
        return true;
      }
      /**
       * Lock SSH agent (no-op since we don't use encryption)
       */
      lockSSHAgent() {
      }
      /**
       * Check if SSH agent is unlocked
       */
      isSSHAgentUnlocked() {
        return true;
      }
      // Private methods
      async createChallenge(userId) {
        const response = await fetch("/api/auth/challenge", {
          method: "POST" /* POST */,
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ userId })
        });
        if (!response.ok) {
          throw new Error("Failed to create authentication challenge");
        }
        return response.json();
      }
      setCurrentUser(user) {
        this.currentUser = user;
        this.saveCurrentUser();
      }
      clearCurrentUser() {
        this.currentUser = null;
        localStorage.removeItem(_AuthClient.TOKEN_KEY);
        localStorage.removeItem(_AuthClient.USER_KEY);
      }
      saveCurrentUser() {
        if (this.currentUser) {
          localStorage.setItem(_AuthClient.TOKEN_KEY, this.currentUser.token);
          localStorage.setItem(
            _AuthClient.USER_KEY,
            JSON.stringify({
              userId: this.currentUser.userId,
              authMethod: this.currentUser.authMethod,
              loginTime: this.currentUser.loginTime
            })
          );
        }
      }
      loadCurrentUser() {
        try {
          const token = localStorage.getItem(_AuthClient.TOKEN_KEY);
          const userData = localStorage.getItem(_AuthClient.USER_KEY);
          if (token && userData) {
            const user = JSON.parse(userData);
            this.currentUser = {
              token,
              userId: user.userId,
              authMethod: user.authMethod,
              loginTime: user.loginTime
            };
            this.verifyToken().then((valid) => {
              if (!valid) {
                this.clearCurrentUser();
              }
            });
          }
        } catch (error) {
          logger.error("Failed to load current user:", error);
          this.clearCurrentUser();
        }
      }
      isTokenValid() {
        if (!this.currentUser) return false;
        const tokenAge = Date.now() - this.currentUser.loginTime;
        const maxAge = 24 * 60 * 60 * 1e3;
        return tokenAge < maxAge;
      }
    };
    _AuthClient.TOKEN_KEY = "vibetunnel_auth_token";
    _AuthClient.USER_KEY = "vibetunnel_user_data";
    AuthClient = _AuthClient;
    authClient = new AuthClient();
  }
});

// src/client/utils/logger.ts
async function getAuthConfig() {
  const now = Date.now();
  if (authConfigCache && now - authConfigCache.timestamp < AUTH_CONFIG_TTL) {
    return authConfigCache.noAuth;
  }
  try {
    const configResponse = await fetch("/api/auth/config");
    if (configResponse.ok) {
      const authConfig = await configResponse.json();
      authConfigCache = {
        noAuth: authConfig.noAuth === true,
        timestamp: now
      };
      return authConfigCache.noAuth;
    }
  } catch {
  }
  return false;
}
function formatArgs(args) {
  return args.map((arg) => {
    if (typeof arg === "object" && arg !== null) {
      try {
        return JSON.stringify(arg, null, 2);
      } catch {
        return String(arg);
      }
    }
    return arg;
  });
}
async function sendToServer(level, module, args) {
  try {
    const { authClient: authClient2 } = await Promise.resolve().then(() => (init_auth_client(), auth_client_exports));
    const authHeader = authClient2.getAuthHeader();
    const isNoAuthMode = await getAuthConfig();
    if (!authHeader.Authorization && !isNoAuthMode) {
      return;
    }
    const headers = {
      "Content-Type": "application/json"
    };
    if (authHeader.Authorization) {
      headers.Authorization = authHeader.Authorization;
    }
    await fetch("/api/logs/client", {
      method: "POST" /* POST */,
      headers,
      body: JSON.stringify({
        level,
        module,
        args: formatArgs(args)
      })
    });
  } catch {
  }
}
function createLogger(moduleName) {
  const createLogMethod = (level) => {
    return (...args) => {
      if (level === "debug" && !debugMode) return;
      console[level](`[${moduleName}]`, ...args);
      sendToServer(level, moduleName, args);
    };
  };
  return {
    log: createLogMethod("log"),
    warn: createLogMethod("warn"),
    error: createLogMethod("error"),
    debug: createLogMethod("debug")
  };
}
var debugMode, authConfigCache, AUTH_CONFIG_TTL;
var init_logger = __esm({
  "src/client/utils/logger.ts"() {
    init_types();
    debugMode = false;
    authConfigCache = null;
    AUTH_CONFIG_TTL = 6e4;
  }
});

// node_modules/.pnpm/@lit+reactive-element@2.1.1/node_modules/@lit/reactive-element/css-tag.js
var t = globalThis;
var e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype;
var s = Symbol();
var o = /* @__PURE__ */ new WeakMap();
var n = class {
  constructor(t6, e7, o8) {
    if (this._$cssResult$ = true, o8 !== s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t6, this.t = e7;
  }
  get styleSheet() {
    let t6 = this.o;
    const s5 = this.t;
    if (e && void 0 === t6) {
      const e7 = void 0 !== s5 && 1 === s5.length;
      e7 && (t6 = o.get(s5)), void 0 === t6 && ((this.o = t6 = new CSSStyleSheet()).replaceSync(this.cssText), e7 && o.set(s5, t6));
    }
    return t6;
  }
  toString() {
    return this.cssText;
  }
};
var r = (t6) => new n("string" == typeof t6 ? t6 : t6 + "", void 0, s);
var S = (s5, o8) => {
  if (e) s5.adoptedStyleSheets = o8.map((t6) => t6 instanceof CSSStyleSheet ? t6 : t6.styleSheet);
  else for (const e7 of o8) {
    const o9 = document.createElement("style"), n7 = t.litNonce;
    void 0 !== n7 && o9.setAttribute("nonce", n7), o9.textContent = e7.cssText, s5.appendChild(o9);
  }
};
var c = e ? (t6) => t6 : (t6) => t6 instanceof CSSStyleSheet ? ((t7) => {
  let e7 = "";
  for (const s5 of t7.cssRules) e7 += s5.cssText;
  return r(e7);
})(t6) : t6;

// node_modules/.pnpm/@lit+reactive-element@2.1.1/node_modules/@lit/reactive-element/reactive-element.js
var { is: i2, defineProperty: e2, getOwnPropertyDescriptor: h, getOwnPropertyNames: r2, getOwnPropertySymbols: o2, getPrototypeOf: n2 } = Object;
var a = globalThis;
var c2 = a.trustedTypes;
var l = c2 ? c2.emptyScript : "";
var p = a.reactiveElementPolyfillSupport;
var d = (t6, s5) => t6;
var u = { toAttribute(t6, s5) {
  switch (s5) {
    case Boolean:
      t6 = t6 ? l : null;
      break;
    case Object:
    case Array:
      t6 = null == t6 ? t6 : JSON.stringify(t6);
  }
  return t6;
}, fromAttribute(t6, s5) {
  let i6 = t6;
  switch (s5) {
    case Boolean:
      i6 = null !== t6;
      break;
    case Number:
      i6 = null === t6 ? null : Number(t6);
      break;
    case Object:
    case Array:
      try {
        i6 = JSON.parse(t6);
      } catch (t7) {
        i6 = null;
      }
  }
  return i6;
} };
var f = (t6, s5) => !i2(t6, s5);
var b = { attribute: true, type: String, converter: u, reflect: false, useDefault: false, hasChanged: f };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), a.litPropertyMetadata ?? (a.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
var y = class extends HTMLElement {
  static addInitializer(t6) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t6);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t6, s5 = b) {
    if (s5.state && (s5.attribute = false), this._$Ei(), this.prototype.hasOwnProperty(t6) && ((s5 = Object.create(s5)).wrapped = true), this.elementProperties.set(t6, s5), !s5.noAccessor) {
      const i6 = Symbol(), h5 = this.getPropertyDescriptor(t6, i6, s5);
      void 0 !== h5 && e2(this.prototype, t6, h5);
    }
  }
  static getPropertyDescriptor(t6, s5, i6) {
    const { get: e7, set: r7 } = h(this.prototype, t6) ?? { get() {
      return this[s5];
    }, set(t7) {
      this[s5] = t7;
    } };
    return { get: e7, set(s6) {
      const h5 = e7?.call(this);
      r7?.call(this, s6), this.requestUpdate(t6, h5, i6);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t6) {
    return this.elementProperties.get(t6) ?? b;
  }
  static _$Ei() {
    if (this.hasOwnProperty(d("elementProperties"))) return;
    const t6 = n2(this);
    t6.finalize(), void 0 !== t6.l && (this.l = [...t6.l]), this.elementProperties = new Map(t6.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(d("finalized"))) return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(d("properties"))) {
      const t7 = this.properties, s5 = [...r2(t7), ...o2(t7)];
      for (const i6 of s5) this.createProperty(i6, t7[i6]);
    }
    const t6 = this[Symbol.metadata];
    if (null !== t6) {
      const s5 = litPropertyMetadata.get(t6);
      if (void 0 !== s5) for (const [t7, i6] of s5) this.elementProperties.set(t7, i6);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [t7, s5] of this.elementProperties) {
      const i6 = this._$Eu(t7, s5);
      void 0 !== i6 && this._$Eh.set(i6, t7);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(s5) {
    const i6 = [];
    if (Array.isArray(s5)) {
      const e7 = new Set(s5.flat(1 / 0).reverse());
      for (const s6 of e7) i6.unshift(c(s6));
    } else void 0 !== s5 && i6.push(c(s5));
    return i6;
  }
  static _$Eu(t6, s5) {
    const i6 = s5.attribute;
    return false === i6 ? void 0 : "string" == typeof i6 ? i6 : "string" == typeof t6 ? t6.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    this._$ES = new Promise((t6) => this.enableUpdating = t6), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((t6) => t6(this));
  }
  addController(t6) {
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t6), void 0 !== this.renderRoot && this.isConnected && t6.hostConnected?.();
  }
  removeController(t6) {
    this._$EO?.delete(t6);
  }
  _$E_() {
    const t6 = /* @__PURE__ */ new Map(), s5 = this.constructor.elementProperties;
    for (const i6 of s5.keys()) this.hasOwnProperty(i6) && (t6.set(i6, this[i6]), delete this[i6]);
    t6.size > 0 && (this._$Ep = t6);
  }
  createRenderRoot() {
    const t6 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return S(t6, this.constructor.elementStyles), t6;
  }
  connectedCallback() {
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), this._$EO?.forEach((t6) => t6.hostConnected?.());
  }
  enableUpdating(t6) {
  }
  disconnectedCallback() {
    this._$EO?.forEach((t6) => t6.hostDisconnected?.());
  }
  attributeChangedCallback(t6, s5, i6) {
    this._$AK(t6, i6);
  }
  _$ET(t6, s5) {
    const i6 = this.constructor.elementProperties.get(t6), e7 = this.constructor._$Eu(t6, i6);
    if (void 0 !== e7 && true === i6.reflect) {
      const h5 = (void 0 !== i6.converter?.toAttribute ? i6.converter : u).toAttribute(s5, i6.type);
      this._$Em = t6, null == h5 ? this.removeAttribute(e7) : this.setAttribute(e7, h5), this._$Em = null;
    }
  }
  _$AK(t6, s5) {
    const i6 = this.constructor, e7 = i6._$Eh.get(t6);
    if (void 0 !== e7 && this._$Em !== e7) {
      const t7 = i6.getPropertyOptions(e7), h5 = "function" == typeof t7.converter ? { fromAttribute: t7.converter } : void 0 !== t7.converter?.fromAttribute ? t7.converter : u;
      this._$Em = e7;
      const r7 = h5.fromAttribute(s5, t7.type);
      this[e7] = r7 ?? this._$Ej?.get(e7) ?? r7, this._$Em = null;
    }
  }
  requestUpdate(t6, s5, i6) {
    if (void 0 !== t6) {
      const e7 = this.constructor, h5 = this[t6];
      if (i6 ?? (i6 = e7.getPropertyOptions(t6)), !((i6.hasChanged ?? f)(h5, s5) || i6.useDefault && i6.reflect && h5 === this._$Ej?.get(t6) && !this.hasAttribute(e7._$Eu(t6, i6)))) return;
      this.C(t6, s5, i6);
    }
    false === this.isUpdatePending && (this._$ES = this._$EP());
  }
  C(t6, s5, { useDefault: i6, reflect: e7, wrapped: h5 }, r7) {
    i6 && !(this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Map())).has(t6) && (this._$Ej.set(t6, r7 ?? s5 ?? this[t6]), true !== h5 || void 0 !== r7) || (this._$AL.has(t6) || (this.hasUpdated || i6 || (s5 = void 0), this._$AL.set(t6, s5)), true === e7 && this._$Em !== t6 && (this._$Eq ?? (this._$Eq = /* @__PURE__ */ new Set())).add(t6));
  }
  async _$EP() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (t7) {
      Promise.reject(t7);
    }
    const t6 = this.scheduleUpdate();
    return null != t6 && await t6, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    if (!this.isUpdatePending) return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [t8, s6] of this._$Ep) this[t8] = s6;
        this._$Ep = void 0;
      }
      const t7 = this.constructor.elementProperties;
      if (t7.size > 0) for (const [s6, i6] of t7) {
        const { wrapped: t8 } = i6, e7 = this[s6];
        true !== t8 || this._$AL.has(s6) || void 0 === e7 || this.C(s6, void 0, i6, e7);
      }
    }
    let t6 = false;
    const s5 = this._$AL;
    try {
      t6 = this.shouldUpdate(s5), t6 ? (this.willUpdate(s5), this._$EO?.forEach((t7) => t7.hostUpdate?.()), this.update(s5)) : this._$EM();
    } catch (s6) {
      throw t6 = false, this._$EM(), s6;
    }
    t6 && this._$AE(s5);
  }
  willUpdate(t6) {
  }
  _$AE(t6) {
    this._$EO?.forEach((t7) => t7.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t6)), this.updated(t6);
  }
  _$EM() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t6) {
    return true;
  }
  update(t6) {
    this._$Eq && (this._$Eq = this._$Eq.forEach((t7) => this._$ET(t7, this[t7]))), this._$EM();
  }
  updated(t6) {
  }
  firstUpdated(t6) {
  }
};
y.elementStyles = [], y.shadowRootOptions = { mode: "open" }, y[d("elementProperties")] = /* @__PURE__ */ new Map(), y[d("finalized")] = /* @__PURE__ */ new Map(), p?.({ ReactiveElement: y }), (a.reactiveElementVersions ?? (a.reactiveElementVersions = [])).push("2.1.1");

// node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/lit-html.js
var t2 = globalThis;
var i3 = t2.trustedTypes;
var s2 = i3 ? i3.createPolicy("lit-html", { createHTML: (t6) => t6 }) : void 0;
var e3 = "$lit$";
var h2 = `lit$${Math.random().toFixed(9).slice(2)}$`;
var o3 = "?" + h2;
var n3 = `<${o3}>`;
var r3 = document;
var l2 = () => r3.createComment("");
var c3 = (t6) => null === t6 || "object" != typeof t6 && "function" != typeof t6;
var a2 = Array.isArray;
var u2 = (t6) => a2(t6) || "function" == typeof t6?.[Symbol.iterator];
var d2 = "[ 	\n\f\r]";
var f2 = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
var v = /-->/g;
var _ = />/g;
var m = RegExp(`>|${d2}(?:([^\\s"'>=/]+)(${d2}*=${d2}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g");
var p2 = /'/g;
var g = /"/g;
var $ = /^(?:script|style|textarea|title)$/i;
var y2 = (t6) => (i6, ...s5) => ({ _$litType$: t6, strings: i6, values: s5 });
var x = y2(1);
var b2 = y2(2);
var w = y2(3);
var T = Symbol.for("lit-noChange");
var E = Symbol.for("lit-nothing");
var A = /* @__PURE__ */ new WeakMap();
var C = r3.createTreeWalker(r3, 129);
function P(t6, i6) {
  if (!a2(t6) || !t6.hasOwnProperty("raw")) throw Error("invalid template strings array");
  return void 0 !== s2 ? s2.createHTML(i6) : i6;
}
var V = (t6, i6) => {
  const s5 = t6.length - 1, o8 = [];
  let r7, l3 = 2 === i6 ? "<svg>" : 3 === i6 ? "<math>" : "", c5 = f2;
  for (let i7 = 0; i7 < s5; i7++) {
    const s6 = t6[i7];
    let a3, u3, d3 = -1, y3 = 0;
    for (; y3 < s6.length && (c5.lastIndex = y3, u3 = c5.exec(s6), null !== u3); ) y3 = c5.lastIndex, c5 === f2 ? "!--" === u3[1] ? c5 = v : void 0 !== u3[1] ? c5 = _ : void 0 !== u3[2] ? ($.test(u3[2]) && (r7 = RegExp("</" + u3[2], "g")), c5 = m) : void 0 !== u3[3] && (c5 = m) : c5 === m ? ">" === u3[0] ? (c5 = r7 ?? f2, d3 = -1) : void 0 === u3[1] ? d3 = -2 : (d3 = c5.lastIndex - u3[2].length, a3 = u3[1], c5 = void 0 === u3[3] ? m : '"' === u3[3] ? g : p2) : c5 === g || c5 === p2 ? c5 = m : c5 === v || c5 === _ ? c5 = f2 : (c5 = m, r7 = void 0);
    const x2 = c5 === m && t6[i7 + 1].startsWith("/>") ? " " : "";
    l3 += c5 === f2 ? s6 + n3 : d3 >= 0 ? (o8.push(a3), s6.slice(0, d3) + e3 + s6.slice(d3) + h2 + x2) : s6 + h2 + (-2 === d3 ? i7 : x2);
  }
  return [P(t6, l3 + (t6[s5] || "<?>") + (2 === i6 ? "</svg>" : 3 === i6 ? "</math>" : "")), o8];
};
var N = class _N {
  constructor({ strings: t6, _$litType$: s5 }, n7) {
    let r7;
    this.parts = [];
    let c5 = 0, a3 = 0;
    const u3 = t6.length - 1, d3 = this.parts, [f5, v2] = V(t6, s5);
    if (this.el = _N.createElement(f5, n7), C.currentNode = this.el.content, 2 === s5 || 3 === s5) {
      const t7 = this.el.content.firstChild;
      t7.replaceWith(...t7.childNodes);
    }
    for (; null !== (r7 = C.nextNode()) && d3.length < u3; ) {
      if (1 === r7.nodeType) {
        if (r7.hasAttributes()) for (const t7 of r7.getAttributeNames()) if (t7.endsWith(e3)) {
          const i6 = v2[a3++], s6 = r7.getAttribute(t7).split(h2), e7 = /([.?@])?(.*)/.exec(i6);
          d3.push({ type: 1, index: c5, name: e7[2], strings: s6, ctor: "." === e7[1] ? H : "?" === e7[1] ? I : "@" === e7[1] ? L : k }), r7.removeAttribute(t7);
        } else t7.startsWith(h2) && (d3.push({ type: 6, index: c5 }), r7.removeAttribute(t7));
        if ($.test(r7.tagName)) {
          const t7 = r7.textContent.split(h2), s6 = t7.length - 1;
          if (s6 > 0) {
            r7.textContent = i3 ? i3.emptyScript : "";
            for (let i6 = 0; i6 < s6; i6++) r7.append(t7[i6], l2()), C.nextNode(), d3.push({ type: 2, index: ++c5 });
            r7.append(t7[s6], l2());
          }
        }
      } else if (8 === r7.nodeType) if (r7.data === o3) d3.push({ type: 2, index: c5 });
      else {
        let t7 = -1;
        for (; -1 !== (t7 = r7.data.indexOf(h2, t7 + 1)); ) d3.push({ type: 7, index: c5 }), t7 += h2.length - 1;
      }
      c5++;
    }
  }
  static createElement(t6, i6) {
    const s5 = r3.createElement("template");
    return s5.innerHTML = t6, s5;
  }
};
function S2(t6, i6, s5 = t6, e7) {
  if (i6 === T) return i6;
  let h5 = void 0 !== e7 ? s5._$Co?.[e7] : s5._$Cl;
  const o8 = c3(i6) ? void 0 : i6._$litDirective$;
  return h5?.constructor !== o8 && (h5?._$AO?.(false), void 0 === o8 ? h5 = void 0 : (h5 = new o8(t6), h5._$AT(t6, s5, e7)), void 0 !== e7 ? (s5._$Co ?? (s5._$Co = []))[e7] = h5 : s5._$Cl = h5), void 0 !== h5 && (i6 = S2(t6, h5._$AS(t6, i6.values), h5, e7)), i6;
}
var M = class {
  constructor(t6, i6) {
    this._$AV = [], this._$AN = void 0, this._$AD = t6, this._$AM = i6;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(t6) {
    const { el: { content: i6 }, parts: s5 } = this._$AD, e7 = (t6?.creationScope ?? r3).importNode(i6, true);
    C.currentNode = e7;
    let h5 = C.nextNode(), o8 = 0, n7 = 0, l3 = s5[0];
    for (; void 0 !== l3; ) {
      if (o8 === l3.index) {
        let i7;
        2 === l3.type ? i7 = new R(h5, h5.nextSibling, this, t6) : 1 === l3.type ? i7 = new l3.ctor(h5, l3.name, l3.strings, this, t6) : 6 === l3.type && (i7 = new z(h5, this, t6)), this._$AV.push(i7), l3 = s5[++n7];
      }
      o8 !== l3?.index && (h5 = C.nextNode(), o8++);
    }
    return C.currentNode = r3, e7;
  }
  p(t6) {
    let i6 = 0;
    for (const s5 of this._$AV) void 0 !== s5 && (void 0 !== s5.strings ? (s5._$AI(t6, s5, i6), i6 += s5.strings.length - 2) : s5._$AI(t6[i6])), i6++;
  }
};
var R = class _R {
  get _$AU() {
    return this._$AM?._$AU ?? this._$Cv;
  }
  constructor(t6, i6, s5, e7) {
    this.type = 2, this._$AH = E, this._$AN = void 0, this._$AA = t6, this._$AB = i6, this._$AM = s5, this.options = e7, this._$Cv = e7?.isConnected ?? true;
  }
  get parentNode() {
    let t6 = this._$AA.parentNode;
    const i6 = this._$AM;
    return void 0 !== i6 && 11 === t6?.nodeType && (t6 = i6.parentNode), t6;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(t6, i6 = this) {
    t6 = S2(this, t6, i6), c3(t6) ? t6 === E || null == t6 || "" === t6 ? (this._$AH !== E && this._$AR(), this._$AH = E) : t6 !== this._$AH && t6 !== T && this._(t6) : void 0 !== t6._$litType$ ? this.$(t6) : void 0 !== t6.nodeType ? this.T(t6) : u2(t6) ? this.k(t6) : this._(t6);
  }
  O(t6) {
    return this._$AA.parentNode.insertBefore(t6, this._$AB);
  }
  T(t6) {
    this._$AH !== t6 && (this._$AR(), this._$AH = this.O(t6));
  }
  _(t6) {
    this._$AH !== E && c3(this._$AH) ? this._$AA.nextSibling.data = t6 : this.T(r3.createTextNode(t6)), this._$AH = t6;
  }
  $(t6) {
    const { values: i6, _$litType$: s5 } = t6, e7 = "number" == typeof s5 ? this._$AC(t6) : (void 0 === s5.el && (s5.el = N.createElement(P(s5.h, s5.h[0]), this.options)), s5);
    if (this._$AH?._$AD === e7) this._$AH.p(i6);
    else {
      const t7 = new M(e7, this), s6 = t7.u(this.options);
      t7.p(i6), this.T(s6), this._$AH = t7;
    }
  }
  _$AC(t6) {
    let i6 = A.get(t6.strings);
    return void 0 === i6 && A.set(t6.strings, i6 = new N(t6)), i6;
  }
  k(t6) {
    a2(this._$AH) || (this._$AH = [], this._$AR());
    const i6 = this._$AH;
    let s5, e7 = 0;
    for (const h5 of t6) e7 === i6.length ? i6.push(s5 = new _R(this.O(l2()), this.O(l2()), this, this.options)) : s5 = i6[e7], s5._$AI(h5), e7++;
    e7 < i6.length && (this._$AR(s5 && s5._$AB.nextSibling, e7), i6.length = e7);
  }
  _$AR(t6 = this._$AA.nextSibling, i6) {
    for (this._$AP?.(false, true, i6); t6 !== this._$AB; ) {
      const i7 = t6.nextSibling;
      t6.remove(), t6 = i7;
    }
  }
  setConnected(t6) {
    void 0 === this._$AM && (this._$Cv = t6, this._$AP?.(t6));
  }
};
var k = class {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(t6, i6, s5, e7, h5) {
    this.type = 1, this._$AH = E, this._$AN = void 0, this.element = t6, this.name = i6, this._$AM = e7, this.options = h5, s5.length > 2 || "" !== s5[0] || "" !== s5[1] ? (this._$AH = Array(s5.length - 1).fill(new String()), this.strings = s5) : this._$AH = E;
  }
  _$AI(t6, i6 = this, s5, e7) {
    const h5 = this.strings;
    let o8 = false;
    if (void 0 === h5) t6 = S2(this, t6, i6, 0), o8 = !c3(t6) || t6 !== this._$AH && t6 !== T, o8 && (this._$AH = t6);
    else {
      const e8 = t6;
      let n7, r7;
      for (t6 = h5[0], n7 = 0; n7 < h5.length - 1; n7++) r7 = S2(this, e8[s5 + n7], i6, n7), r7 === T && (r7 = this._$AH[n7]), o8 || (o8 = !c3(r7) || r7 !== this._$AH[n7]), r7 === E ? t6 = E : t6 !== E && (t6 += (r7 ?? "") + h5[n7 + 1]), this._$AH[n7] = r7;
    }
    o8 && !e7 && this.j(t6);
  }
  j(t6) {
    t6 === E ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, t6 ?? "");
  }
};
var H = class extends k {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(t6) {
    this.element[this.name] = t6 === E ? void 0 : t6;
  }
};
var I = class extends k {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(t6) {
    this.element.toggleAttribute(this.name, !!t6 && t6 !== E);
  }
};
var L = class extends k {
  constructor(t6, i6, s5, e7, h5) {
    super(t6, i6, s5, e7, h5), this.type = 5;
  }
  _$AI(t6, i6 = this) {
    if ((t6 = S2(this, t6, i6, 0) ?? E) === T) return;
    const s5 = this._$AH, e7 = t6 === E && s5 !== E || t6.capture !== s5.capture || t6.once !== s5.once || t6.passive !== s5.passive, h5 = t6 !== E && (s5 === E || e7);
    e7 && this.element.removeEventListener(this.name, this, s5), h5 && this.element.addEventListener(this.name, this, t6), this._$AH = t6;
  }
  handleEvent(t6) {
    "function" == typeof this._$AH ? this._$AH.call(this.options?.host ?? this.element, t6) : this._$AH.handleEvent(t6);
  }
};
var z = class {
  constructor(t6, i6, s5) {
    this.element = t6, this.type = 6, this._$AN = void 0, this._$AM = i6, this.options = s5;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(t6) {
    S2(this, t6);
  }
};
var Z = { M: e3, P: h2, A: o3, C: 1, L: V, R: M, D: u2, V: S2, I: R, H: k, N: I, U: L, B: H, F: z };
var j = t2.litHtmlPolyfillSupport;
j?.(N, R), (t2.litHtmlVersions ?? (t2.litHtmlVersions = [])).push("3.3.1");
var B = (t6, i6, s5) => {
  const e7 = s5?.renderBefore ?? i6;
  let h5 = e7._$litPart$;
  if (void 0 === h5) {
    const t7 = s5?.renderBefore ?? null;
    e7._$litPart$ = h5 = new R(i6.insertBefore(l2(), t7), t7, void 0, s5 ?? {});
  }
  return h5._$AI(t6), h5;
};

// node_modules/.pnpm/lit-element@4.2.1/node_modules/lit-element/lit-element.js
var s3 = globalThis;
var i4 = class extends y {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    var _a;
    const t6 = super.createRenderRoot();
    return (_a = this.renderOptions).renderBefore ?? (_a.renderBefore = t6.firstChild), t6;
  }
  update(t6) {
    const r7 = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(t6), this._$Do = B(r7, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    super.connectedCallback(), this._$Do?.setConnected(true);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._$Do?.setConnected(false);
  }
  render() {
    return T;
  }
};
i4._$litElement$ = true, i4["finalized"] = true, s3.litElementHydrateSupport?.({ LitElement: i4 });
var o4 = s3.litElementPolyfillSupport;
o4?.({ LitElement: i4 });
(s3.litElementVersions ?? (s3.litElementVersions = [])).push("4.2.1");

// node_modules/.pnpm/@lit+reactive-element@2.1.1/node_modules/@lit/reactive-element/decorators/custom-element.js
var t3 = (t6) => (e7, o8) => {
  void 0 !== o8 ? o8.addInitializer(() => {
    customElements.define(t6, e7);
  }) : customElements.define(t6, e7);
};

// node_modules/.pnpm/@lit+reactive-element@2.1.1/node_modules/@lit/reactive-element/decorators/property.js
var o5 = { attribute: true, type: String, converter: u, reflect: false, hasChanged: f };
var r4 = (t6 = o5, e7, r7) => {
  const { kind: n7, metadata: i6 } = r7;
  let s5 = globalThis.litPropertyMetadata.get(i6);
  if (void 0 === s5 && globalThis.litPropertyMetadata.set(i6, s5 = /* @__PURE__ */ new Map()), "setter" === n7 && ((t6 = Object.create(t6)).wrapped = true), s5.set(r7.name, t6), "accessor" === n7) {
    const { name: o8 } = r7;
    return { set(r8) {
      const n8 = e7.get.call(this);
      e7.set.call(this, r8), this.requestUpdate(o8, n8, t6);
    }, init(e8) {
      return void 0 !== e8 && this.C(o8, void 0, t6, e8), e8;
    } };
  }
  if ("setter" === n7) {
    const { name: o8 } = r7;
    return function(r8) {
      const n8 = this[o8];
      e7.call(this, r8), this.requestUpdate(o8, n8, t6);
    };
  }
  throw Error("Unsupported decorator location: " + n7);
};
function n4(t6) {
  return (e7, o8) => "object" == typeof o8 ? r4(t6, e7, o8) : ((t7, e8, o9) => {
    const r7 = e8.hasOwnProperty(o9);
    return e8.constructor.createProperty(o9, t7), r7 ? Object.getOwnPropertyDescriptor(e8, o9) : void 0;
  })(t6, e7, o8);
}

// node_modules/.pnpm/@lit+reactive-element@2.1.1/node_modules/@lit/reactive-element/decorators/state.js
function r5(r7) {
  return n4({ ...r7, state: true, attribute: false });
}

// node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/directive-helpers.js
var { I: t4 } = Z;
var f3 = (o8) => void 0 === o8.strings;

// node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/directive.js
var t5 = { ATTRIBUTE: 1, CHILD: 2, PROPERTY: 3, BOOLEAN_ATTRIBUTE: 4, EVENT: 5, ELEMENT: 6 };
var e5 = (t6) => (...e7) => ({ _$litDirective$: t6, values: e7 });
var i5 = class {
  constructor(t6) {
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AT(t6, e7, i6) {
    this._$Ct = t6, this._$AM = e7, this._$Ci = i6;
  }
  _$AS(t6, e7) {
    return this.update(t6, e7);
  }
  update(t6, e7) {
    return this.render(...e7);
  }
};

// node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/async-directive.js
var s4 = (i6, t6) => {
  const e7 = i6._$AN;
  if (void 0 === e7) return false;
  for (const i7 of e7) i7._$AO?.(t6, false), s4(i7, t6);
  return true;
};
var o6 = (i6) => {
  let t6, e7;
  do {
    if (void 0 === (t6 = i6._$AM)) break;
    e7 = t6._$AN, e7.delete(i6), i6 = t6;
  } while (0 === e7?.size);
};
var r6 = (i6) => {
  for (let t6; t6 = i6._$AM; i6 = t6) {
    let e7 = t6._$AN;
    if (void 0 === e7) t6._$AN = e7 = /* @__PURE__ */ new Set();
    else if (e7.has(i6)) break;
    e7.add(i6), c4(t6);
  }
};
function h3(i6) {
  void 0 !== this._$AN ? (o6(this), this._$AM = i6, r6(this)) : this._$AM = i6;
}
function n5(i6, t6 = false, e7 = 0) {
  const r7 = this._$AH, h5 = this._$AN;
  if (void 0 !== h5 && 0 !== h5.size) if (t6) if (Array.isArray(r7)) for (let i7 = e7; i7 < r7.length; i7++) s4(r7[i7], false), o6(r7[i7]);
  else null != r7 && (s4(r7, false), o6(r7));
  else s4(this, i6);
}
var c4 = (i6) => {
  i6.type == t5.CHILD && (i6._$AP ?? (i6._$AP = n5), i6._$AQ ?? (i6._$AQ = h3));
};
var f4 = class extends i5 {
  constructor() {
    super(...arguments), this._$AN = void 0;
  }
  _$AT(i6, t6, e7) {
    super._$AT(i6, t6, e7), r6(this), this.isConnected = i6._$AU;
  }
  _$AO(i6, t6 = true) {
    i6 !== this.isConnected && (this.isConnected = i6, i6 ? this.reconnected?.() : this.disconnected?.()), t6 && (s4(this, i6), o6(this));
  }
  setValue(t6) {
    if (f3(this._$Ct)) this._$Ct._$AI(t6, this);
    else {
      const i6 = [...this._$Ct._$AH];
      i6[this._$Ci] = t6, this._$Ct._$AI(i6, this, 0);
    }
  }
  disconnected() {
  }
  reconnected() {
  }
};

// node_modules/.pnpm/lit-html@3.3.1/node_modules/lit-html/directives/ref.js
var e6 = () => new h4();
var h4 = class {
};
var o7 = /* @__PURE__ */ new WeakMap();
var n6 = e5(class extends f4 {
  render(i6) {
    return E;
  }
  update(i6, [s5]) {
    const e7 = s5 !== this.G;
    return e7 && void 0 !== this.G && this.rt(void 0), (e7 || this.lt !== this.ct) && (this.G = s5, this.ht = i6.options?.host, this.rt(this.ct = i6.element)), E;
  }
  rt(t6) {
    if (this.isConnected || (t6 = void 0), "function" == typeof this.G) {
      const i6 = this.ht ?? globalThis;
      let s5 = o7.get(i6);
      void 0 === s5 && (s5 = /* @__PURE__ */ new WeakMap(), o7.set(i6, s5)), void 0 !== s5.get(this.G) && this.G.call(this.ht, void 0), s5.set(this.G, t6), void 0 !== t6 && this.G.call(this.ht, t6);
    } else this.G.value = t6;
  }
  get lt() {
    return "function" == typeof this.G ? o7.get(this.ht ?? globalThis)?.get(this.G) : this.G?.value;
  }
  disconnected() {
    this.lt === this.ct && this.rt(void 0);
  }
  reconnected() {
    this.rt(this.ct);
  }
});

// src/client/components/terminal.ts
var import_headless = __toESM(require_xterm_headless(), 1);

// src/client/utils/keyboard-shortcut-highlighter.ts
var TERMINAL_SHORTCUT_CLASS = "terminal-shortcut";
var SHORTCUT_PATTERNS = [
  // Ctrl combinations
  {
    pattern: /\bctrl\+([a-z])\b/gi,
    keySequence: (match) => `ctrl_${match[1].toLowerCase()}`
  },
  { pattern: /\bctrl\+([0-9])\b/gi, keySequence: (match) => `ctrl_${match[1]}` },
  {
    pattern: /\bctrl\+f([1-9]|1[0-2])\b/gi,
    keySequence: (match) => `ctrl_f${match[1]}`
  },
  // Common shortcuts
  {
    pattern: /\bctrl\+shift\+([a-z])\b/gi,
    keySequence: (match) => `ctrl_shift_${match[1].toLowerCase()}`
  },
  {
    pattern: /\balt\+([a-z])\b/gi,
    keySequence: (match) => `alt_${match[1].toLowerCase()}`
  },
  {
    pattern: /\bcmd\+([a-z])\b/gi,
    keySequence: (match) => `cmd_${match[1].toLowerCase()}`
  },
  // Function keys
  { pattern: /\bf([1-9]|1[0-2])\b/gi, keySequence: (match) => `f${match[1]}` },
  // Special keys
  { pattern: /\besc\b/gi, keySequence: () => "escape" },
  { pattern: /\bescape\b/gi, keySequence: () => "escape" },
  { pattern: /\btab\b/gi, keySequence: () => "tab" },
  { pattern: /\bshift\+tab\b/gi, keySequence: () => "shift_tab" },
  { pattern: /\benter\b/gi, keySequence: () => "enter" },
  { pattern: /\breturn\b/gi, keySequence: () => "enter" },
  { pattern: /\bbackspace\b/gi, keySequence: () => "backspace" },
  { pattern: /\bdelete\b/gi, keySequence: () => "delete" },
  { pattern: /\bspace\b/gi, keySequence: () => " " },
  // Arrow keys
  {
    pattern: /\barrow\s+(up|down|left|right)\b/gi,
    keySequence: (match) => `arrow_${match[1].toLowerCase()}`
  },
  {
    pattern: /\b(up|down|left|right)\s+arrow\b/gi,
    keySequence: (match) => `arrow_${match[1].toLowerCase()}`
  },
  // Page keys
  {
    pattern: /\bpage\s+(up|down)\b/gi,
    keySequence: (match) => `page_${match[1].toLowerCase()}`
  },
  { pattern: /\b(home|end)\b/gi, keySequence: (match) => match[1].toLowerCase() },
  // Common phrases with shortcuts
  { pattern: /\besc\s+to\s+(interrupt|quit|exit|cancel)\b/gi, keySequence: () => "escape" },
  { pattern: /\bpress\s+esc\b/gi, keySequence: () => "escape" },
  { pattern: /\bpress\s+enter\b/gi, keySequence: () => "enter" },
  { pattern: /\bpress\s+tab\b/gi, keySequence: () => "tab" },
  {
    pattern: /\bpress\s+ctrl\+([a-z])\b/gi,
    keySequence: (match) => `ctrl_${match[1].toLowerCase()}`
  },
  {
    pattern: /\bctrl\+([a-z])\s+to\s+\w+/gi,
    keySequence: (match) => `ctrl_${match[1].toLowerCase()}`
  },
  // q to quit pattern
  { pattern: /\bq\s+to\s+(quit|exit)\b/gi, keySequence: () => "q" },
  { pattern: /\bpress\s+q\b/gi, keySequence: () => "q" },
  // Claude Code interactive prompts - generic numbered options
  { pattern: /❯\s*(\d+)\.\s+.*/g, keySequence: (match) => match[1] },
  { pattern: /(\d+)\.\s+.*/g, keySequence: (match) => match[1] }
];
function processKeyboardShortcuts(container, onShortcutClick) {
  const processor = new ShortcutProcessor(container, onShortcutClick);
  processor.process();
}
var ShortcutProcessor = class {
  constructor(container, onShortcutClick) {
    this.processedRanges = /* @__PURE__ */ new Map();
    this.container = container;
    this.lines = container.querySelectorAll(".terminal-line");
    this.onShortcutClick = onShortcutClick;
  }
  process() {
    if (this.lines.length === 0) return;
    for (let i6 = 0; i6 < this.lines.length; i6++) {
      this.processLine(i6);
    }
  }
  processLine(lineIndex) {
    const lineText = this.getLineText(lineIndex);
    if (!lineText) return;
    const shortcuts = this.findShortcutsInLine(lineText);
    for (const shortcut of shortcuts) {
      if (!this.isRangeProcessed(lineIndex, shortcut.start, shortcut.end)) {
        this.createShortcutLink(shortcut, lineIndex);
        this.markRangeAsProcessed(lineIndex, shortcut.start, shortcut.end);
      }
    }
  }
  findShortcutsInLine(lineText) {
    const shortcuts = [];
    for (const pattern of SHORTCUT_PATTERNS) {
      pattern.pattern.lastIndex = 0;
      let match = pattern.pattern.exec(lineText);
      while (match !== null) {
        const text = match[0];
        const keySequence = pattern.keySequence(match);
        const start = match.index;
        const end = match.index + text.length;
        shortcuts.push({
          text,
          keySequence,
          start,
          end
        });
        match = pattern.pattern.exec(lineText);
      }
    }
    shortcuts.sort((a3, b3) => a3.start - b3.start);
    const nonOverlapping = [];
    for (const shortcut of shortcuts) {
      const hasOverlap = nonOverlapping.some(
        (existing) => shortcut.start < existing.end && shortcut.end > existing.start
      );
      if (!hasOverlap) {
        nonOverlapping.push(shortcut);
      }
    }
    return nonOverlapping;
  }
  createShortcutLink(shortcut, lineIndex) {
    const line = this.lines[lineIndex];
    const highlighter = new ShortcutHighlighter(line, shortcut, this.onShortcutClick);
    highlighter.createLink();
  }
  getLineText(lineIndex) {
    if (lineIndex < 0 || lineIndex >= this.lines.length) return "";
    return this.lines[lineIndex].textContent || "";
  }
  isRangeProcessed(lineIndex, start, end) {
    const ranges = this.processedRanges.get(lineIndex);
    if (!ranges) return false;
    return ranges.some((range) => start < range.end && end > range.start);
  }
  markRangeAsProcessed(lineIndex, start, end) {
    if (!this.processedRanges.has(lineIndex)) {
      this.processedRanges.set(lineIndex, []);
    }
    const ranges = this.processedRanges.get(lineIndex);
    if (ranges) {
      ranges.push({ start, end });
    }
  }
};
var ShortcutHighlighter = class {
  constructor(lineElement, shortcut, onShortcutClick) {
    this.lineElement = lineElement;
    this.shortcut = shortcut;
    this.onShortcutClick = onShortcutClick;
  }
  createLink() {
    this.wrapTextInLink(this.lineElement, this.shortcut.start, this.shortcut.end);
  }
  wrapTextInLink(lineElement, startCol, endCol) {
    const walker = document.createTreeWalker(lineElement, NodeFilter.SHOW_TEXT, null);
    const textNodeData = [];
    let currentPos = 0;
    let node = walker.nextNode();
    while (node) {
      const textNode = node;
      const nodeText = textNode.textContent || "";
      const nodeStart = currentPos;
      const nodeEnd = currentPos + nodeText.length;
      if (nodeEnd > startCol && nodeStart < endCol) {
        textNodeData.push({ node: textNode, start: nodeStart, end: nodeEnd });
      }
      currentPos = nodeEnd;
      node = walker.nextNode();
    }
    for (let i6 = textNodeData.length - 1; i6 >= 0; i6--) {
      const { node: textNode, start: nodeStart } = textNodeData[i6];
      const nodeText = textNode.textContent || "";
      const linkStart = Math.max(0, startCol - nodeStart);
      const linkEnd = Math.min(nodeText.length, endCol - nodeStart);
      if (linkStart < linkEnd) {
        this.wrapTextNode(textNode, linkStart, linkEnd);
      }
    }
  }
  wrapTextNode(textNode, start, end) {
    const parent = textNode.parentNode;
    if (!parent) return;
    if (this.isInsideClickable(parent)) return;
    const nodeText = textNode.textContent || "";
    const beforeText = nodeText.substring(0, start);
    const linkText = nodeText.substring(start, end);
    const afterText = nodeText.substring(end);
    const shortcutElement = this.createShortcutElement(linkText);
    const fragment = document.createDocumentFragment();
    if (beforeText) {
      fragment.appendChild(document.createTextNode(beforeText));
    }
    fragment.appendChild(shortcutElement);
    if (afterText) {
      fragment.appendChild(document.createTextNode(afterText));
    }
    parent.replaceChild(fragment, textNode);
  }
  createShortcutElement(text) {
    const shortcut = document.createElement("span");
    shortcut.className = TERMINAL_SHORTCUT_CLASS;
    shortcut.style.color = "#9ca3af";
    shortcut.style.textDecoration = "underline";
    shortcut.style.textDecorationStyle = "dotted";
    shortcut.style.cursor = "pointer";
    shortcut.style.fontWeight = "500";
    shortcut.textContent = text;
    shortcut.addEventListener("click", (e7) => {
      e7.preventDefault();
      e7.stopPropagation();
      this.onShortcutClick(this.shortcut.keySequence);
    });
    shortcut.addEventListener("mouseenter", () => {
      shortcut.style.backgroundColor = "rgba(156, 163, 175, 0.2)";
      shortcut.style.color = "#d1d5db";
    });
    shortcut.addEventListener("mouseleave", () => {
      shortcut.style.backgroundColor = "";
      shortcut.style.color = "#9ca3af";
    });
    shortcut.title = `Click to send: ${this.shortcut.keySequence}`;
    return shortcut;
  }
  isInsideClickable(element) {
    let current = element;
    while (current && current !== document.body) {
      if (current.tagName === "A" && current.classList.contains("terminal-link") || current.tagName === "SPAN" && current.classList.contains(TERMINAL_SHORTCUT_CLASS)) {
        return true;
      }
      current = current.parentElement;
    }
    return false;
  }
};

// src/client/components/terminal.ts
init_logger();

// src/client/utils/terminal-preferences.ts
init_logger();

// src/client/utils/mobile-utils.ts
function detectMobile() {
  return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent) || !!navigator.maxTouchPoints && navigator.maxTouchPoints > 1;
}

// src/client/utils/terminal-preferences.ts
var logger2 = createLogger("terminal-preferences");
var DEFAULT_PREFERENCES = {
  maxCols: 0,
  // No limit by default - take as much as possible
  fontSize: detectMobile() ? 12 : 14,
  // 12px on mobile, 14px on desktop
  fitHorizontally: false,
  theme: "dracula"
};
var STORAGE_KEY_TERMINAL_PREFS = "vibetunnel_terminal_preferences";
var TerminalPreferencesManager = class _TerminalPreferencesManager {
  constructor() {
    this.preferences = this.loadPreferences();
  }
  static getInstance() {
    if (!_TerminalPreferencesManager.instance) {
      _TerminalPreferencesManager.instance = new _TerminalPreferencesManager();
    }
    return _TerminalPreferencesManager.instance;
  }
  loadPreferences() {
    try {
      const saved = localStorage.getItem(STORAGE_KEY_TERMINAL_PREFS);
      if (saved) {
        const parsed = JSON.parse(saved);
        const merged = { ...DEFAULT_PREFERENCES, ...parsed };
        logger2.debug("Loaded terminal preferences:", merged);
        return merged;
      }
    } catch (error) {
      logger2.warn("Failed to load terminal preferences", { error });
    }
    logger2.debug("Using default terminal preferences");
    return { ...DEFAULT_PREFERENCES };
  }
  savePreferences() {
    try {
      const toSave = JSON.stringify(this.preferences);
      localStorage.setItem(STORAGE_KEY_TERMINAL_PREFS, toSave);
      logger2.debug("Saved terminal preferences to localStorage");
    } catch (error) {
      logger2.warn("Failed to save terminal preferences", { error });
    }
  }
  getMaxCols() {
    return this.preferences.maxCols;
  }
  setMaxCols(maxCols) {
    this.preferences.maxCols = Math.max(0, maxCols);
    this.savePreferences();
  }
  getFontSize() {
    return this.preferences.fontSize;
  }
  setFontSize(fontSize) {
    this.preferences.fontSize = Math.max(8, Math.min(32, fontSize));
    this.savePreferences();
  }
  getFitHorizontally() {
    return this.preferences.fitHorizontally;
  }
  setFitHorizontally(fitHorizontally) {
    this.preferences.fitHorizontally = fitHorizontally;
    this.savePreferences();
  }
  getTheme() {
    return this.preferences.theme;
  }
  setTheme(theme) {
    logger2.debug("Setting terminal theme:", theme);
    this.preferences.theme = theme;
    this.savePreferences();
  }
  getPreferences() {
    return { ...this.preferences };
  }
  resetToDefaults() {
    this.preferences = { ...DEFAULT_PREFERENCES };
    this.savePreferences();
  }
};

// src/client/utils/terminal-themes.ts
var TERMINAL_THEMES = [
  {
    id: "auto",
    name: "Auto",
    description: "Follow system theme",
    colors: {}
    // Actual colors determined at runtime
  },
  {
    id: "dark",
    name: "Dark",
    description: "VibeTunnel default dark",
    colors: {
      background: "#1e1e1e",
      foreground: "#d4d4d4",
      cursor: "rgb(var(--color-primary))",
      cursorAccent: "#1e1e1e",
      black: "#000000",
      red: "#cd0000",
      green: "#00cd00",
      yellow: "#cdcd00",
      blue: "#0000ee",
      magenta: "#cd00cd",
      cyan: "#00cdcd",
      white: "#e5e5e5",
      brightBlack: "#7f7f7f",
      brightRed: "#ff0000",
      brightGreen: "#00ff00",
      brightYellow: "#ffff00",
      brightBlue: "#5c5cff",
      brightMagenta: "#ff00ff",
      brightCyan: "#00ffff",
      brightWhite: "#ffffff"
    }
  },
  {
    id: "light",
    name: "Light",
    description: "Soft light theme",
    colors: {
      background: "#f8f9fa",
      foreground: "#1f2328",
      cursor: "rgb(var(--color-primary))",
      cursorAccent: "#f8f9fa",
      black: "#24292f",
      red: "#cf222e",
      green: "#1a7f37",
      yellow: "#9a6700",
      blue: "#0969da",
      magenta: "#8250df",
      cyan: "#1b7c83",
      white: "#6e7781",
      brightBlack: "#57606a",
      brightRed: "#da3633",
      brightGreen: "#2da44e",
      brightYellow: "#bf8700",
      brightBlue: "#218bff",
      brightMagenta: "#a475f9",
      brightCyan: "#3192aa",
      brightWhite: "#8c959f",
      selectionBackground: "#0969da",
      selectionForeground: "#ffffff",
      selectionInactiveBackground: "#e1e4e8"
    }
  },
  {
    id: "vscode-dark",
    name: "VS Code Dark",
    description: "Popular theme from Visual Studio Code",
    colors: {
      background: "#1E1E1E",
      foreground: "#D4D4D4",
      cursor: "#AEAFAD",
      cursorAccent: "#1E1E1E",
      black: "#000000",
      red: "#CD3131",
      green: "#0DBC79",
      yellow: "#E5E510",
      blue: "#2472C8",
      magenta: "#BC3FBC",
      cyan: "#11A8CD",
      white: "#E5E5E5",
      brightBlack: "#666666",
      brightRed: "#F14C4C",
      brightGreen: "#23D18B",
      brightYellow: "#F5F543",
      brightBlue: "#3B8EEA",
      brightMagenta: "#D670D6",
      brightCyan: "#29B8DB",
      brightWhite: "#FFFFFF"
    }
  },
  {
    id: "dracula",
    name: "Dracula",
    description: "Classic dark theme",
    colors: {
      background: "#282A36",
      foreground: "#F8F8F2",
      cursor: "#F8F8F2",
      cursorAccent: "#282A36",
      black: "#21222C",
      red: "#FF5555",
      green: "#50FA7B",
      yellow: "#F1FA8C",
      blue: "#BD93F9",
      magenta: "#FF79C6",
      cyan: "#8BE9FD",
      white: "#F8F8F2",
      brightBlack: "#6272A4",
      brightRed: "#FF6E6E",
      brightGreen: "#69FF94",
      brightYellow: "#FFFFA5",
      brightBlue: "#D6ACFF",
      brightMagenta: "#FF92DF",
      brightCyan: "#A4FFFF",
      brightWhite: "#FFFFFF"
    }
  },
  {
    id: "nord",
    name: "Nord",
    description: "Arctic north-bluish palette",
    colors: {
      background: "#2E3440",
      foreground: "#D8DEE9",
      cursor: "#D8DEE9",
      cursorAccent: "#2E3440",
      black: "#3B4252",
      red: "#BF616A",
      green: "#A3BE8C",
      yellow: "#EBCB8B",
      blue: "#81A1C1",
      magenta: "#B48EAD",
      cyan: "#88C0D0",
      white: "#E5E9F0",
      brightBlack: "#4C566A",
      brightRed: "#BF616A",
      brightGreen: "#A3BE8C",
      brightYellow: "#EBCB8B",
      brightBlue: "#81A1C1",
      brightMagenta: "#B48EAD",
      brightCyan: "#8FBCBB",
      brightWhite: "#ECEFF4"
    }
  }
];

// src/client/utils/theme-utils.ts
function getCurrentTheme() {
  const explicitTheme = document.documentElement.getAttribute("data-theme");
  if (explicitTheme === "dark") return "dark";
  if (explicitTheme === "light") return "light";
  return window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
}
function isDarkMode() {
  return getCurrentTheme() === "dark";
}

// src/client/utils/url-highlighter.ts
var MIN_URL_LENGTH = 7;
var MAX_URL_LENGTH = 2048;
var URL_PROTOCOLS = ["https://", "http://", "file://"];
var TERMINAL_LINK_CLASS = "terminal-link";
var URL_START_PATTERN = /https?:\/\/|file:\/\//g;
var PARTIAL_PROTOCOL_PATTERN = /(^|\s)(h|ht|htt|http|https|https:|https:\/|https:\/\/|f|fi|fil|file|file:|file:\/|file:\/\/)$/;
var DOMAIN_START_PATTERN = /^[a-zA-Z0-9[\].-]/;
var PATH_START_PATTERN = /^[/a-zA-Z0-9[\].-]/;
var URL_END_CHARS_PATTERN = /[^\w\-._~:/?#[\]@!$&'()*+,;=%{}|\\^`]/;
var LOCALHOST_PATTERN = /^(https?:\/\/(localhost|[\d.]+|\[[\da-fA-F:]+\]|(([a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\.)*[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?\.[a-zA-Z]+))(:\d+)?.*|file:\/\/.+)/;
var VALID_DOMAIN_LABEL = /^[a-zA-Z0-9]([a-zA-Z0-9-]*[a-zA-Z0-9])?$/;
function processLinks(container) {
  const processor = new LinkProcessor(container);
  processor.process();
}
var LinkProcessor = class {
  constructor(container) {
    this.processedRanges = /* @__PURE__ */ new Map();
    this.container = container;
    this.lines = container.querySelectorAll(".terminal-line");
  }
  process() {
    if (this.lines.length === 0) return;
    for (let i6 = 0; i6 < this.lines.length; i6++) {
      this.processLine(i6);
    }
  }
  processLine(lineIndex) {
    if (lineIndex > 0) {
      this.checkPreviousLineContinuation(lineIndex);
    }
    this.findUrlsInLine(lineIndex);
  }
  checkPreviousLineContinuation(lineIndex) {
    const currentLineText = this.getLineText(lineIndex);
    const prevLineText = this.getLineText(lineIndex - 1);
    const incompleteUrl = this.findIncompleteUrlAtLineEnd(prevLineText, currentLineText);
    if (incompleteUrl) {
      const { startPos } = incompleteUrl;
      const completeUrl = this.buildMultiLineUrl(lineIndex - 1, startPos);
      if (completeUrl && this.isValidUrl(completeUrl.url)) {
        if (!this.isRangeProcessed(lineIndex - 1, startPos, completeUrl.endLine)) {
          this.createUrlLinks(completeUrl.url, lineIndex - 1, completeUrl.endLine, startPos);
          this.markRangeAsProcessed(lineIndex - 1, completeUrl.endLine, startPos, completeUrl.url);
        }
      }
    }
  }
  findIncompleteUrlAtLineEnd(prevLineText, currentLineText) {
    for (const protocol of URL_PROTOCOLS) {
      const index = prevLineText.lastIndexOf(protocol);
      if (index >= 0 && prevLineText.endsWith(protocol)) {
        if (DOMAIN_START_PATTERN.test(currentLineText.trimStart())) {
          return { startPos: index, protocol };
        }
      }
    }
    const partialMatch = prevLineText.match(PARTIAL_PROTOCOL_PATTERN);
    if (partialMatch) {
      const protocol = partialMatch[2];
      const startPos = (partialMatch.index ?? 0) + (partialMatch[1] ? 1 : 0);
      if (this.isValidContinuation(protocol, currentLineText)) {
        return { startPos, protocol };
      }
    }
    return null;
  }
  isValidContinuation(partialProtocol, nextLineText) {
    const trimmedText = nextLineText.trimStart();
    if (partialProtocol === "https://" || partialProtocol === "file://") {
      return DOMAIN_START_PATTERN.test(trimmedText);
    }
    if (partialProtocol.endsWith("/")) {
      return PATH_START_PATTERN.test(trimmedText);
    }
    const combined = partialProtocol + trimmedText;
    return /^(https?:\/\/|file:\/\/)/.test(combined);
  }
  isValidUrlContinuation(currentUrl, nextLineText) {
    const trimmedNext = nextLineText.trimStart();
    if (!trimmedNext) {
      return false;
    }
    if (!currentUrl.includes("://")) {
      const combined = currentUrl + trimmedNext;
      return /^(https?:|file:|https?:\/|file:\/|https?:\/\/|file:\/\/)/.test(combined);
    }
    if (currentUrl.match(/(https?:|file:)\/\/$/)) {
      return DOMAIN_START_PATTERN.test(trimmedNext);
    }
    if (/^(and|or|but|the|is|are|was|were|been|have|has|had|will|would|could|should|may|might|check|visit|go|see|click|open|navigate)\b/i.test(
      trimmedNext
    )) {
      return false;
    }
    if (/^[!?;]/.test(trimmedNext)) {
      return false;
    }
    if (/^\.(\s|$)/.test(trimmedNext)) {
      return false;
    }
    const firstWord = trimmedNext.split(/\s/)[0];
    if (/[/:._-]/.test(firstWord)) {
      return true;
    }
    if (/^[a-zA-Z]+$/.test(firstWord) && firstWord.length > 2) {
      const commonWords = /^(next|line|with|text|this|that|then|when|where|which|while|after|before|during|since|until|above|below|between|into|through|under|over|about|against|among|around|behind|beside|beyond|inside|outside|toward|within|without|according|although|because|however|therefore|moreover|nevertheless|furthermore|otherwise|meanwhile|indeed|instead|likewise|similarly|specifically|subsequently|ultimately|additionally|consequently|eventually|finally|initially|particularly|previously|recently|suddenly|usually)/i;
      return !commonWords.test(firstWord);
    }
    return /^[a-zA-Z0-9._~:/?#[\]@!$&'()*+,;=%-]/.test(trimmedNext);
  }
  findUrlsInLine(lineIndex) {
    const lineText = this.getLineText(lineIndex);
    URL_START_PATTERN.lastIndex = 0;
    let match = URL_START_PATTERN.exec(lineText);
    while (match !== null) {
      const urlStart = match.index;
      if (this.isPositionProcessed(lineIndex, urlStart)) {
        match = URL_START_PATTERN.exec(lineText);
        continue;
      }
      const completeUrl = this.buildMultiLineUrl(lineIndex, urlStart);
      if (completeUrl && this.isValidUrl(completeUrl.url)) {
        this.createUrlLinks(completeUrl.url, lineIndex, completeUrl.endLine, urlStart);
        this.markRangeAsProcessed(lineIndex, completeUrl.endLine, urlStart, completeUrl.url);
      }
      match = URL_START_PATTERN.exec(lineText);
    }
  }
  buildMultiLineUrl(startLine, startCol) {
    let url = "";
    let endLine = startLine;
    for (let i6 = startLine; i6 < this.lines.length; i6++) {
      const lineText = this.getLineText(i6);
      let remainingText;
      if (i6 === startLine) {
        remainingText = lineText.substring(startCol);
      } else {
        const currentUrl = url;
        const shouldContinue = this.isValidUrlContinuation(currentUrl, lineText);
        if (!shouldContinue) {
          endLine = i6 - 1;
          break;
        }
        remainingText = lineText.trimStart();
        if (!remainingText) {
          endLine = i6 - 1;
          break;
        }
      }
      const urlEnd = this.findUrlEndInText(remainingText);
      if (urlEnd >= 0) {
        url += remainingText.substring(0, urlEnd);
        endLine = i6;
        break;
      } else {
        url += remainingText;
        endLine = i6;
        if (i6 === this.lines.length - 1) break;
      }
    }
    return { url: this.cleanUrl(url), endLine };
  }
  findUrlEndInText(text) {
    const whitespaceIndex = text.search(/\s/);
    if (whitespaceIndex >= 0) return whitespaceIndex;
    const endMatch = text.match(URL_END_CHARS_PATTERN);
    if (endMatch && endMatch.index !== void 0) {
      return endMatch.index;
    }
    return -1;
  }
  createUrlLinks(url, startLine, endLine, startCol) {
    const highlighter = new LinkHighlighter(this.lines, url);
    highlighter.createLinks(startLine, endLine, startCol);
  }
  getLineText(lineIndex) {
    if (lineIndex < 0 || lineIndex >= this.lines.length) return "";
    return this.lines[lineIndex].textContent || "";
  }
  isValidUrl(url) {
    if (url.length < MIN_URL_LENGTH || url.length > MAX_URL_LENGTH) {
      return false;
    }
    if (/[\n\r\t]/.test(url)) {
      return false;
    }
    if (!LOCALHOST_PATTERN.test(url)) {
      return false;
    }
    try {
      const parsed = new URL(url);
      if (!["http:", "https:", "file:"].includes(parsed.protocol)) {
        return false;
      }
      if (parsed.protocol === "http:" || parsed.protocol === "https:") {
        const hostname = parsed.hostname;
        if (hostname === "localhost" || /^[\d.]+$/.test(hostname) || hostname.startsWith("[")) {
          return true;
        }
        const labels = hostname.split(".");
        if (labels.length < 2) {
          return false;
        }
        for (let i6 = 0; i6 < labels.length; i6++) {
          if (!VALID_DOMAIN_LABEL.test(labels[i6])) {
            return false;
          }
        }
        const tld = labels[labels.length - 1];
        if (!/[a-zA-Z]/.test(tld)) {
          return false;
        }
      }
      return true;
    } catch {
      return false;
    }
  }
  cleanUrl(url) {
    let cleaned = url;
    const openParens = (cleaned.match(/\(/g) || []).length;
    const closeParens = (cleaned.match(/\)/g) || []).length;
    if (closeParens > openParens) {
      const toRemove = closeParens - openParens;
      cleaned = cleaned.replace(/\)+$/, (match) => match.substring(0, match.length - toRemove));
    }
    cleaned = cleaned.replace(/[.,;:!?]+$/, "");
    return cleaned;
  }
  isRangeProcessed(startLine, startCol, endLine) {
    for (let line = startLine; line <= endLine; line++) {
      if (this.isPositionProcessed(line, line === startLine ? startCol : 0)) {
        return true;
      }
    }
    return false;
  }
  isPositionProcessed(line, position) {
    const ranges = this.processedRanges.get(line);
    if (!ranges) return false;
    return ranges.some((range) => position >= range.start && position < range.end);
  }
  markRangeAsProcessed(startLine, endLine, startCol, url) {
    let remainingUrl = url;
    let currentLine = startLine;
    while (currentLine <= endLine && remainingUrl.length > 0) {
      const lineText = this.getLineText(currentLine);
      if (!this.processedRanges.has(currentLine)) {
        this.processedRanges.set(currentLine, []);
      }
      const ranges = this.processedRanges.get(currentLine);
      if (!ranges) continue;
      let rangeStart;
      let rangeEnd;
      if (currentLine === startLine) {
        rangeStart = startCol;
        const availableText = lineText.substring(startCol);
        const urlPartLength = Math.min(availableText.length, remainingUrl.length);
        rangeEnd = startCol + urlPartLength;
      } else {
        const leadingWhitespace = lineText.match(/^\s*/);
        rangeStart = leadingWhitespace ? leadingWhitespace[0].length : 0;
        const availableText = lineText.substring(rangeStart);
        let urlPartLength = Math.min(availableText.length, remainingUrl.length);
        if (currentLine === endLine) {
          const endMatch = availableText.substring(0, urlPartLength).search(URL_END_CHARS_PATTERN);
          if (endMatch >= 0) {
            urlPartLength = endMatch;
          }
        }
        rangeEnd = rangeStart + urlPartLength;
      }
      ranges.push({ start: rangeStart, end: rangeEnd });
      remainingUrl = remainingUrl.substring(rangeEnd - rangeStart);
      currentLine++;
    }
  }
};
var LinkHighlighter = class {
  constructor(lines, url) {
    this.lines = lines;
    this.url = url;
  }
  createLinks(startLine, endLine, startCol) {
    let remainingUrl = this.url;
    for (let lineIdx = startLine; lineIdx <= endLine; lineIdx++) {
      const line = this.lines[lineIdx];
      const lineText = line.textContent || "";
      let colStart;
      let colEnd;
      if (lineIdx === startLine) {
        colStart = startCol;
        const lineUrlPart = lineText.substring(startCol);
        colEnd = startCol + Math.min(lineUrlPart.length, remainingUrl.length);
      } else {
        const leadingWhitespace = lineText.match(/^\s*/);
        colStart = leadingWhitespace ? leadingWhitespace[0].length : 0;
        const availableText = lineText.substring(colStart);
        const urlPartLength = Math.min(availableText.length, remainingUrl.length);
        const endMatch = availableText.match(/[\s<>"'`]/);
        const actualLength = endMatch ? Math.min(endMatch.index ?? urlPartLength, urlPartLength) : urlPartLength;
        colEnd = colStart + actualLength;
      }
      if (colStart < colEnd) {
        this.wrapTextInLink(line, colStart, colEnd);
        remainingUrl = remainingUrl.substring(colEnd - colStart);
      }
      if (remainingUrl.length === 0) break;
    }
  }
  wrapTextInLink(lineElement, startCol, endCol) {
    const walker = document.createTreeWalker(lineElement, NodeFilter.SHOW_TEXT, null);
    const textNodeData = [];
    let currentPos = 0;
    let node = walker.nextNode();
    while (node) {
      const textNode = node;
      const nodeText = textNode.textContent || "";
      const nodeStart = currentPos;
      const nodeEnd = currentPos + nodeText.length;
      if (nodeEnd > startCol && nodeStart < endCol) {
        textNodeData.push({ node: textNode, start: nodeStart, end: nodeEnd });
      }
      currentPos = nodeEnd;
      node = walker.nextNode();
    }
    for (let i6 = textNodeData.length - 1; i6 >= 0; i6--) {
      const { node: textNode, start: nodeStart } = textNodeData[i6];
      const nodeText = textNode.textContent || "";
      const linkStart = Math.max(0, startCol - nodeStart);
      const linkEnd = Math.min(nodeText.length, endCol - nodeStart);
      if (linkStart < linkEnd) {
        this.wrapTextNode(textNode, linkStart, linkEnd);
      }
    }
  }
  wrapTextNode(textNode, start, end) {
    const parent = textNode.parentNode;
    if (!parent) return;
    if (this.isInsideLink(parent)) return;
    const nodeText = textNode.textContent || "";
    const beforeText = nodeText.substring(0, start);
    const linkText = nodeText.substring(start, end);
    const afterText = nodeText.substring(end);
    const linkElement = this.createLinkElement(linkText);
    const fragment = document.createDocumentFragment();
    if (beforeText) {
      fragment.appendChild(document.createTextNode(beforeText));
    }
    fragment.appendChild(linkElement);
    if (afterText) {
      fragment.appendChild(document.createTextNode(afterText));
    }
    parent.replaceChild(fragment, textNode);
  }
  createLinkElement(text) {
    const link = document.createElement("a");
    link.className = TERMINAL_LINK_CLASS;
    link.href = this.url;
    link.target = "_blank";
    link.rel = "noopener noreferrer";
    link.style.color = "#4fc3f7";
    link.style.textDecoration = "underline";
    link.style.cursor = "pointer";
    link.textContent = text;
    link.addEventListener("mouseenter", () => {
      link.style.backgroundColor = "rgba(79, 195, 247, 0.2)";
    });
    link.addEventListener("mouseleave", () => {
      link.style.backgroundColor = "";
    });
    return link;
  }
  isInsideLink(element) {
    let current = element;
    while (current && current !== document.body) {
      if (current.tagName === "A" && current.classList.contains(TERMINAL_LINK_CLASS)) {
        return true;
      }
      current = current.parentElement;
    }
    return false;
  }
};
var UrlHighlighter = {
  processLinks
};

// src/client/components/terminal.ts
var logger3 = createLogger("terminal");
var Terminal = class extends i4 {
  constructor() {
    super(...arguments);
    this.sessionId = "";
    this.sessionStatus = "running";
    this.cols = 80;
    this.rows = 24;
    this.fontSize = 14;
    this.fitHorizontally = false;
    this.maxCols = 0;
    this.theme = "auto";
    this.disableClick = false;
    this.hideScrollButton = false;
    this.initialCols = 0;
    this.initialRows = 0;
    // Initial terminal height from session creation
    this.originalFontSize = 14;
    this.userOverrideWidth = false;
    this.terminal = null;
    this._viewportY = 0;
    this.followCursorEnabled = true;
    // Whether to follow cursor on writes
    this.programmaticScroll = false;
    // Flag to prevent state updates during programmatic scrolling
    // Debug performance tracking
    this.debugMode = false;
    this.renderCount = 0;
    this.totalRenderTime = 0;
    this.lastRenderTime = 0;
    this.actualRows = 24;
    this.cursorVisible = true;
    // Track cursor visibility state
    this.container = null;
    this.explicitSizeSet = false;
    // Flag to prevent auto-resize when size is explicitly set
    // Virtual scrolling optimization
    this.renderPending = false;
    this.momentumVelocityY = 0;
    this.momentumVelocityX = 0;
    this.momentumAnimation = null;
    this.resizeObserver = null;
    this.mobileWidthResizeComplete = false;
    this.pendingResize = null;
    this.lastCols = 0;
    this.lastRows = 0;
    this.isMobile = false;
    this.mobileInitialResizeTimeout = null;
    // Operation queue for batching buffer modifications
    this.operationQueue = [];
    /**
     * Handle click on scroll-to-bottom indicator
     */
    this.handleScrollToBottom = () => {
      this.followCursorEnabled = true;
      this.scrollToBottom();
      this.requestUpdate();
    };
    /**
     * Handle fit to width toggle
     */
    this.handleFitToggle = () => {
      if (!this.terminal || !this.container) {
        this.fitHorizontally = !this.fitHorizontally;
        this.requestUpdate();
        return;
      }
      const buffer = this.terminal.buffer.active;
      const currentLineHeight = this.fontSize * 1.2;
      const currentScrollLines = currentLineHeight > 0 ? this.viewportY / currentLineHeight : 0;
      const wasAtBottom = this.isScrolledToBottom();
      if (!this.fitHorizontally) {
        this.originalFontSize = this.fontSize;
      }
      this.fitHorizontally = !this.fitHorizontally;
      if (!this.fitHorizontally) {
        this.fontSize = this.originalFontSize;
      }
      this.requestResize("fit-mode-change");
      if (wasAtBottom) {
        this.scrollToBottom();
      } else {
        const newLineHeight = this.fontSize * 1.2;
        const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * newLineHeight);
        const newViewportY = currentScrollLines * newLineHeight;
        this.viewportY = Math.max(0, Math.min(maxScrollPixels, newViewportY));
      }
      this.requestUpdate();
    };
    this.handlePaste = async (e7) => {
      e7.preventDefault();
      e7.stopPropagation();
      let clipboardData = e7.clipboardData?.getData("text/plain");
      if (!clipboardData && navigator.clipboard) {
        try {
          clipboardData = await navigator.clipboard.readText();
        } catch (error) {
          logger3.error("Failed to read clipboard via navigator API", error);
        }
      }
      if (clipboardData) {
        this.dispatchEvent(
          new CustomEvent("terminal-paste", {
            detail: { text: clipboardData },
            bubbles: true
          })
        );
      }
    };
    this.handleClick = () => {
      if (this.disableClick) {
        return;
      }
      if (this.container) {
        this.container.focus();
      }
    };
    this.handleShortcutClick = (keySequence) => {
      this.dispatchEvent(
        new CustomEvent("terminal-input", {
          detail: { text: keySequence },
          bubbles: true
        })
      );
    };
  }
  // Disable shadow DOM for Tailwind compatibility and native text selection
  createRenderRoot() {
    return this;
  }
  get viewportY() {
    return this._viewportY;
  }
  set viewportY(value) {
    this._viewportY = value;
  }
  queueRenderOperation(operation) {
    this.operationQueue.push(operation);
    if (!this.renderPending) {
      this.renderPending = true;
      requestAnimationFrame(() => {
        this.processOperationQueue().then(() => {
          if (this.operationQueue.length === 0) {
            this.renderPending = false;
          }
        });
      });
    }
  }
  requestRenderBuffer() {
    logger3.debug("Requesting render buffer update");
    this.queueRenderOperation(() => {
      logger3.debug("Executing render operation");
      this.renderBuffer();
    });
  }
  async processOperationQueue() {
    const startTime = performance.now();
    const MAX_FRAME_TIME = 8;
    while (this.operationQueue.length > 0) {
      const operation = this.operationQueue.shift();
      if (operation) {
        await operation();
      }
      if (performance.now() - startTime > MAX_FRAME_TIME && this.operationQueue.length > 0) {
        await new Promise((resolve) => {
          requestAnimationFrame(() => {
            this.processOperationQueue().then(resolve);
          });
        });
        return;
      }
    }
    this.renderBuffer();
    if (this.operationQueue.length === 0) {
      this.renderPending = false;
    }
  }
  connectedCallback() {
    const prefs = TerminalPreferencesManager.getInstance();
    this.theme = prefs.getTheme();
    super.connectedCallback();
    this.debugMode = new URLSearchParams(window.location.search).has("debug");
    this.themeObserver = new MutationObserver(() => {
      if (this.terminal && this.theme === "auto") {
        logger3.debug("Auto theme detected system change, updating terminal");
        this.terminal.options.theme = this.getTerminalTheme();
        this.updateTerminalColorProperties(this.getTerminalTheme());
        this.requestRenderBuffer();
      } else if (this.theme !== "auto") {
        logger3.debug("Ignoring system theme change - explicit theme selected:", this.theme);
      }
    });
    this.themeObserver.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["data-theme"]
    });
    if (this.sessionId) {
      try {
        const stored = localStorage.getItem(`terminal-width-override-${this.sessionId}`);
        if (stored !== null) {
          this.userOverrideWidth = stored === "true";
        }
      } catch (error) {
        logger3.warn("Failed to load terminal width preference from localStorage:", error);
      }
    }
  }
  updated(changedProperties) {
    if (changedProperties.has("sessionId") && this.sessionId) {
      try {
        const stored = localStorage.getItem(`terminal-width-override-${this.sessionId}`);
        if (stored !== null) {
          this.userOverrideWidth = stored === "true";
          if (this.container) {
            this.requestResize("property-change");
          }
        }
      } catch (error) {
        logger3.warn("Failed to load terminal width preference from localStorage:", error);
      }
    }
    if (changedProperties.has("cols") || changedProperties.has("rows")) {
      if (this.terminal && !this.explicitSizeSet) {
        this.reinitializeTerminal();
      }
      this.explicitSizeSet = false;
    }
    if (changedProperties.has("fontSize")) {
      if (!this.fitHorizontally) {
        this.originalFontSize = this.fontSize;
      }
      if (this.terminal && this.container) {
        this.requestResize("property-change");
      }
    }
    if (changedProperties.has("fitHorizontally")) {
      if (!this.fitHorizontally) {
        this.fontSize = this.originalFontSize;
      }
      this.requestResize("property-change");
    }
    if (changedProperties.has("maxCols")) {
      if (this.terminal && this.container) {
        this.requestResize("property-change");
      }
    }
    if (changedProperties.has("theme")) {
      logger3.debug("Terminal theme changed to:", this.theme);
      if (this.terminal?.options) {
        const resolvedTheme = this.getTerminalTheme();
        logger3.debug("Applying terminal theme:", this.theme);
        this.terminal.options.theme = resolvedTheme;
        this.updateTerminalColorProperties(resolvedTheme);
        if (this.container) {
          this.container.innerHTML = "";
        }
        this.requestRenderBuffer();
      } else {
        logger3.warn("No terminal instance found for theme update");
      }
    }
  }
  disconnectedCallback() {
    this.cleanup();
    if (this.themeObserver) {
      this.themeObserver.disconnect();
    }
    super.disconnectedCallback();
  }
  // Method to set user override when width is manually selected
  setUserOverrideWidth(override) {
    this.userOverrideWidth = override;
    if (this.isMobile && override) {
      this.mobileWidthResizeComplete = false;
      logger3.debug("[Terminal] Mobile: Resetting width resize block for user-initiated change");
    }
    if (this.sessionId) {
      try {
        localStorage.setItem(`terminal-width-override-${this.sessionId}`, String(override));
      } catch (error) {
        logger3.warn("Failed to save terminal width preference to localStorage:", error);
      }
    }
    if (this.container) {
      this.requestResize("property-change");
    }
  }
  cleanup() {
    if (this.momentumAnimation) {
      cancelAnimationFrame(this.momentumAnimation);
      this.momentumAnimation = null;
    }
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
      this.resizeObserver = null;
    }
    if (this.pendingResize) {
      cancelAnimationFrame(this.pendingResize);
      this.pendingResize = null;
    }
    if (this.mobileInitialResizeTimeout) {
      clearTimeout(this.mobileInitialResizeTimeout);
      this.mobileInitialResizeTimeout = null;
    }
    if (this.terminal) {
      this.terminal.dispose();
      this.terminal = null;
    }
  }
  firstUpdated() {
    this.originalFontSize = this.fontSize;
    this.initializeTerminal();
  }
  requestResize(source) {
    const MOBILE_BREAKPOINT = 768;
    this.isMobile = window.innerWidth < MOBILE_BREAKPOINT;
    logger3.debug(
      `[Terminal] Resize requested from ${source} (mobile: ${this.isMobile}, width: ${window.innerWidth})`
    );
    if (this.pendingResize) {
      cancelAnimationFrame(this.pendingResize);
    }
    this.pendingResize = requestAnimationFrame(() => {
      this.fitTerminal(source);
      this.pendingResize = null;
    });
  }
  shouldResize(cols, rows) {
    if (this.isMobile && this.mobileWidthResizeComplete && !this.userOverrideWidth) {
      const widthChanged = this.lastCols !== cols;
      const heightChanged = this.lastRows !== rows;
      if (widthChanged) {
        logger3.debug(`[Terminal] Preventing WIDTH resize on mobile (width already set)`);
        return false;
      }
      if (heightChanged) {
        logger3.debug(
          `[Terminal] Allowing HEIGHT resize on mobile: ${this.lastRows} \u2192 ${rows} rows`
        );
        this.lastRows = rows;
        return true;
      }
      return false;
    }
    const changed = this.lastCols !== cols || this.lastRows !== rows;
    if (changed) {
      logger3.debug(
        `[Terminal] Dimensions changed: ${this.lastCols}x${this.lastRows} \u2192 ${cols}x${rows}`
      );
      this.lastCols = cols;
      this.lastRows = rows;
      if (this.isMobile && !this.mobileWidthResizeComplete) {
        this.mobileWidthResizeComplete = true;
        logger3.debug(`[Terminal] Mobile WIDTH resize complete - blocking future width changes`);
      }
    }
    return changed;
  }
  getTerminalTheme() {
    let themeId = this.theme;
    if (themeId === "auto") {
      themeId = getCurrentTheme();
    }
    const preset = TERMINAL_THEMES.find((t6) => t6.id === themeId) || TERMINAL_THEMES[0];
    return { ...preset.colors };
  }
  /**
   * Updates CSS custom properties for terminal colors based on theme
   * This allows the already-rendered HTML to immediately pick up new colors
   */
  updateTerminalColorProperties(themeColors) {
    logger3.debug("Updating terminal CSS color properties");
    const colorMapping = {
      black: 0,
      red: 1,
      green: 2,
      yellow: 3,
      blue: 4,
      magenta: 5,
      cyan: 6,
      white: 7,
      brightBlack: 8,
      brightRed: 9,
      brightGreen: 10,
      brightYellow: 11,
      brightBlue: 12,
      brightMagenta: 13,
      brightCyan: 14,
      brightWhite: 15
    };
    Object.entries(colorMapping).forEach(([colorName, colorIndex]) => {
      if (themeColors[colorName]) {
        const cssProperty = `--terminal-color-${colorIndex}`;
        document.documentElement.style.setProperty(cssProperty, themeColors[colorName]);
        logger3.debug(`Set CSS property ${cssProperty}:`, themeColors[colorName]);
      }
    });
    if (themeColors.foreground) {
      document.documentElement.style.setProperty("--terminal-foreground", themeColors.foreground);
      logger3.debug("Set terminal foreground color:", themeColors.foreground);
    }
    if (themeColors.background) {
      document.documentElement.style.setProperty("--terminal-background", themeColors.background);
      logger3.debug("Set terminal background color:", themeColors.background);
    }
    logger3.debug("CSS terminal color properties updated");
  }
  async initializeTerminal() {
    try {
      logger3.debug("initializeTerminal starting");
      this.requestUpdate();
      this.container = this.querySelector("#terminal-container");
      if (!this.container) {
        const error = new Error("Terminal container not found");
        logger3.error("terminal container not found", error);
        throw error;
      }
      logger3.debug("Terminal container found, proceeding with setup");
      await this.setupTerminal();
      this.setupResize();
      this.setupScrolling();
      this.viewportY = 0;
      if (this.terminal) {
        this.terminal.scrollToTop();
      }
      this.requestUpdate();
    } catch (error) {
      logger3.error("failed to initialize terminal:", error);
      this.requestUpdate();
    }
  }
  async reinitializeTerminal() {
    if (this.terminal) {
      if (this.container) {
        void this.container.offsetHeight;
      }
      const safeCols = Number.isFinite(this.cols) ? Math.floor(this.cols) : 80;
      const safeRows = Number.isFinite(this.rows) ? Math.floor(this.rows) : 24;
      this.terminal.resize(safeCols, safeRows);
      this.requestResize("property-change");
    }
  }
  async setupTerminal() {
    try {
      this.terminal = new import_headless.Terminal({
        cursorBlink: true,
        cursorStyle: "block",
        cursorWidth: 1,
        lineHeight: 1.2,
        letterSpacing: 0,
        scrollback: 1e4,
        allowProposedApi: true,
        allowTransparency: false,
        convertEol: true,
        drawBoldTextInBrightColors: true,
        minimumContrastRatio: 1,
        macOptionIsMeta: true,
        altClickMovesCursor: true,
        rightClickSelectsWord: false,
        wordSeparator: " ()[]{}'\"`",
        theme: this.getTerminalTheme()
      });
      this.terminal.resize(this.cols, this.rows);
      this.requestRenderBuffer();
    } catch (error) {
      logger3.error("failed to create terminal:", error);
      throw error;
    }
  }
  measureCharacterWidth() {
    if (!this.container) return 8;
    const measureEl = document.createElement("div");
    measureEl.className = "terminal-line";
    measureEl.style.position = "absolute";
    measureEl.style.visibility = "hidden";
    measureEl.style.top = "0";
    measureEl.style.left = "0";
    measureEl.style.fontSize = `${this.fontSize}px`;
    measureEl.style.fontFamily = "Hack Nerd Font Mono, Fira Code, monospace";
    const testString = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?";
    const repeatCount = Math.ceil(this.cols / testString.length);
    const testContent = testString.repeat(repeatCount).substring(0, this.cols);
    measureEl.textContent = testContent;
    this.container.appendChild(measureEl);
    const measureRect = measureEl.getBoundingClientRect();
    const actualCharWidth = measureRect.width / this.cols;
    this.container.removeChild(measureEl);
    return Number.isFinite(actualCharWidth) && actualCharWidth > 0 ? actualCharWidth : 8;
  }
  fitTerminal(source) {
    if (!this.terminal || !this.container) {
      logger3.warn("[Terminal] Cannot fit terminal: terminal or container not initialized");
      return;
    }
    const timestamp = Date.now();
    const timeSinceLastFit = this._lastFitTime ? timestamp - this._lastFitTime : 0;
    this._lastFitTime = timestamp;
    logger3.debug(`[Terminal] \u{1F4F1} fitTerminal called`, {
      source: source || "unknown",
      isMobile: this.isMobile,
      windowWidth: window.innerWidth,
      timeSinceLastFit,
      cols: this.cols,
      rows: this.rows,
      actualRows: this.actualRows,
      bufferLength: this.terminal.buffer.active.length
    });
    if (this.isMobile) {
      logger3.debug(
        `[Terminal] Mobile detected in fitTerminal - source: ${source}, userAgent: ${navigator.userAgent}`
      );
    }
    const _oldActualRows = this.actualRows;
    const oldLineHeight = this.fontSize * 1.2;
    const wasAtBottom = this.isScrolledToBottom();
    const currentScrollLines = oldLineHeight > 0 ? this.viewportY / oldLineHeight : 0;
    if (this.fitHorizontally) {
      const containerWidth = this.container.clientWidth;
      const containerHeight = this.container.clientHeight;
      const targetCharWidth = containerWidth / this.cols;
      const currentCharWidth = this.measureCharacterWidth();
      const scaleFactor = targetCharWidth / currentCharWidth;
      const calculatedFontSize = this.fontSize * scaleFactor;
      const newFontSize = Math.max(4, Math.min(32, calculatedFontSize));
      this.fontSize = newFontSize;
      const lineHeight = this.fontSize * 1.2;
      const fittedRows = Math.max(1, Math.floor(containerHeight / lineHeight));
      this.actualRows = fittedRows;
      this.rows = fittedRows;
      if (this.terminal) {
        const safeCols = Number.isFinite(this.cols) ? Math.floor(this.cols) : 80;
        const safeRows = Number.isFinite(this.rows) ? Math.floor(this.rows) : 24;
        const oldCols = this.lastCols;
        const oldRows = this.lastRows;
        if (this.shouldResize(safeCols, safeRows)) {
          logger3.debug(`Resizing terminal (${source || "unknown"}): ${safeCols}x${safeRows}`);
          this.terminal.resize(safeCols, safeRows);
          const isWidthChange = safeCols !== oldCols;
          const isHeightOnlyChange = !isWidthChange && safeRows !== oldRows;
          this.dispatchEvent(
            new CustomEvent("terminal-resize", {
              detail: {
                cols: safeCols,
                rows: safeRows,
                isMobile: this.isMobile,
                isHeightOnlyChange,
                source: source || "unknown"
              },
              bubbles: true
            })
          );
        } else {
          logger3.debug(`Skipping resize (${source || "unknown"}): dimensions unchanged`);
        }
      }
    } else {
      const containerWidth = this.container.clientWidth || 800;
      const containerHeight = this.container.clientHeight || 600;
      const lineHeight = this.fontSize * 1.2;
      const charWidth = this.measureCharacterWidth();
      const safeCharWidth = Number.isFinite(charWidth) && charWidth > 0 ? charWidth : 8;
      const calculatedCols = Math.max(20, Math.floor(containerWidth / safeCharWidth)) - 1;
      const isTunneledSession = this.sessionId.startsWith("fwd_");
      if (this.maxCols > 0) {
        this.cols = Math.min(calculatedCols, this.maxCols);
      } else if (this.userOverrideWidth) {
        this.cols = calculatedCols;
      } else if (this.initialCols > 0 && isTunneledSession) {
        this.cols = Math.min(calculatedCols, this.initialCols);
      } else {
        this.cols = calculatedCols;
      }
      this.rows = Math.max(6, Math.floor(containerHeight / lineHeight));
      this.actualRows = this.rows;
      if (this.terminal) {
        const safeCols = Number.isFinite(this.cols) ? Math.floor(this.cols) : 80;
        const safeRows = Number.isFinite(this.rows) ? Math.floor(this.rows) : 24;
        const oldCols = this.lastCols;
        const oldRows = this.lastRows;
        if (this.shouldResize(safeCols, safeRows)) {
          logger3.debug(`Resizing terminal (${source || "unknown"}): ${safeCols}x${safeRows}`);
          this.terminal.resize(safeCols, safeRows);
          const isWidthChange = safeCols !== oldCols;
          const isHeightOnlyChange = !isWidthChange && safeRows !== oldRows;
          this.dispatchEvent(
            new CustomEvent("terminal-resize", {
              detail: {
                cols: safeCols,
                rows: safeRows,
                isMobile: this.isMobile,
                isHeightOnlyChange,
                source: source || "unknown"
              },
              bubbles: true
            })
          );
        } else {
          logger3.debug(`Skipping resize (${source || "unknown"}): dimensions unchanged`);
        }
      }
    }
    if (this.terminal) {
      const buffer = this.terminal.buffer.active;
      const newLineHeight = this.fontSize * 1.2;
      const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * newLineHeight);
      if (wasAtBottom) {
        this.viewportY = maxScrollPixels;
      } else {
        const newViewportY = currentScrollLines * newLineHeight;
        const clampedY = Math.max(0, Math.min(maxScrollPixels, newViewportY));
        this.viewportY = clampedY;
      }
    }
    this.requestRenderBuffer();
    this.requestUpdate();
  }
  setupResize() {
    if (!this.container) return;
    const MOBILE_BREAKPOINT = 768;
    this.isMobile = window.innerWidth < MOBILE_BREAKPOINT;
    logger3.debug(
      `[Terminal] Setting up resize - isMobile: ${this.isMobile}, width: ${window.innerWidth}, userAgent: ${navigator.userAgent}`
    );
    if (this.isMobile) {
      logger3.debug("[Terminal] Mobile detected - scheduling initial resize in 200ms");
      this.mobileInitialResizeTimeout = setTimeout(() => {
        logger3.debug("[Terminal] Mobile: Executing initial resize");
        this.fitTerminal("initial-mobile-only");
        logger3.debug(
          "[Terminal] Mobile: Initial width set, future WIDTH resizes blocked (height allowed for keyboard)"
        );
        this.mobileInitialResizeTimeout = null;
      }, 200);
    } else {
      logger3.debug("[Terminal] Desktop detected - setting up resize observers");
      this.resizeObserver = new ResizeObserver(() => {
        logger3.debug("[Terminal] ResizeObserver triggered");
        this.requestResize("ResizeObserver");
      });
      this.resizeObserver.observe(this.container);
      window.addEventListener("resize", () => {
        logger3.debug("[Terminal] Window resize event triggered");
        this.requestResize("window-resize");
      });
      logger3.debug("[Terminal] Desktop: Requesting initial resize");
      this.requestResize("initial-desktop");
    }
  }
  setupScrolling() {
    if (!this.container) return;
    this.container.addEventListener(
      "wheel",
      (e7) => {
        e7.preventDefault();
        const lineHeight = this.fontSize * 1.2;
        let deltaPixelsY = 0;
        let deltaPixelsX = 0;
        switch (e7.deltaMode) {
          case WheelEvent.DOM_DELTA_PIXEL:
            deltaPixelsY = e7.deltaY;
            deltaPixelsX = e7.deltaX;
            break;
          case WheelEvent.DOM_DELTA_LINE:
            deltaPixelsY = e7.deltaY * lineHeight;
            deltaPixelsX = e7.deltaX * lineHeight;
            break;
          case WheelEvent.DOM_DELTA_PAGE:
            deltaPixelsY = e7.deltaY * (this.actualRows * lineHeight);
            deltaPixelsX = e7.deltaX * (this.actualRows * lineHeight);
            break;
        }
        const scrollScale = 0.5;
        deltaPixelsY *= scrollScale;
        deltaPixelsX *= scrollScale;
        if (Math.abs(deltaPixelsY) > 0) {
          this.scrollViewportPixels(deltaPixelsY);
        }
        if (Math.abs(deltaPixelsX) > 0 && !this.fitHorizontally && this.container) {
          this.container.scrollLeft += deltaPixelsX;
        }
      },
      { passive: false }
    );
    let isScrolling = false;
    let lastY = 0;
    let lastX = 0;
    let touchHistory = [];
    const handlePointerDown = (e7) => {
      if (e7.pointerType !== "touch" || !e7.isPrimary) return;
      if (this.momentumAnimation) {
        cancelAnimationFrame(this.momentumAnimation);
        this.momentumAnimation = null;
      }
      isScrolling = false;
      lastY = e7.clientY;
      lastX = e7.clientX;
      touchHistory = [{ y: e7.clientY, x: e7.clientX, time: performance.now() }];
      this.container?.setPointerCapture(e7.pointerId);
    };
    const handlePointerMove = (e7) => {
      if (e7.pointerType !== "touch" || !this.container?.hasPointerCapture(e7.pointerId)) return;
      const currentY = e7.clientY;
      const currentX = e7.clientX;
      const deltaY = lastY - currentY;
      const deltaX = lastX - currentX;
      const now = performance.now();
      touchHistory.push({ y: currentY, x: currentX, time: now });
      if (touchHistory.length > 5) {
        touchHistory.shift();
      }
      if (!isScrolling && (Math.abs(deltaY) > 5 || Math.abs(deltaX) > 5)) {
        isScrolling = true;
      }
      if (!isScrolling) return;
      if (Math.abs(deltaY) > 0) {
        this.scrollViewportPixels(deltaY);
        lastY = currentY;
      }
      if (Math.abs(deltaX) > 0 && !this.fitHorizontally) {
        this.container.scrollLeft += deltaX;
        lastX = currentX;
      }
    };
    const handlePointerUp = (e7) => {
      if (e7.pointerType !== "touch") return;
      if (isScrolling && touchHistory.length >= 2) {
        const now = performance.now();
        const recent = touchHistory[touchHistory.length - 1];
        const older = touchHistory[touchHistory.length - 2];
        const timeDiff = now - older.time;
        const distanceY = recent.y - older.y;
        const distanceX = recent.x - older.x;
        const velocityY = timeDiff > 0 ? -distanceY / timeDiff : 0;
        const velocityX = timeDiff > 0 ? -distanceX / timeDiff : 0;
        const minVelocity = 0.3;
        if (Math.abs(velocityY) > minVelocity || Math.abs(velocityX) > minVelocity) {
          this.startMomentum(velocityY, velocityX);
        }
      }
      this.container?.releasePointerCapture(e7.pointerId);
    };
    const handlePointerCancel = (e7) => {
      if (e7.pointerType !== "touch") return;
      this.container?.releasePointerCapture(e7.pointerId);
    };
    this.container.addEventListener("pointerdown", handlePointerDown);
    this.container.addEventListener("pointermove", handlePointerMove);
    this.container.addEventListener("pointerup", handlePointerUp);
    this.container.addEventListener("pointercancel", handlePointerCancel);
  }
  scrollViewportPixels(deltaPixels) {
    if (!this.terminal) return;
    const buffer = this.terminal.buffer.active;
    const lineHeight = this.fontSize * 1.2;
    const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * lineHeight);
    const newViewportY = Math.max(0, Math.min(maxScrollPixels, this.viewportY + deltaPixels));
    if (newViewportY !== this.viewportY) {
      this.viewportY = newViewportY;
      this.updateFollowCursorState();
      this.requestRenderBuffer();
    }
  }
  startMomentum(velocityY, velocityX) {
    this.momentumVelocityY = velocityY * 16;
    this.momentumVelocityX = velocityX * 16;
    if (this.momentumAnimation) {
      cancelAnimationFrame(this.momentumAnimation);
    }
    this.animateMomentum();
  }
  animateMomentum() {
    const minVelocity = 0.1;
    const decayFactor = 0.92;
    const deltaY = this.momentumVelocityY;
    const deltaX = this.momentumVelocityX;
    let scrolled = false;
    if (Math.abs(deltaY) > minVelocity) {
      const buffer = this.terminal?.buffer.active;
      if (buffer) {
        const lineHeight = this.fontSize * 1.2;
        const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * lineHeight);
        const newViewportY = Math.max(0, Math.min(maxScrollPixels, this.viewportY + deltaY));
        if (newViewportY !== this.viewportY) {
          this.viewportY = newViewportY;
          scrolled = true;
          this.updateFollowCursorState();
        } else {
          this.momentumVelocityY = 0;
        }
      }
    }
    if (Math.abs(deltaX) > minVelocity && !this.fitHorizontally && this.container) {
      const newScrollLeft = this.container.scrollLeft + deltaX;
      this.container.scrollLeft = newScrollLeft;
      scrolled = true;
    }
    this.momentumVelocityY *= decayFactor;
    this.momentumVelocityX *= decayFactor;
    if (Math.abs(this.momentumVelocityY) > minVelocity || Math.abs(this.momentumVelocityX) > minVelocity) {
      this.momentumAnimation = requestAnimationFrame(() => {
        this.animateMomentum();
      });
      if (scrolled) {
        this.renderBuffer();
      }
    } else {
      this.momentumAnimation = null;
      this.momentumVelocityY = 0;
      this.momentumVelocityX = 0;
    }
  }
  renderBuffer() {
    if (!this.terminal || !this.container) {
      logger3.warn("renderBuffer called but missing terminal or container", {
        hasTerminal: !!this.terminal,
        hasContainer: !!this.container
      });
      return;
    }
    logger3.debug("renderBuffer executing");
    const startTime = this.debugMode ? performance.now() : 0;
    if (this.debugMode) {
      this.renderCount++;
    }
    const buffer = this.terminal.buffer.active;
    const bufferLength = buffer.length;
    const lineHeight = this.fontSize * 1.2;
    const startRowFloat = this.viewportY / lineHeight;
    const startRow = Math.floor(startRowFloat);
    const pixelOffset = (startRowFloat - startRow) * lineHeight;
    let html = "";
    const cell = buffer.getNullCell();
    const cursorX = this.terminal.buffer.active.cursorX;
    const cursorY = this.terminal.buffer.active.cursorY + this.terminal.buffer.active.viewportY;
    for (let i6 = 0; i6 < this.actualRows; i6++) {
      const row = startRow + i6;
      const style = pixelOffset > 0 ? ` style="transform: translateY(-${pixelOffset}px);"` : "";
      if (row >= bufferLength) {
        html += `<div class="terminal-line"${style}></div>`;
        continue;
      }
      const line = buffer.getLine(row);
      if (!line) {
        html += `<div class="terminal-line"${style}></div>`;
        continue;
      }
      const isCursorLine = row === cursorY;
      const lineContent = this.renderLine(
        line,
        cell,
        isCursorLine && this.cursorVisible ? cursorX : -1
      );
      html += `<div class="terminal-line"${style}>${lineContent || ""}</div>`;
    }
    this.container.innerHTML = html;
    UrlHighlighter.processLinks(this.container);
    processKeyboardShortcuts(this.container, this.handleShortcutClick);
    if (this.debugMode) {
      const endTime = performance.now();
      this.lastRenderTime = endTime - startTime;
      this.totalRenderTime += this.lastRenderTime;
      this.requestUpdate();
    }
  }
  renderLine(line, cell, cursorCol = -1) {
    let html = "";
    let currentChars = "";
    let currentClasses = "";
    let currentStyle = "";
    const escapeHtml = (text) => {
      return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#39;");
    };
    const flushGroup = () => {
      if (currentChars) {
        const escapedChars = escapeHtml(currentChars);
        html += `<span class="${currentClasses}"${currentStyle ? ` style="${currentStyle}"` : ""}>${escapedChars}</span>`;
        currentChars = "";
      }
    };
    for (let col = 0; col < line.length; col++) {
      line.getCell(col, cell);
      if (!cell) continue;
      const char = cell.getChars() || " ";
      const width = cell.getWidth();
      if (width === 0) continue;
      let classes = "terminal-char";
      let style = "";
      const isCursor = col === cursorCol;
      if (isCursor) {
        classes += " cursor";
      }
      const fg = cell.getFgColor();
      if (fg !== void 0) {
        if (typeof fg === "number" && fg >= 0 && fg <= 255) {
          style += `color: var(--terminal-color-${fg});`;
        } else if (typeof fg === "number" && fg > 255) {
          const r7 = fg >> 16 & 255;
          const g2 = fg >> 8 & 255;
          const b3 = fg & 255;
          style += `color: rgb(${r7}, ${g2}, ${b3});`;
        }
      }
      const bg = cell.getBgColor();
      if (bg !== void 0) {
        if (typeof bg === "number" && bg >= 0 && bg <= 255) {
          style += `background-color: var(--terminal-color-${bg});`;
        } else if (typeof bg === "number" && bg > 255) {
          const r7 = bg >> 16 & 255;
          const g2 = bg >> 8 & 255;
          const b3 = bg & 255;
          style += `background-color: rgb(${r7}, ${g2}, ${b3});`;
        }
      }
      const isBold = cell.isBold();
      const isItalic = cell.isItalic();
      const isUnderline = cell.isUnderline();
      const isDim = cell.isDim();
      const isInverse = cell.isInverse();
      const isInvisible = cell.isInvisible();
      const isStrikethrough = cell.isStrikethrough();
      const isOverline = cell.isOverline();
      if (isBold) classes += " bold";
      if (isItalic) classes += " italic";
      if (isUnderline) classes += " underline";
      if (isDim) classes += " dim";
      if (isStrikethrough) classes += " strikethrough";
      if (isOverline) classes += " overline";
      if (isInverse) {
        const tempFg = style.match(/color: ([^;]+);/)?.[1];
        const tempBg = style.match(/background-color: ([^;]+);/)?.[1];
        const defaultFg = "var(--terminal-foreground, #e4e4e4)";
        const defaultBg = "var(--terminal-background, #0a0a0a)";
        const actualFg = tempFg || defaultFg;
        const actualBg = tempBg || defaultBg;
        style = "";
        style += `color: ${actualBg};`;
        style += `background-color: ${actualFg};`;
      }
      if (isCursor) {
        style += `background-color: rgb(var(--color-primary));`;
      }
      if (isInvisible) {
        style += "opacity: 0;";
      }
      if (classes !== currentClasses || style !== currentStyle) {
        flushGroup();
        currentClasses = classes;
        currentStyle = style;
      }
      currentChars += char;
    }
    flushGroup();
    return html;
  }
  /**
   * DOM Terminal Public API
   *
   * This component provides a DOM-based terminal renderer with XTerm.js backend.
   * All buffer-modifying operations are queued and executed in requestAnimationFrame
   * to ensure optimal batching and rendering performance.
   */
  // === BUFFER MODIFICATION METHODS (Queued) ===
  /**
   * Write data to the terminal buffer.
   * @param data - String data to write (supports ANSI escape sequences)
   * @param followCursor - If true, automatically scroll to keep cursor visible (default: true)
   */
  write(data, followCursor = true) {
    if (!this.terminal) {
      logger3.warn("Terminal.write called but no terminal instance exists");
      return;
    }
    if (this.isMobile && data.length > 100) {
      logger3.debug(`[Terminal] \u{1F4F1} Large write to terminal`, {
        sessionId: this.sessionId,
        dataLength: data.length,
        followCursor,
        bufferLength: this.terminal.buffer.active.length,
        scrollPosition: this._viewportY
      });
    }
    if (data.includes("\x1B[?25l")) {
      this.cursorVisible = false;
    }
    if (data.includes("\x1B[?25h")) {
      this.cursorVisible = true;
    }
    this.queueRenderOperation(async () => {
      if (!this.terminal) return;
      await new Promise((resolve) => {
        if (this.terminal) {
          this.terminal.write(data, resolve);
        } else {
          resolve();
        }
      });
      if (followCursor && this.followCursorEnabled) {
        this.followCursor();
      }
    });
  }
  /**
   * Clear the terminal buffer and reset scroll position.
   */
  clear() {
    if (!this.terminal) return;
    this.queueRenderOperation(() => {
      if (!this.terminal) return;
      this.terminal.clear();
      this.viewportY = 0;
    });
  }
  /**
   * Resize the terminal to specified dimensions.
   * @param cols - Number of columns
   * @param rows - Number of rows
   */
  setTerminalSize(cols, rows) {
    this.cols = cols;
    this.rows = rows;
    if (!this.terminal) {
      return;
    }
    this.explicitSizeSet = true;
    this.queueRenderOperation(() => {
      if (!this.terminal) return;
      this.terminal.resize(cols, rows);
      this.requestUpdate();
    });
  }
  // === SCROLL CONTROL METHODS (Queued) ===
  /**
   * Scroll to the bottom of the buffer.
   */
  scrollToBottom() {
    if (!this.terminal) return;
    this.queueRenderOperation(() => {
      if (!this.terminal) return;
      this.requestResize("property-change");
      const buffer = this.terminal.buffer.active;
      const lineHeight = this.fontSize * 1.2;
      const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * lineHeight);
      this.programmaticScroll = true;
      this.viewportY = maxScrollPixels;
      this.programmaticScroll = false;
    });
  }
  /**
   * Scroll to a specific position in the buffer.
   * @param position - Line position (0 = top, max = bottom)
   */
  scrollToPosition(position) {
    if (!this.terminal) return;
    this.queueRenderOperation(() => {
      if (!this.terminal) return;
      const buffer = this.terminal.buffer.active;
      const lineHeight = this.fontSize * 1.2;
      const maxScrollLines = Math.max(0, buffer.length - this.actualRows);
      this.programmaticScroll = true;
      this.viewportY = Math.max(0, Math.min(maxScrollLines, position)) * lineHeight;
      this.programmaticScroll = false;
    });
  }
  /**
   * Queue a custom operation to be executed after the next render is complete.
   * Useful for actions that need to happen after terminal state is fully updated.
   * @param callback - Function to execute after render
   */
  queueCallback(callback) {
    this.queueRenderOperation(callback);
  }
  // === QUERY METHODS (Immediate) ===
  // Note: These methods return current state immediately but may return stale data
  // if operations are pending in the RAF queue. For guaranteed fresh data, call
  // these methods inside queueCallback() to ensure they run after all operations complete.
  /**
   * Get terminal dimensions.
   * @returns Object with cols and rows
   * @note May return stale data if operations are pending. Use queueCallback() for fresh data.
   */
  getTerminalSize() {
    return {
      cols: this.cols,
      rows: this.rows
    };
  }
  /**
   * Get number of visible rows in the current viewport.
   * @returns Number of rows that fit in the viewport
   * @note May return stale data if operations are pending. Use queueCallback() for fresh data.
   */
  getVisibleRows() {
    return this.actualRows;
  }
  /**
   * Get total number of lines in the scrollback buffer.
   * @returns Total lines in buffer
   * @note May return stale data if operations are pending. Use queueCallback() for fresh data.
   */
  getBufferSize() {
    if (!this.terminal) return 0;
    return this.terminal.buffer.active.length;
  }
  /**
   * Get current scroll position.
   * @returns Current scroll position (0 = top)
   * @note May return stale data if operations are pending. Use queueCallback() for fresh data.
   */
  getScrollPosition() {
    const lineHeight = this.fontSize * 1.2;
    return Math.round(this.viewportY / lineHeight);
  }
  /**
   * Get maximum possible scroll position.
   * @returns Maximum scroll position
   * @note May return stale data if operations are pending. Use queueCallback() for fresh data.
   */
  getMaxScrollPosition() {
    if (!this.terminal) return 0;
    const buffer = this.terminal.buffer.active;
    return Math.max(0, buffer.length - this.actualRows);
  }
  /**
   * Check if the terminal is currently scrolled to the bottom.
   * @returns True if at bottom, false otherwise
   */
  isScrolledToBottom() {
    if (!this.terminal) return true;
    const buffer = this.terminal.buffer.active;
    const lineHeight = this.fontSize * 1.2;
    const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * lineHeight);
    return this.viewportY >= maxScrollPixels - lineHeight;
  }
  /**
   * Update follow cursor state based on current scroll position.
   * Disable follow cursor when user scrolls away from bottom.
   * Re-enable when user scrolls back to bottom.
   */
  updateFollowCursorState() {
    if (this.programmaticScroll) return;
    const wasAtBottom = this.isScrolledToBottom();
    if (wasAtBottom && !this.followCursorEnabled) {
      this.followCursorEnabled = true;
    } else if (!wasAtBottom && this.followCursorEnabled) {
      this.followCursorEnabled = false;
    }
  }
  /**
   * Scroll the viewport to follow the cursor position.
   * This ensures the cursor stays visible during text input or playback.
   */
  followCursor() {
    if (!this.terminal) return;
    const buffer = this.terminal.buffer.active;
    const cursorY = buffer.cursorY + buffer.viewportY;
    const lineHeight = this.fontSize * 1.2;
    const cursorLine = cursorY;
    const viewportStartLine = Math.floor(this.viewportY / lineHeight);
    const viewportEndLine = viewportStartLine + this.actualRows - 1;
    this.programmaticScroll = true;
    if (cursorLine < viewportStartLine) {
      this.viewportY = cursorLine * lineHeight;
    } else if (cursorLine > viewportEndLine) {
      this.viewportY = Math.max(0, (cursorLine - this.actualRows + 1) * lineHeight);
    }
    const maxScrollPixels = Math.max(0, (buffer.length - this.actualRows) * lineHeight);
    this.viewportY = Math.min(this.viewportY, maxScrollPixels);
    this.programmaticScroll = false;
  }
  render() {
    const terminalTheme = this.getTerminalTheme();
    const containerStyle = `
      view-transition-name: session-${this.sessionId};
      background-color: ${terminalTheme.background || "var(--terminal-background, #0a0a0a)"};
      color: ${terminalTheme.foreground || "var(--terminal-foreground, #e4e4e4)"};
    `;
    return x`
      <style>
        /* Dynamic terminal sizing */
        .terminal-container {
          font-size: ${this.fontSize}px;
          line-height: ${this.fontSize * 1.2}px;
          touch-action: none !important;
        }

        .terminal-line {
          height: ${this.fontSize * 1.2}px;
          line-height: ${this.fontSize * 1.2}px;
        }
      </style>
      <div class="relative w-full h-full p-0 m-0">
        <div
          id="terminal-container"
          class="terminal-container w-full h-full overflow-hidden p-0 m-0"
          tabindex="0"
          contenteditable="false"
          style="${containerStyle}"
          @paste=${this.handlePaste}
          @click=${this.handleClick}
          data-testid="terminal-container"
        ></div>
        ${!this.followCursorEnabled && !this.hideScrollButton ? x`
              <div
                class="scroll-to-bottom"
                @click=${this.handleScrollToBottom}
                title="Scroll to bottom"
              >
                ↓
              </div>
            ` : ""}
        ${this.debugMode ? x`
              <div class="debug-overlay">
                <div class="metric">
                  <span class="metric-label">Renders:</span>
                  <span class="metric-value">${this.renderCount}</span>
                </div>
                <div class="metric">
                  <span class="metric-label">Avg:</span>
                  <span class="metric-value"
                    >${this.renderCount > 0 ? (this.totalRenderTime / this.renderCount).toFixed(2) : "0.00"}ms</span
                  >
                </div>
                <div class="metric">
                  <span class="metric-label">Last:</span>
                  <span class="metric-value">${this.lastRenderTime.toFixed(2)}ms</span>
                </div>
              </div>
            ` : ""}
      </div>
    `;
  }
};
__decorateClass([
  n4({ type: String })
], Terminal.prototype, "sessionId", 2);
__decorateClass([
  n4({ type: String })
], Terminal.prototype, "sessionStatus", 2);
__decorateClass([
  n4({ type: Number })
], Terminal.prototype, "cols", 2);
__decorateClass([
  n4({ type: Number })
], Terminal.prototype, "rows", 2);
__decorateClass([
  n4({ type: Number })
], Terminal.prototype, "fontSize", 2);
__decorateClass([
  n4({ type: Boolean })
], Terminal.prototype, "fitHorizontally", 2);
__decorateClass([
  n4({ type: Number })
], Terminal.prototype, "maxCols", 2);
__decorateClass([
  n4({ type: String })
], Terminal.prototype, "theme", 2);
__decorateClass([
  n4({ type: Boolean })
], Terminal.prototype, "disableClick", 2);
__decorateClass([
  n4({ type: Boolean })
], Terminal.prototype, "hideScrollButton", 2);
__decorateClass([
  n4({ type: Number })
], Terminal.prototype, "initialCols", 2);
__decorateClass([
  n4({ type: Number })
], Terminal.prototype, "initialRows", 2);
__decorateClass([
  r5()
], Terminal.prototype, "terminal", 2);
__decorateClass([
  r5()
], Terminal.prototype, "followCursorEnabled", 2);
__decorateClass([
  r5()
], Terminal.prototype, "actualRows", 2);
__decorateClass([
  r5()
], Terminal.prototype, "cursorVisible", 2);
Terminal = __decorateClass([
  t3("vibe-terminal")
], Terminal);

// src/client/utils/constants.ts
var Z_INDEX = {
  // Base UI elements (0-49)
  SESSION_LIST_BOTTOM_BAR: 10,
  TERMINAL_OVERLAY: 15,
  LOG_BUTTON: 20,
  MOBILE_OVERLAY: 25,
  SIDEBAR_MOBILE: 30,
  MOBILE_INPUT_OVERLAY: 40,
  CTRL_ALPHA_OVERLAY: 45,
  TERMINAL_QUICK_KEYS: 48,
  // Dropdowns and popovers (50-99)
  WIDTH_SELECTOR_DROPDOWN: 60,
  BRANCH_SELECTOR_DROPDOWN: 65,
  IME_INPUT: 70,
  // Invisible IME input for CJK text - needs to be above terminal but below modals
  // Modals and overlays (100-199)
  MODAL_BACKDROP: 100,
  MODAL: 105,
  FILE_PICKER: 110,
  SESSION_EXITED_OVERLAY: 120,
  NOTIFICATION: 150,
  // Notifications appear above modals but below file browser
  // Special high-priority overlays (200+)
  FILE_BROWSER: 1100
  // Must be higher than modal backdrop (1000)
};

// src/client/test/terminal-test.ts
var TerminalTest = class extends i4 {
  constructor() {
    super(...arguments);
    this.cols = 80;
    this.rows = 24;
    this.inputText = "";
    this.terminalRef = e6();
    this.testData = {
      ansi: "\x1B[31mRed\x1B[0m \x1B[32mGreen\x1B[0m \x1B[34mBlue\x1B[0m \x1B[1;33mBold Yellow\x1B[0m",
      unicode: "\u{1F680} Unicode: \u4F60\u597D\u4E16\u754C \u2022 \xF1 \u2022 \xFC \u2022 \xF6 \u2022 \u{1F3A8}",
      longLine: "This is a very long line that should wrap around when it reaches the edge of the terminal. ".repeat(
        5
      ),
      progress: "[##########          ] 50% Complete"
    };
  }
  createRenderRoot() {
    return this;
  }
  connectedCallback() {
    super.connectedCallback();
    this.setupTerminal();
  }
  async setupTerminal() {
    await this.updateComplete;
    const terminal = this.terminalRef.value;
    if (!terminal) return;
    terminal.addEventListener("terminal-ready", () => {
      this.writeWelcomeMessage();
    });
  }
  writeWelcomeMessage() {
    const terminal = this.terminalRef.value;
    if (!terminal) return;
    terminal.write("\x1B[1;36mVibeTunnel Terminal Test\x1B[0m\r\n");
    terminal.write("=====================================\r\n\r\n");
    terminal.write("This is a test environment for the terminal component.\r\n");
    terminal.write("Use the buttons above to test various features.\r\n\r\n");
    terminal.write("\x1B[32m$ \x1B[0m");
  }
  handleTerminalInput(e7) {
    const terminal = this.terminalRef.value;
    if (!terminal) return;
    const input = e7.detail;
    terminal.write(input);
    if (input === "\r") {
      terminal.write("\n\x1B[32m$ \x1B[0m");
    }
  }
  handleTerminalResize(e7) {
    console.log("Terminal resized:", e7.detail);
  }
  clearTerminal() {
    const terminal = this.terminalRef.value;
    if (!terminal) return;
    terminal.clear();
    terminal.write("\x1B[32m$ \x1B[0m");
  }
  writeTestData(type) {
    const terminal = this.terminalRef.value;
    if (!terminal) return;
    terminal.write(`${this.testData[type]}\r
\x1B[32m$ \x1B[0m`);
  }
  resizeTerminal(newCols, newRows) {
    this.cols = newCols;
    this.rows = newRows;
    const terminal = this.terminalRef.value;
    if (terminal) {
      terminal.setTerminalSize(newCols, newRows);
    }
  }
  sendCustomInput() {
    if (!this.inputText) return;
    const terminal = this.terminalRef.value;
    if (!terminal) return;
    terminal.write(`${this.inputText}\r
\x1B[32m$ \x1B[0m`);
    this.inputText = "";
  }
  render() {
    return x`
      <div class="h-screen flex flex-col bg-background text-foreground font-mono">
        <div class="bg-surface border-b border-gray-800 p-4 font-sans">
          <h1 class="text-2xl font-bold text-emerald-400 mb-4">Terminal Test</h1>
          <div class="flex gap-2 flex-wrap">
            <button
              @click=${this.clearTerminal}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              Clear
            </button>
            <button
              @click=${() => this.writeTestData("ansi")}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              ANSI Colors
            </button>
            <button
              @click=${() => this.writeTestData("unicode")}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              Unicode
            </button>
            <button
              @click=${() => this.writeTestData("longLine")}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              Long Line
            </button>
            <button
              @click=${() => this.writeTestData("progress")}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              Progress Bar
            </button>
            <button
              @click=${() => this.resizeTerminal(80, 24)}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              80x24
            </button>
            <button
              @click=${() => this.resizeTerminal(120, 30)}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              120x30
            </button>
            <button
              @click=${() => this.resizeTerminal(40, 15)}
              class="px-3 py-1.5 bg-gray-800 hover:bg-gray-700 border border-gray-700 hover:border-emerald-400 rounded text-sm transition-colors"
            >
              40x15
            </button>
          </div>
        </div>

        <div class="flex-1 relative overflow-hidden bg-black m-4 rounded-lg border border-gray-800">
          <div
            class="absolute top-4 right-4 bg-black/80 border border-gray-800 rounded px-3 py-1.5 text-xs"
            style="z-index: ${Z_INDEX.TERMINAL_OVERLAY};"
          >
            <div>Size: <code class="text-emerald-400">${this.cols}x${this.rows}</code></div>
          </div>

          <vibe-terminal
            ${n6(this.terminalRef)}
            .cols=${this.cols}
            .rows=${this.rows}
            @terminal-input=${this.handleTerminalInput}
            @terminal-resize=${this.handleTerminalResize}
            style="width: 100%; height: 100%;"
          ></vibe-terminal>

          <div class="absolute bottom-4 left-4 right-4 flex gap-2" style="z-index: ${Z_INDEX.TERMINAL_OVERLAY};">
            <input
              type="text"
              placeholder="Type custom text to send..."
              class="flex-1 px-3 py-2 bg-black/80 text-foreground border border-gray-800 rounded font-mono text-sm placeholder-gray-600 focus:outline-none focus:border-emerald-400"
              .value=${this.inputText}
              @input=${(e7) => {
      this.inputText = e7.target.value;
    }}
              @keydown=${(e7) => {
      if (e7.key === "Enter") {
        this.sendCustomInput();
      }
    }}
            />
            <button
              @click=${this.sendCustomInput}
              class="px-4 py-2 bg-emerald-500 hover:bg-emerald-600 text-background rounded font-medium text-sm transition-colors"
            >
              Send
            </button>
          </div>
        </div>
      </div>
    `;
  }
};
__decorateClass([
  r5()
], TerminalTest.prototype, "cols", 2);
__decorateClass([
  r5()
], TerminalTest.prototype, "rows", 2);
__decorateClass([
  r5()
], TerminalTest.prototype, "inputText", 2);
TerminalTest = __decorateClass([
  t3("terminal-test")
], TerminalTest);

// src/client/components/monaco-editor.ts
init_logger();

// src/client/utils/monaco-loader.ts
init_logger();
var logger4 = createLogger("monaco-loader");
var isInitialized = false;
var loadingPromise = null;
async function loadMonacoEditor() {
  if (loadingPromise) return loadingPromise;
  loadingPromise = new Promise((resolve, reject) => {
    const loadWhenIdle = () => {
      const loaderScript = document.createElement("script");
      loaderScript.src = "/monaco-editor/vs/loader.js";
      loaderScript.async = true;
      loaderScript.defer = true;
      loaderScript.onload = () => {
        window.require.config({
          paths: {
            vs: "/monaco-editor/vs"
          }
        });
        window.MonacoEnvironment = {
          getWorker: (_workerId, _label) => {
            return new Worker("data:,");
          }
        };
        window.require(["vs/editor/editor.main"], () => {
          logger4.debug("Monaco Editor loaded via AMD with lazy loading");
          resolve();
        });
      };
      loaderScript.onerror = () => {
        reject(new Error("Failed to load Monaco loader script"));
      };
      document.head.appendChild(loaderScript);
    };
    if ("requestIdleCallback" in window) {
      requestIdleCallback(loadWhenIdle, { timeout: 2e3 });
    } else {
      setTimeout(loadWhenIdle, 100);
    }
  });
  return loadingPromise;
}
async function initializeMonaco() {
  if (isInitialized) {
    return;
  }
  try {
    logger4.debug("Loading Monaco Editor...");
    if (!window.monaco) {
      await loadMonacoEditor();
    }
    logger4.debug("Initializing Monaco Editor...");
    const monaco2 = window.monaco;
    monaco2.languages.register({ id: "shell" });
    monaco2.languages.setMonarchTokensProvider("shell", {
      tokenizer: {
        root: [
          [/^#.*$/, "comment"],
          [/\$\w+/, "variable"],
          [
            /\b(echo|cd|ls|grep|find|chmod|mkdir|rm|cp|mv|touch|cat|sed|awk|curl|wget|git|pnpm|npm|yarn|docker|kubectl)\b/,
            "keyword"
          ],
          [/"([^"\\]|\\.)*"/, "string"],
          [/'([^'\\]|\\.)*'/, "string"]
        ]
      }
    });
    monaco2.editor.setTheme(isDarkMode() ? "vs-dark" : "vs");
    const themeObserver = new MutationObserver(() => {
      monaco2.editor.setTheme(isDarkMode() ? "vs-dark" : "vs");
    });
    themeObserver.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["data-theme"]
    });
    isInitialized = true;
    logger4.debug("Monaco Editor initialized successfully");
  } catch (error) {
    logger4.error("Failed to initialize Monaco Editor:", error);
    throw error;
  }
}
var monaco = typeof window !== "undefined" ? window.monaco : void 0;

// src/client/components/monaco-editor.ts
var logger5 = createLogger("monaco-editor");
var MonacoEditor = class extends i4 {
  constructor() {
    super(...arguments);
    this.content = "";
    this.originalContent = "";
    this.modifiedContent = "";
    this.language = "";
    this.filename = "";
    this.readOnly = false;
    this.mode = "normal";
    this.showModeToggle = false;
    this.options = {};
    this.isLoading = true;
    this.diffMode = "sideBySide";
    this.containerWidth = 0;
    this.containerRef = e6();
    this.editor = null;
    this.resizeObserver = null;
    this.monacoLoaded = false;
  }
  createRenderRoot() {
    return this;
  }
  async connectedCallback() {
    super.connectedCallback();
    await this.loadMonaco();
    this.setupResizeObserver();
    await this.updateComplete;
    if (this.containerRef.value && !this.editor && !this.isLoading) {
      await this.createEditor();
    }
  }
  disconnectedCallback() {
    super.disconnectedCallback();
    this.disposeEditor();
    if (this.resizeObserver) {
      this.resizeObserver.disconnect();
      this.resizeObserver = null;
    }
  }
  async loadMonaco() {
    if (this.monacoLoaded || window.monaco) {
      this.monacoLoaded = true;
      this.isLoading = false;
      return;
    }
    try {
      logger5.debug("Loading Monaco Editor...");
      await initializeMonaco();
      this.monacoLoaded = true;
      this.isLoading = false;
      logger5.debug("Monaco Editor loaded successfully");
    } catch (error) {
      logger5.error("Failed to load Monaco Editor:", error);
      this.isLoading = false;
    }
  }
  setupResizeObserver() {
    this.resizeObserver = new ResizeObserver((entries) => {
      for (const entry of entries) {
        this.containerWidth = entry.contentRect.width;
        if (this.mode === "diff" && this.editor) {
          const shouldBeInline = this.containerWidth < 768;
          const newMode = shouldBeInline ? "inline" : "sideBySide";
          if (newMode !== this.diffMode) {
            this.diffMode = newMode;
            this.recreateEditor();
          }
        }
        if (this.editor) {
          this.editor.layout();
        }
      }
    });
    if (this.containerRef.value) {
      this.resizeObserver.observe(this.containerRef.value);
    }
  }
  async updated(changedProperties) {
    super.updated(changedProperties);
    const needsRecreate = changedProperties.has("mode") || changedProperties.has("content") && !this.editor || changedProperties.has("originalContent") && this.mode === "diff" || changedProperties.has("modifiedContent") && this.mode === "diff";
    if (needsRecreate && !this.isLoading && this.containerRef.value) {
      await this.recreateEditor();
    } else if (this.editor && !this.isLoading) {
      if (changedProperties.has("content") && this.mode === "normal") {
        this.updateContent();
      }
      if (changedProperties.has("language") || changedProperties.has("filename")) {
        this.updateLanguage();
      }
      if (changedProperties.has("readOnly")) {
        this.updateReadOnly();
      }
    }
  }
  async recreateEditor() {
    this.disposeEditor();
    await this.createEditor();
  }
  async createEditor() {
    if (!this.containerRef.value || !window.monaco) {
      return;
    }
    try {
      this.setupTheme();
      const commonOptions = {
        theme: "vs-dark",
        automaticLayout: true,
        fontSize: 14,
        fontFamily: "'Fira Code', Menlo, Monaco, 'Courier New', monospace",
        fontLigatures: true,
        minimap: { enabled: false },
        scrollBeyondLastLine: false,
        renderWhitespace: "selection",
        readOnly: this.readOnly,
        // Enable folding
        folding: true,
        foldingStrategy: "indentation",
        // Use indentation-based folding instead of language-aware
        foldingHighlight: true,
        showFoldingControls: "always",
        // Ensure decorations are visible
        renderLineHighlight: "all",
        renderLineHighlightOnlyWhenFocus: false,
        ...this.options
      };
      if (this.mode === "diff") {
        const diffOptions = {
          readOnly: true,
          automaticLayout: true,
          scrollBeyondLastLine: false,
          minimap: { enabled: false },
          renderWhitespace: "selection",
          renderSideBySide: this.diffMode === "sideBySide",
          ignoreTrimWhitespace: false
        };
        this.editor = window.monaco.editor.createDiffEditor(this.containerRef.value, diffOptions);
        const language = this.detectLanguage();
        const timestamp = Date.now();
        const baseUri = `${this.filename || "untitled"}-${timestamp}`;
        const originalModel = window.monaco.editor.createModel(
          this.originalContent || "",
          language,
          window.monaco.Uri.parse(`file:///${baseUri}#original`)
        );
        const modifiedModel = window.monaco.editor.createModel(
          this.modifiedContent || "",
          language,
          window.monaco.Uri.parse(`file:///${baseUri}#modified`)
        );
        logger5.debug("Creating diff editor");
        const diffEditor = this.editor;
        diffEditor.setModel({
          original: originalModel,
          modified: modifiedModel
        });
        const restoreLayout = () => {
          if (this.editor) {
            this.editor.layout();
          }
        };
        const disposable = diffEditor.onDidUpdateDiff(() => {
          restoreLayout();
          disposable.dispose();
        });
        setTimeout(restoreLayout, 200);
      } else {
        this.editor = window.monaco.editor.create(this.containerRef.value, {
          ...commonOptions,
          value: this.content,
          language: this.detectLanguage()
        });
        if (!this.readOnly) {
          this.editor.addCommand(
            window.monaco.KeyMod.CtrlCmd | window.monaco.KeyCode.KeyS,
            () => {
              this.handleSave();
            }
          );
          this.editor.onDidChangeModelContent(() => {
            const content = this.editor?.getValue() || "";
            this.dispatchEvent(
              new CustomEvent("content-changed", {
                detail: { content },
                bubbles: true,
                composed: true
              })
            );
          });
        }
      }
      logger5.debug(`Created ${this.mode} editor`);
    } catch (error) {
      logger5.error("Failed to create editor:", error);
    }
  }
  setupTheme() {
    if (!window.monaco) return;
  }
  detectLanguage() {
    if (this.language) {
      return this.language;
    }
    if (this.filename) {
      const ext = this.filename.split(".").pop()?.toLowerCase();
      const languageMap = {
        js: "javascript",
        jsx: "javascript",
        ts: "typescript",
        tsx: "typescript",
        json: "json",
        html: "html",
        htm: "html",
        css: "css",
        scss: "scss",
        sass: "sass",
        less: "less",
        py: "python",
        rb: "ruby",
        go: "go",
        rs: "rust",
        java: "java",
        c: "c",
        cpp: "cpp",
        cs: "csharp",
        php: "php",
        swift: "swift",
        kt: "kotlin",
        scala: "scala",
        r: "r",
        sql: "sql",
        sh: "shell",
        bash: "shell",
        zsh: "shell",
        fish: "shell",
        ps1: "powershell",
        yml: "yaml",
        yaml: "yaml",
        xml: "xml",
        md: "markdown",
        markdown: "markdown",
        dockerfile: "dockerfile",
        makefile: "makefile",
        gitignore: "gitignore"
      };
      return languageMap[ext || ""] || "plaintext";
    }
    return "plaintext";
  }
  updateContent() {
    if (!this.editor || this.mode === "diff") return;
    const currentValue = this.editor.getValue();
    if (currentValue !== this.content) {
      this.editor.setValue(this.content);
    }
  }
  updateLanguage() {
    if (!this.editor || !window.monaco) return;
    const language = this.detectLanguage();
    if (this.mode === "normal") {
      const model = this.editor.getModel();
      if (model) {
        window.monaco.editor.setModelLanguage(model, language);
      }
    } else {
      const diffEditor = this.editor;
      const originalModel = diffEditor.getOriginalEditor().getModel();
      const modifiedModel = diffEditor.getModifiedEditor().getModel();
      if (originalModel) {
        window.monaco.editor.setModelLanguage(originalModel, language);
      }
      if (modifiedModel) {
        window.monaco.editor.setModelLanguage(modifiedModel, language);
      }
    }
  }
  updateReadOnly() {
    if (!this.editor) return;
    if (this.mode === "normal") {
      this.editor.updateOptions({ readOnly: this.readOnly });
    } else {
      const diffEditor = this.editor;
      diffEditor.getModifiedEditor().updateOptions({ readOnly: this.readOnly });
    }
  }
  handleSave() {
    if (this.readOnly || !this.editor || this.mode === "diff") return;
    const content = this.editor.getValue();
    this.dispatchEvent(
      new CustomEvent("save", {
        detail: { content },
        bubbles: true,
        composed: true
      })
    );
  }
  toggleDiffMode() {
    if (this.mode !== "diff") return;
    this.diffMode = this.diffMode === "inline" ? "sideBySide" : "inline";
    let originalContent = "";
    let modifiedContent = "";
    if (this.editor) {
      const diffEditor = this.editor;
      const model = diffEditor.getModel();
      if (model) {
        originalContent = model.original?.getValue() || this.originalContent || "";
        modifiedContent = model.modified?.getValue() || this.modifiedContent || "";
      }
    }
    this.originalContent = originalContent;
    this.modifiedContent = modifiedContent;
    this.recreateEditor();
  }
  disposeEditor() {
    if (this.editor) {
      if (this.mode === "diff") {
        const diffEditor = this.editor;
        const currentModel = diffEditor.getModel();
        diffEditor.setModel(null);
        if (currentModel) {
          setTimeout(() => {
            currentModel.original?.dispose();
            currentModel.modified?.dispose();
          }, 0);
        }
      }
      this.editor.dispose();
      this.editor = null;
    }
  }
  render() {
    return x`
      <div
        class="monaco-editor-root"
        style="display: block; width: 100%; height: 100%; position: relative;"
      >
        <div
          class="editor-container"
          ${n6(this.containerRef)}
          style="width: 100%; height: 100%; position: relative; background: rgb(var(--color-bg-secondary));"
        >
          ${this.isLoading ? x`
                <div
                  class="loading"
                  style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: rgb(var(--color-text-muted)); font-family: ui-monospace, monospace;"
                >
                  Loading editor...
                </div>
              ` : ""}
          ${this.showModeToggle && this.mode === "diff" && !this.isLoading ? x`
                <button
                  class="mode-toggle"
                  style="position: absolute; top: 10px; right: 10px; z-index: 10; background: rgb(var(--color-surface)); border: 1px solid rgb(var(--color-border)); color: rgb(var(--color-text)); padding: 4px 8px; border-radius: 4px; font-size: 12px; cursor: pointer;"
                  @click=${this.toggleDiffMode}
                  title="Toggle between inline and side-by-side diff"
                  @mouseenter=${(e7) => {
      const btn = e7.target;
      btn.style.background = "rgb(var(--color-surface-hover))";
      btn.style.borderColor = "rgb(var(--color-border-focus))";
    }}
                  @mouseleave=${(e7) => {
      const btn = e7.target;
      btn.style.background = "rgb(var(--color-surface))";
      btn.style.borderColor = "rgb(var(--color-border))";
    }}
                >
                  ${this.diffMode === "inline" ? "Side by Side" : "Inline"}
                </button>
              ` : ""}
        </div>
      </div>
    `;
  }
};
__decorateClass([
  n4({ type: String })
], MonacoEditor.prototype, "content", 2);
__decorateClass([
  n4({ type: String })
], MonacoEditor.prototype, "originalContent", 2);
__decorateClass([
  n4({ type: String })
], MonacoEditor.prototype, "modifiedContent", 2);
__decorateClass([
  n4({ type: String })
], MonacoEditor.prototype, "language", 2);
__decorateClass([
  n4({ type: String })
], MonacoEditor.prototype, "filename", 2);
__decorateClass([
  n4({ type: Boolean })
], MonacoEditor.prototype, "readOnly", 2);
__decorateClass([
  n4({ type: String })
], MonacoEditor.prototype, "mode", 2);
__decorateClass([
  n4({ type: Boolean })
], MonacoEditor.prototype, "showModeToggle", 2);
__decorateClass([
  n4({ type: Object })
], MonacoEditor.prototype, "options", 2);
__decorateClass([
  r5()
], MonacoEditor.prototype, "isLoading", 2);
__decorateClass([
  r5()
], MonacoEditor.prototype, "diffMode", 2);
__decorateClass([
  r5()
], MonacoEditor.prototype, "containerWidth", 2);
MonacoEditor = __decorateClass([
  t3("monaco-editor")
], MonacoEditor);

// src/client/test/monaco-editor-test.ts
var MonacoEditorTest = class extends i4 {
  constructor() {
    super(...arguments);
    this.mode = "diff";
    this.readOnly = false;
    this.showModeToggle = true;
    this.language = "typescript";
    this.content = "";
    this.originalContent = "";
    this.modifiedContent = "";
    this.savedContent = "";
    this.sampleCode = {
      typescript: `// TypeScript Example
interface User {
  id: number;
  name: string;
  email: string;
  isActive: boolean;
}

class UserService {
  private users: User[] = [];

  async getUser(id: number): Promise<User | undefined> {
    return this.users.find(user => user.id === id);
  }

  async createUser(user: Omit<User, 'id'>): Promise<User> {
    const newUser: User = {
      ...user,
      id: this.users.length + 1
    };
    this.users.push(newUser);
    return newUser;
  }
}

export default UserService;`,
      javascript: `// JavaScript Example
class Calculator {
  constructor() {
    this.result = 0;
  }

  add(a, b) {
    this.result = a + b;
    return this.result;
  }

  subtract(a, b) {
    this.result = a - b;
    return this.result;
  }

  multiply(a, b) {
    this.result = a * b;
    return this.result;
  }

  divide(a, b) {
    if (b === 0) {
      throw new Error('Division by zero');
    }
    this.result = a / b;
    return this.result;
  }
}

module.exports = Calculator;`,
      python: `# Python Example
import asyncio
from typing import List, Optional

class TaskManager:
    def __init__(self):
        self.tasks: List[asyncio.Task] = []
        self.results: List[any] = []
    
    async def add_task(self, coro):
        """Add a coroutine as a task"""
        task = asyncio.create_task(coro)
        self.tasks.append(task)
        return task
    
    async def wait_all(self) -> List[any]:
        """Wait for all tasks to complete"""
        if not self.tasks:
            return []
        
        self.results = await asyncio.gather(*self.tasks)
        return self.results
    
    def cancel_all(self):
        """Cancel all pending tasks"""
        for task in self.tasks:
            if not task.done():
                task.cancel()

# Example usage
async def main():
    manager = TaskManager()
    await manager.add_task(asyncio.sleep(1))
    await manager.wait_all()`,
      json: `{
  "name": "monaco-editor-test",
  "version": "1.0.0",
  "description": "Monaco Editor test component",
  "dependencies": {
    "monaco-editor": "^0.52.2",
    "lit": "^3.3.0"
  },
  "scripts": {
    "test": "echo 'Error: no test specified' && exit 1",
    "build": "tsc && vite build",
    "dev": "vite"
  },
  "keywords": ["monaco", "editor", "test"],
  "author": "VibeTunnel Team",
  "license": "MIT"
}`
    };
  }
  createRenderRoot() {
    return this;
  }
  connectedCallback() {
    super.connectedCallback();
    this.loadSampleContent();
  }
  loadSampleContent() {
    const baseContent = this.sampleCode[this.language] || this.sampleCode.typescript;
    this.content = baseContent;
    this.originalContent = baseContent;
    this.modifiedContent = `${baseContent}

// Modified by user
console.log("Changes made!");`;
  }
  handleModeChange(newMode) {
    this.mode = newMode;
    this.loadSampleContent();
  }
  handleLanguageChange(e7) {
    const select = e7.target;
    this.language = select.value;
    this.loadSampleContent();
  }
  handleSave(e7) {
    this.savedContent = e7.detail.content;
    console.log("Content saved:", this.savedContent);
    alert("Content saved! Check console for details.");
  }
  handleContentChanged(e7) {
    console.log("Content changed:", e7.detail.content);
  }
  render() {
    return x`
      <div class="h-screen flex flex-col bg-background text-foreground">
        <div class="bg-surface border-b border-gray-800 p-4">
          <h1 class="text-2xl font-bold text-emerald-400 mb-4">Monaco Editor Test</h1>
          <div class="flex gap-3 flex-wrap items-center">
            <span class="text-sm text-gray-400">Mode:</span>
            <button
              class="${this.mode === "normal" ? "bg-emerald-500 text-background" : "bg-gray-800 hover:bg-gray-700 text-foreground"} px-3 py-1.5 border ${this.mode === "normal" ? "border-emerald-500" : "border-gray-700 hover:border-emerald-400"} rounded text-sm transition-colors"
              @click=${() => this.handleModeChange("normal")}
            >
              Normal
            </button>
            <button
              class="${this.mode === "diff" ? "bg-emerald-500 text-background" : "bg-gray-800 hover:bg-gray-700 text-foreground"} px-3 py-1.5 border ${this.mode === "diff" ? "border-emerald-500" : "border-gray-700 hover:border-emerald-400"} rounded text-sm transition-colors"
              @click=${() => this.handleModeChange("diff")}
            >
              Diff
            </button>

            <span class="text-sm text-gray-400 ml-4">Language:</span>
            <select
              @change=${this.handleLanguageChange}
              .value=${this.language}
              class="px-3 py-1.5 bg-gray-800 text-foreground border border-gray-700 hover:border-emerald-400 rounded text-sm cursor-pointer focus:outline-none focus:border-emerald-400"
            >
              <option value="typescript">TypeScript</option>
              <option value="javascript">JavaScript</option>
              <option value="python">Python</option>
              <option value="json">JSON</option>
            </select>

            <label class="flex items-center gap-2 ml-4 text-sm cursor-pointer">
              <input
                type="checkbox"
                .checked=${this.readOnly}
                @change=${(e7) => {
      this.readOnly = e7.target.checked;
    }}
                class="w-4 h-4 rounded border-gray-700 bg-gray-800 text-emerald-500 focus:ring-emerald-400 focus:ring-offset-0"
              />
              <span>Read Only</span>
            </label>

            ${this.mode === "diff" ? x`
                  <label class="flex items-center gap-2 ml-4 text-sm cursor-pointer">
                    <input
                      type="checkbox"
                      .checked=${this.showModeToggle}
                      @change=${(e7) => {
      this.showModeToggle = e7.target.checked;
    }}
                      class="w-4 h-4 rounded border-gray-700 bg-gray-800 text-emerald-500 focus:ring-emerald-400 focus:ring-offset-0"
                    />
                    <span>Show Mode Toggle</span>
                  </label>
                ` : ""}
          </div>
        </div>

        <div class="flex-1 relative overflow-hidden border border-gray-800 m-4 rounded-lg">
          <div
            class="absolute top-4 right-4 bg-black/80 border border-gray-800 rounded px-3 py-1.5 text-xs"
            style="z-index: ${Z_INDEX.TERMINAL_OVERLAY};"
          >
            <div>Mode: <code class="text-emerald-400">${this.mode}</code></div>
            <div>Language: <code class="text-emerald-400">${this.language}</code></div>
            <div>Read Only: <code class="text-emerald-400">${this.readOnly}</code></div>
          </div>

          <monaco-editor
            .mode=${this.mode}
            .content=${this.content}
            .originalContent=${this.originalContent}
            .modifiedContent=${this.modifiedContent}
            .language=${this.language}
            .readOnly=${this.readOnly}
            .showModeToggle=${this.showModeToggle}
            @save=${this.handleSave}
            @content-changed=${this.handleContentChanged}
            style="width: 100%; height: 100%;"
          ></monaco-editor>
        </div>
      </div>
    `;
  }
};
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "mode", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "readOnly", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "showModeToggle", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "language", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "content", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "originalContent", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "modifiedContent", 2);
__decorateClass([
  r5()
], MonacoEditorTest.prototype, "savedContent", 2);
MonacoEditorTest = __decorateClass([
  t3("monaco-editor-test")
], MonacoEditorTest);
/*! Bundled license information:

@lit/reactive-element/css-tag.js:
  (**
   * @license
   * Copyright 2019 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/reactive-element.js:
lit-html/lit-html.js:
lit-element/lit-element.js:
@lit/reactive-element/decorators/custom-element.js:
@lit/reactive-element/decorators/property.js:
@lit/reactive-element/decorators/state.js:
@lit/reactive-element/decorators/event-options.js:
@lit/reactive-element/decorators/base.js:
@lit/reactive-element/decorators/query.js:
@lit/reactive-element/decorators/query-all.js:
@lit/reactive-element/decorators/query-async.js:
@lit/reactive-element/decorators/query-assigned-nodes.js:
lit-html/directive.js:
lit-html/async-directive.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/is-server.js:
  (**
   * @license
   * Copyright 2022 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/reactive-element/decorators/query-assigned-elements.js:
  (**
   * @license
   * Copyright 2021 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

lit-html/directive-helpers.js:
lit-html/directives/ref.js:
  (**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=data:application/json;base64,
