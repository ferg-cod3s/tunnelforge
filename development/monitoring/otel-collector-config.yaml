# OpenTelemetry Collector Configuration
# Multi-backend setup: Sentry + Jaeger + Prometheus

receivers:
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318

processors:
  # Memory limiter to prevent OOM
  memory_limiter:
    limit_mib: 512
    spike_limit_mib: 128
    check_interval: 5s
  
  # Batch processor for efficiency
  batch:
    timeout: 1s
    send_batch_size: 1024
    send_batch_max_size: 2048
  
  # Resource processor to add consistent attributes
  resource:
    attributes:
      - key: deployment.environment
        value: "development"
        action: upsert
      - key: service.namespace
        value: "tunnelforge"
        action: upsert

exporters:
  # Sentry exporter (requires SENTRY_DSN environment variable)
  sentry:
    dsn: "${SENTRY_DSN}"
    environment: "development"
    
  # Jaeger exporter for distributed tracing
  jaeger:
    endpoint: jaeger:14250
    tls:
      insecure: true
  
  # Prometheus exporter for metrics
  prometheus:
    endpoint: "0.0.0.0:8889"
    namespace: "tunnelforge"
    const_labels:
      environment: "development"
  
  # Logging exporter for debugging
  logging:
    loglevel: info
    sampling_initial: 5
    sampling_thereafter: 200

service:
  extensions: []
  
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [sentry, jaeger, logging]
    
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, logging]
    
    logs:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [logging]

  # Telemetry configuration for the collector itself
  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888